// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/predicate"
	"github.com/gnoverse/gh-sql/ent/pullrequest"
	"github.com/gnoverse/gh-sql/ent/repository"
	"github.com/gnoverse/gh-sql/ent/user"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// PullRequestUpdate is the builder for updating PullRequest entities.
type PullRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PullRequestMutation
}

// Where appends a list predicates to the PullRequestUpdate builder.
func (pru *PullRequestUpdate) Where(ps ...predicate.PullRequest) *PullRequestUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetURL sets the "url" field.
func (pru *PullRequestUpdate) SetURL(s string) *PullRequestUpdate {
	pru.mutation.SetURL(s)
	return pru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetURL(*s)
	}
	return pru
}

// SetNodeID sets the "node_id" field.
func (pru *PullRequestUpdate) SetNodeID(s string) *PullRequestUpdate {
	pru.mutation.SetNodeID(s)
	return pru
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableNodeID(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetNodeID(*s)
	}
	return pru
}

// SetHTMLURL sets the "html_url" field.
func (pru *PullRequestUpdate) SetHTMLURL(s string) *PullRequestUpdate {
	pru.mutation.SetHTMLURL(s)
	return pru
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableHTMLURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetHTMLURL(*s)
	}
	return pru
}

// SetDiffURL sets the "diff_url" field.
func (pru *PullRequestUpdate) SetDiffURL(s string) *PullRequestUpdate {
	pru.mutation.SetDiffURL(s)
	return pru
}

// SetNillableDiffURL sets the "diff_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableDiffURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetDiffURL(*s)
	}
	return pru
}

// SetPatchURL sets the "patch_url" field.
func (pru *PullRequestUpdate) SetPatchURL(s string) *PullRequestUpdate {
	pru.mutation.SetPatchURL(s)
	return pru
}

// SetNillablePatchURL sets the "patch_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillablePatchURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetPatchURL(*s)
	}
	return pru
}

// SetIssueURL sets the "issue_url" field.
func (pru *PullRequestUpdate) SetIssueURL(s string) *PullRequestUpdate {
	pru.mutation.SetIssueURL(s)
	return pru
}

// SetNillableIssueURL sets the "issue_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableIssueURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetIssueURL(*s)
	}
	return pru
}

// SetCommitsURL sets the "commits_url" field.
func (pru *PullRequestUpdate) SetCommitsURL(s string) *PullRequestUpdate {
	pru.mutation.SetCommitsURL(s)
	return pru
}

// SetNillableCommitsURL sets the "commits_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableCommitsURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetCommitsURL(*s)
	}
	return pru
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (pru *PullRequestUpdate) SetReviewCommentsURL(s string) *PullRequestUpdate {
	pru.mutation.SetReviewCommentsURL(s)
	return pru
}

// SetNillableReviewCommentsURL sets the "review_comments_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableReviewCommentsURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetReviewCommentsURL(*s)
	}
	return pru
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (pru *PullRequestUpdate) SetReviewCommentURL(s string) *PullRequestUpdate {
	pru.mutation.SetReviewCommentURL(s)
	return pru
}

// SetNillableReviewCommentURL sets the "review_comment_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableReviewCommentURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetReviewCommentURL(*s)
	}
	return pru
}

// SetCommentsURL sets the "comments_url" field.
func (pru *PullRequestUpdate) SetCommentsURL(s string) *PullRequestUpdate {
	pru.mutation.SetCommentsURL(s)
	return pru
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableCommentsURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetCommentsURL(*s)
	}
	return pru
}

// SetStatusesURL sets the "statuses_url" field.
func (pru *PullRequestUpdate) SetStatusesURL(s string) *PullRequestUpdate {
	pru.mutation.SetStatusesURL(s)
	return pru
}

// SetNillableStatusesURL sets the "statuses_url" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableStatusesURL(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetStatusesURL(*s)
	}
	return pru
}

// SetNumber sets the "number" field.
func (pru *PullRequestUpdate) SetNumber(i int64) *PullRequestUpdate {
	pru.mutation.ResetNumber()
	pru.mutation.SetNumber(i)
	return pru
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableNumber(i *int64) *PullRequestUpdate {
	if i != nil {
		pru.SetNumber(*i)
	}
	return pru
}

// AddNumber adds i to the "number" field.
func (pru *PullRequestUpdate) AddNumber(i int64) *PullRequestUpdate {
	pru.mutation.AddNumber(i)
	return pru
}

// SetState sets the "state" field.
func (pru *PullRequestUpdate) SetState(pu pullrequest.State) *PullRequestUpdate {
	pru.mutation.SetState(pu)
	return pru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableState(pu *pullrequest.State) *PullRequestUpdate {
	if pu != nil {
		pru.SetState(*pu)
	}
	return pru
}

// SetLocked sets the "locked" field.
func (pru *PullRequestUpdate) SetLocked(b bool) *PullRequestUpdate {
	pru.mutation.SetLocked(b)
	return pru
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableLocked(b *bool) *PullRequestUpdate {
	if b != nil {
		pru.SetLocked(*b)
	}
	return pru
}

// SetTitle sets the "title" field.
func (pru *PullRequestUpdate) SetTitle(s string) *PullRequestUpdate {
	pru.mutation.SetTitle(s)
	return pru
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableTitle(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetTitle(*s)
	}
	return pru
}

// SetBody sets the "body" field.
func (pru *PullRequestUpdate) SetBody(s string) *PullRequestUpdate {
	pru.mutation.SetBody(s)
	return pru
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableBody(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetBody(*s)
	}
	return pru
}

// ClearBody clears the value of the "body" field.
func (pru *PullRequestUpdate) ClearBody() *PullRequestUpdate {
	pru.mutation.ClearBody()
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PullRequestUpdate) SetCreatedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableCreatedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetCreatedAt(*t)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PullRequestUpdate) SetUpdatedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableUpdatedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetUpdatedAt(*t)
	}
	return pru
}

// SetClosedAt sets the "closed_at" field.
func (pru *PullRequestUpdate) SetClosedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetClosedAt(t)
	return pru
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableClosedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetClosedAt(*t)
	}
	return pru
}

// ClearClosedAt clears the value of the "closed_at" field.
func (pru *PullRequestUpdate) ClearClosedAt() *PullRequestUpdate {
	pru.mutation.ClearClosedAt()
	return pru
}

// SetMergedAt sets the "merged_at" field.
func (pru *PullRequestUpdate) SetMergedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetMergedAt(t)
	return pru
}

// SetNillableMergedAt sets the "merged_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableMergedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetMergedAt(*t)
	}
	return pru
}

// ClearMergedAt clears the value of the "merged_at" field.
func (pru *PullRequestUpdate) ClearMergedAt() *PullRequestUpdate {
	pru.mutation.ClearMergedAt()
	return pru
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (pru *PullRequestUpdate) SetMergeCommitSha(s string) *PullRequestUpdate {
	pru.mutation.SetMergeCommitSha(s)
	return pru
}

// SetNillableMergeCommitSha sets the "merge_commit_sha" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableMergeCommitSha(s *string) *PullRequestUpdate {
	if s != nil {
		pru.SetMergeCommitSha(*s)
	}
	return pru
}

// ClearMergeCommitSha clears the value of the "merge_commit_sha" field.
func (pru *PullRequestUpdate) ClearMergeCommitSha() *PullRequestUpdate {
	pru.mutation.ClearMergeCommitSha()
	return pru
}

// SetHead sets the "head" field.
func (pru *PullRequestUpdate) SetHead(mb model.PRBranch) *PullRequestUpdate {
	pru.mutation.SetHead(mb)
	return pru
}

// SetNillableHead sets the "head" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableHead(mb *model.PRBranch) *PullRequestUpdate {
	if mb != nil {
		pru.SetHead(*mb)
	}
	return pru
}

// SetBase sets the "base" field.
func (pru *PullRequestUpdate) SetBase(mb model.PRBranch) *PullRequestUpdate {
	pru.mutation.SetBase(mb)
	return pru
}

// SetNillableBase sets the "base" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableBase(mb *model.PRBranch) *PullRequestUpdate {
	if mb != nil {
		pru.SetBase(*mb)
	}
	return pru
}

// SetDraft sets the "draft" field.
func (pru *PullRequestUpdate) SetDraft(b bool) *PullRequestUpdate {
	pru.mutation.SetDraft(b)
	return pru
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableDraft(b *bool) *PullRequestUpdate {
	if b != nil {
		pru.SetDraft(*b)
	}
	return pru
}

// ClearDraft clears the value of the "draft" field.
func (pru *PullRequestUpdate) ClearDraft() *PullRequestUpdate {
	pru.mutation.ClearDraft()
	return pru
}

// SetAuthorAssociation sets the "author_association" field.
func (pru *PullRequestUpdate) SetAuthorAssociation(ma model.AuthorAssociation) *PullRequestUpdate {
	pru.mutation.SetAuthorAssociation(ma)
	return pru
}

// SetNillableAuthorAssociation sets the "author_association" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableAuthorAssociation(ma *model.AuthorAssociation) *PullRequestUpdate {
	if ma != nil {
		pru.SetAuthorAssociation(*ma)
	}
	return pru
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pru *PullRequestUpdate) SetRepositoryID(id int64) *PullRequestUpdate {
	pru.mutation.SetRepositoryID(id)
	return pru
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pru *PullRequestUpdate) SetRepository(r *Repository) *PullRequestUpdate {
	return pru.SetRepositoryID(r.ID)
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (pru *PullRequestUpdate) SetIssueID(id int64) *PullRequestUpdate {
	pru.mutation.SetIssueID(id)
	return pru
}

// SetIssue sets the "issue" edge to the Issue entity.
func (pru *PullRequestUpdate) SetIssue(i *Issue) *PullRequestUpdate {
	return pru.SetIssueID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pru *PullRequestUpdate) SetUserID(id int64) *PullRequestUpdate {
	pru.mutation.SetUserID(id)
	return pru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableUserID(id *int64) *PullRequestUpdate {
	if id != nil {
		pru = pru.SetUserID(*id)
	}
	return pru
}

// SetUser sets the "user" edge to the User entity.
func (pru *PullRequestUpdate) SetUser(u *User) *PullRequestUpdate {
	return pru.SetUserID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (pru *PullRequestUpdate) AddAssigneeIDs(ids ...int64) *PullRequestUpdate {
	pru.mutation.AddAssigneeIDs(ids...)
	return pru
}

// AddAssignees adds the "assignees" edges to the User entity.
func (pru *PullRequestUpdate) AddAssignees(u ...*User) *PullRequestUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.AddAssigneeIDs(ids...)
}

// AddRequestedReviewerIDs adds the "requested_reviewers" edge to the User entity by IDs.
func (pru *PullRequestUpdate) AddRequestedReviewerIDs(ids ...int64) *PullRequestUpdate {
	pru.mutation.AddRequestedReviewerIDs(ids...)
	return pru
}

// AddRequestedReviewers adds the "requested_reviewers" edges to the User entity.
func (pru *PullRequestUpdate) AddRequestedReviewers(u ...*User) *PullRequestUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.AddRequestedReviewerIDs(ids...)
}

// Mutation returns the PullRequestMutation object of the builder.
func (pru *PullRequestUpdate) Mutation() *PullRequestMutation {
	return pru.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (pru *PullRequestUpdate) ClearRepository() *PullRequestUpdate {
	pru.mutation.ClearRepository()
	return pru
}

// ClearIssue clears the "issue" edge to the Issue entity.
func (pru *PullRequestUpdate) ClearIssue() *PullRequestUpdate {
	pru.mutation.ClearIssue()
	return pru
}

// ClearUser clears the "user" edge to the User entity.
func (pru *PullRequestUpdate) ClearUser() *PullRequestUpdate {
	pru.mutation.ClearUser()
	return pru
}

// ClearAssignees clears all "assignees" edges to the User entity.
func (pru *PullRequestUpdate) ClearAssignees() *PullRequestUpdate {
	pru.mutation.ClearAssignees()
	return pru
}

// RemoveAssigneeIDs removes the "assignees" edge to User entities by IDs.
func (pru *PullRequestUpdate) RemoveAssigneeIDs(ids ...int64) *PullRequestUpdate {
	pru.mutation.RemoveAssigneeIDs(ids...)
	return pru
}

// RemoveAssignees removes "assignees" edges to User entities.
func (pru *PullRequestUpdate) RemoveAssignees(u ...*User) *PullRequestUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.RemoveAssigneeIDs(ids...)
}

// ClearRequestedReviewers clears all "requested_reviewers" edges to the User entity.
func (pru *PullRequestUpdate) ClearRequestedReviewers() *PullRequestUpdate {
	pru.mutation.ClearRequestedReviewers()
	return pru
}

// RemoveRequestedReviewerIDs removes the "requested_reviewers" edge to User entities by IDs.
func (pru *PullRequestUpdate) RemoveRequestedReviewerIDs(ids ...int64) *PullRequestUpdate {
	pru.mutation.RemoveRequestedReviewerIDs(ids...)
	return pru
}

// RemoveRequestedReviewers removes "requested_reviewers" edges to User entities.
func (pru *PullRequestUpdate) RemoveRequestedReviewers(u ...*User) *PullRequestUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.RemoveRequestedReviewerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PullRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PullRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PullRequestUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PullRequestUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PullRequestUpdate) check() error {
	if v, ok := pru.mutation.State(); ok {
		if err := pullrequest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PullRequest.state": %w`, err)}
		}
	}
	if v, ok := pru.mutation.AuthorAssociation(); ok {
		if err := pullrequest.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "PullRequest.author_association": %w`, err)}
		}
	}
	if _, ok := pru.mutation.RepositoryID(); pru.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PullRequest.repository"`)
	}
	if _, ok := pru.mutation.IssueID(); pru.mutation.IssueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PullRequest.issue"`)
	}
	return nil
}

func (pru *PullRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pullrequest.Table, pullrequest.Columns, sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.URL(); ok {
		_spec.SetField(pullrequest.FieldURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.NodeID(); ok {
		_spec.SetField(pullrequest.FieldNodeID, field.TypeString, value)
	}
	if value, ok := pru.mutation.HTMLURL(); ok {
		_spec.SetField(pullrequest.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.DiffURL(); ok {
		_spec.SetField(pullrequest.FieldDiffURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.PatchURL(); ok {
		_spec.SetField(pullrequest.FieldPatchURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.IssueURL(); ok {
		_spec.SetField(pullrequest.FieldIssueURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.CommitsURL(); ok {
		_spec.SetField(pullrequest.FieldCommitsURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.ReviewCommentsURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentsURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.ReviewCommentURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.CommentsURL(); ok {
		_spec.SetField(pullrequest.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.StatusesURL(); ok {
		_spec.SetField(pullrequest.FieldStatusesURL, field.TypeString, value)
	}
	if value, ok := pru.mutation.Number(); ok {
		_spec.SetField(pullrequest.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := pru.mutation.AddedNumber(); ok {
		_spec.AddField(pullrequest.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := pru.mutation.State(); ok {
		_spec.SetField(pullrequest.FieldState, field.TypeEnum, value)
	}
	if value, ok := pru.mutation.Locked(); ok {
		_spec.SetField(pullrequest.FieldLocked, field.TypeBool, value)
	}
	if value, ok := pru.mutation.Title(); ok {
		_spec.SetField(pullrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := pru.mutation.Body(); ok {
		_spec.SetField(pullrequest.FieldBody, field.TypeString, value)
	}
	if pru.mutation.BodyCleared() {
		_spec.ClearField(pullrequest.FieldBody, field.TypeString)
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequest.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(pullrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequest.FieldClosedAt, field.TypeTime, value)
	}
	if pru.mutation.ClosedAtCleared() {
		_spec.ClearField(pullrequest.FieldClosedAt, field.TypeTime)
	}
	if value, ok := pru.mutation.MergedAt(); ok {
		_spec.SetField(pullrequest.FieldMergedAt, field.TypeTime, value)
	}
	if pru.mutation.MergedAtCleared() {
		_spec.ClearField(pullrequest.FieldMergedAt, field.TypeTime)
	}
	if value, ok := pru.mutation.MergeCommitSha(); ok {
		_spec.SetField(pullrequest.FieldMergeCommitSha, field.TypeString, value)
	}
	if pru.mutation.MergeCommitShaCleared() {
		_spec.ClearField(pullrequest.FieldMergeCommitSha, field.TypeString)
	}
	if value, ok := pru.mutation.Head(); ok {
		_spec.SetField(pullrequest.FieldHead, field.TypeJSON, value)
	}
	if value, ok := pru.mutation.Base(); ok {
		_spec.SetField(pullrequest.FieldBase, field.TypeJSON, value)
	}
	if value, ok := pru.mutation.Draft(); ok {
		_spec.SetField(pullrequest.FieldDraft, field.TypeBool, value)
	}
	if pru.mutation.DraftCleared() {
		_spec.ClearField(pullrequest.FieldDraft, field.TypeBool)
	}
	if value, ok := pru.mutation.AuthorAssociation(); ok {
		_spec.SetField(pullrequest.FieldAuthorAssociation, field.TypeEnum, value)
	}
	if pru.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.IssueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pullrequest.IssueTable,
			Columns: []string{pullrequest.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pullrequest.IssueTable,
			Columns: []string{pullrequest.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.UserTable,
			Columns: []string{pullrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.UserTable,
			Columns: []string{pullrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedAssigneesIDs(); len(nodes) > 0 && !pru.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.RequestedReviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedRequestedReviewersIDs(); len(nodes) > 0 && !pru.mutation.RequestedReviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RequestedReviewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PullRequestUpdateOne is the builder for updating a single PullRequest entity.
type PullRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PullRequestMutation
}

// SetURL sets the "url" field.
func (pruo *PullRequestUpdateOne) SetURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetURL(s)
	return pruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetURL(*s)
	}
	return pruo
}

// SetNodeID sets the "node_id" field.
func (pruo *PullRequestUpdateOne) SetNodeID(s string) *PullRequestUpdateOne {
	pruo.mutation.SetNodeID(s)
	return pruo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableNodeID(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetNodeID(*s)
	}
	return pruo
}

// SetHTMLURL sets the "html_url" field.
func (pruo *PullRequestUpdateOne) SetHTMLURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetHTMLURL(s)
	return pruo
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableHTMLURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetHTMLURL(*s)
	}
	return pruo
}

// SetDiffURL sets the "diff_url" field.
func (pruo *PullRequestUpdateOne) SetDiffURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetDiffURL(s)
	return pruo
}

// SetNillableDiffURL sets the "diff_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableDiffURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetDiffURL(*s)
	}
	return pruo
}

// SetPatchURL sets the "patch_url" field.
func (pruo *PullRequestUpdateOne) SetPatchURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetPatchURL(s)
	return pruo
}

// SetNillablePatchURL sets the "patch_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillablePatchURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetPatchURL(*s)
	}
	return pruo
}

// SetIssueURL sets the "issue_url" field.
func (pruo *PullRequestUpdateOne) SetIssueURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetIssueURL(s)
	return pruo
}

// SetNillableIssueURL sets the "issue_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableIssueURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetIssueURL(*s)
	}
	return pruo
}

// SetCommitsURL sets the "commits_url" field.
func (pruo *PullRequestUpdateOne) SetCommitsURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetCommitsURL(s)
	return pruo
}

// SetNillableCommitsURL sets the "commits_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableCommitsURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetCommitsURL(*s)
	}
	return pruo
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (pruo *PullRequestUpdateOne) SetReviewCommentsURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetReviewCommentsURL(s)
	return pruo
}

// SetNillableReviewCommentsURL sets the "review_comments_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableReviewCommentsURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetReviewCommentsURL(*s)
	}
	return pruo
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (pruo *PullRequestUpdateOne) SetReviewCommentURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetReviewCommentURL(s)
	return pruo
}

// SetNillableReviewCommentURL sets the "review_comment_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableReviewCommentURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetReviewCommentURL(*s)
	}
	return pruo
}

// SetCommentsURL sets the "comments_url" field.
func (pruo *PullRequestUpdateOne) SetCommentsURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetCommentsURL(s)
	return pruo
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableCommentsURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetCommentsURL(*s)
	}
	return pruo
}

// SetStatusesURL sets the "statuses_url" field.
func (pruo *PullRequestUpdateOne) SetStatusesURL(s string) *PullRequestUpdateOne {
	pruo.mutation.SetStatusesURL(s)
	return pruo
}

// SetNillableStatusesURL sets the "statuses_url" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableStatusesURL(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetStatusesURL(*s)
	}
	return pruo
}

// SetNumber sets the "number" field.
func (pruo *PullRequestUpdateOne) SetNumber(i int64) *PullRequestUpdateOne {
	pruo.mutation.ResetNumber()
	pruo.mutation.SetNumber(i)
	return pruo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableNumber(i *int64) *PullRequestUpdateOne {
	if i != nil {
		pruo.SetNumber(*i)
	}
	return pruo
}

// AddNumber adds i to the "number" field.
func (pruo *PullRequestUpdateOne) AddNumber(i int64) *PullRequestUpdateOne {
	pruo.mutation.AddNumber(i)
	return pruo
}

// SetState sets the "state" field.
func (pruo *PullRequestUpdateOne) SetState(pu pullrequest.State) *PullRequestUpdateOne {
	pruo.mutation.SetState(pu)
	return pruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableState(pu *pullrequest.State) *PullRequestUpdateOne {
	if pu != nil {
		pruo.SetState(*pu)
	}
	return pruo
}

// SetLocked sets the "locked" field.
func (pruo *PullRequestUpdateOne) SetLocked(b bool) *PullRequestUpdateOne {
	pruo.mutation.SetLocked(b)
	return pruo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableLocked(b *bool) *PullRequestUpdateOne {
	if b != nil {
		pruo.SetLocked(*b)
	}
	return pruo
}

// SetTitle sets the "title" field.
func (pruo *PullRequestUpdateOne) SetTitle(s string) *PullRequestUpdateOne {
	pruo.mutation.SetTitle(s)
	return pruo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableTitle(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetTitle(*s)
	}
	return pruo
}

// SetBody sets the "body" field.
func (pruo *PullRequestUpdateOne) SetBody(s string) *PullRequestUpdateOne {
	pruo.mutation.SetBody(s)
	return pruo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableBody(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetBody(*s)
	}
	return pruo
}

// ClearBody clears the value of the "body" field.
func (pruo *PullRequestUpdateOne) ClearBody() *PullRequestUpdateOne {
	pruo.mutation.ClearBody()
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PullRequestUpdateOne) SetCreatedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableCreatedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetCreatedAt(*t)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PullRequestUpdateOne) SetUpdatedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableUpdatedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetUpdatedAt(*t)
	}
	return pruo
}

// SetClosedAt sets the "closed_at" field.
func (pruo *PullRequestUpdateOne) SetClosedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetClosedAt(t)
	return pruo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableClosedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetClosedAt(*t)
	}
	return pruo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (pruo *PullRequestUpdateOne) ClearClosedAt() *PullRequestUpdateOne {
	pruo.mutation.ClearClosedAt()
	return pruo
}

// SetMergedAt sets the "merged_at" field.
func (pruo *PullRequestUpdateOne) SetMergedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetMergedAt(t)
	return pruo
}

// SetNillableMergedAt sets the "merged_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableMergedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetMergedAt(*t)
	}
	return pruo
}

// ClearMergedAt clears the value of the "merged_at" field.
func (pruo *PullRequestUpdateOne) ClearMergedAt() *PullRequestUpdateOne {
	pruo.mutation.ClearMergedAt()
	return pruo
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (pruo *PullRequestUpdateOne) SetMergeCommitSha(s string) *PullRequestUpdateOne {
	pruo.mutation.SetMergeCommitSha(s)
	return pruo
}

// SetNillableMergeCommitSha sets the "merge_commit_sha" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableMergeCommitSha(s *string) *PullRequestUpdateOne {
	if s != nil {
		pruo.SetMergeCommitSha(*s)
	}
	return pruo
}

// ClearMergeCommitSha clears the value of the "merge_commit_sha" field.
func (pruo *PullRequestUpdateOne) ClearMergeCommitSha() *PullRequestUpdateOne {
	pruo.mutation.ClearMergeCommitSha()
	return pruo
}

// SetHead sets the "head" field.
func (pruo *PullRequestUpdateOne) SetHead(mb model.PRBranch) *PullRequestUpdateOne {
	pruo.mutation.SetHead(mb)
	return pruo
}

// SetNillableHead sets the "head" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableHead(mb *model.PRBranch) *PullRequestUpdateOne {
	if mb != nil {
		pruo.SetHead(*mb)
	}
	return pruo
}

// SetBase sets the "base" field.
func (pruo *PullRequestUpdateOne) SetBase(mb model.PRBranch) *PullRequestUpdateOne {
	pruo.mutation.SetBase(mb)
	return pruo
}

// SetNillableBase sets the "base" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableBase(mb *model.PRBranch) *PullRequestUpdateOne {
	if mb != nil {
		pruo.SetBase(*mb)
	}
	return pruo
}

// SetDraft sets the "draft" field.
func (pruo *PullRequestUpdateOne) SetDraft(b bool) *PullRequestUpdateOne {
	pruo.mutation.SetDraft(b)
	return pruo
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableDraft(b *bool) *PullRequestUpdateOne {
	if b != nil {
		pruo.SetDraft(*b)
	}
	return pruo
}

// ClearDraft clears the value of the "draft" field.
func (pruo *PullRequestUpdateOne) ClearDraft() *PullRequestUpdateOne {
	pruo.mutation.ClearDraft()
	return pruo
}

// SetAuthorAssociation sets the "author_association" field.
func (pruo *PullRequestUpdateOne) SetAuthorAssociation(ma model.AuthorAssociation) *PullRequestUpdateOne {
	pruo.mutation.SetAuthorAssociation(ma)
	return pruo
}

// SetNillableAuthorAssociation sets the "author_association" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableAuthorAssociation(ma *model.AuthorAssociation) *PullRequestUpdateOne {
	if ma != nil {
		pruo.SetAuthorAssociation(*ma)
	}
	return pruo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pruo *PullRequestUpdateOne) SetRepositoryID(id int64) *PullRequestUpdateOne {
	pruo.mutation.SetRepositoryID(id)
	return pruo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pruo *PullRequestUpdateOne) SetRepository(r *Repository) *PullRequestUpdateOne {
	return pruo.SetRepositoryID(r.ID)
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (pruo *PullRequestUpdateOne) SetIssueID(id int64) *PullRequestUpdateOne {
	pruo.mutation.SetIssueID(id)
	return pruo
}

// SetIssue sets the "issue" edge to the Issue entity.
func (pruo *PullRequestUpdateOne) SetIssue(i *Issue) *PullRequestUpdateOne {
	return pruo.SetIssueID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pruo *PullRequestUpdateOne) SetUserID(id int64) *PullRequestUpdateOne {
	pruo.mutation.SetUserID(id)
	return pruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableUserID(id *int64) *PullRequestUpdateOne {
	if id != nil {
		pruo = pruo.SetUserID(*id)
	}
	return pruo
}

// SetUser sets the "user" edge to the User entity.
func (pruo *PullRequestUpdateOne) SetUser(u *User) *PullRequestUpdateOne {
	return pruo.SetUserID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (pruo *PullRequestUpdateOne) AddAssigneeIDs(ids ...int64) *PullRequestUpdateOne {
	pruo.mutation.AddAssigneeIDs(ids...)
	return pruo
}

// AddAssignees adds the "assignees" edges to the User entity.
func (pruo *PullRequestUpdateOne) AddAssignees(u ...*User) *PullRequestUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.AddAssigneeIDs(ids...)
}

// AddRequestedReviewerIDs adds the "requested_reviewers" edge to the User entity by IDs.
func (pruo *PullRequestUpdateOne) AddRequestedReviewerIDs(ids ...int64) *PullRequestUpdateOne {
	pruo.mutation.AddRequestedReviewerIDs(ids...)
	return pruo
}

// AddRequestedReviewers adds the "requested_reviewers" edges to the User entity.
func (pruo *PullRequestUpdateOne) AddRequestedReviewers(u ...*User) *PullRequestUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.AddRequestedReviewerIDs(ids...)
}

// Mutation returns the PullRequestMutation object of the builder.
func (pruo *PullRequestUpdateOne) Mutation() *PullRequestMutation {
	return pruo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (pruo *PullRequestUpdateOne) ClearRepository() *PullRequestUpdateOne {
	pruo.mutation.ClearRepository()
	return pruo
}

// ClearIssue clears the "issue" edge to the Issue entity.
func (pruo *PullRequestUpdateOne) ClearIssue() *PullRequestUpdateOne {
	pruo.mutation.ClearIssue()
	return pruo
}

// ClearUser clears the "user" edge to the User entity.
func (pruo *PullRequestUpdateOne) ClearUser() *PullRequestUpdateOne {
	pruo.mutation.ClearUser()
	return pruo
}

// ClearAssignees clears all "assignees" edges to the User entity.
func (pruo *PullRequestUpdateOne) ClearAssignees() *PullRequestUpdateOne {
	pruo.mutation.ClearAssignees()
	return pruo
}

// RemoveAssigneeIDs removes the "assignees" edge to User entities by IDs.
func (pruo *PullRequestUpdateOne) RemoveAssigneeIDs(ids ...int64) *PullRequestUpdateOne {
	pruo.mutation.RemoveAssigneeIDs(ids...)
	return pruo
}

// RemoveAssignees removes "assignees" edges to User entities.
func (pruo *PullRequestUpdateOne) RemoveAssignees(u ...*User) *PullRequestUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.RemoveAssigneeIDs(ids...)
}

// ClearRequestedReviewers clears all "requested_reviewers" edges to the User entity.
func (pruo *PullRequestUpdateOne) ClearRequestedReviewers() *PullRequestUpdateOne {
	pruo.mutation.ClearRequestedReviewers()
	return pruo
}

// RemoveRequestedReviewerIDs removes the "requested_reviewers" edge to User entities by IDs.
func (pruo *PullRequestUpdateOne) RemoveRequestedReviewerIDs(ids ...int64) *PullRequestUpdateOne {
	pruo.mutation.RemoveRequestedReviewerIDs(ids...)
	return pruo
}

// RemoveRequestedReviewers removes "requested_reviewers" edges to User entities.
func (pruo *PullRequestUpdateOne) RemoveRequestedReviewers(u ...*User) *PullRequestUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.RemoveRequestedReviewerIDs(ids...)
}

// Where appends a list predicates to the PullRequestUpdate builder.
func (pruo *PullRequestUpdateOne) Where(ps ...predicate.PullRequest) *PullRequestUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PullRequestUpdateOne) Select(field string, fields ...string) *PullRequestUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PullRequest entity.
func (pruo *PullRequestUpdateOne) Save(ctx context.Context) (*PullRequest, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PullRequestUpdateOne) SaveX(ctx context.Context) *PullRequest {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PullRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PullRequestUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PullRequestUpdateOne) check() error {
	if v, ok := pruo.mutation.State(); ok {
		if err := pullrequest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PullRequest.state": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.AuthorAssociation(); ok {
		if err := pullrequest.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "PullRequest.author_association": %w`, err)}
		}
	}
	if _, ok := pruo.mutation.RepositoryID(); pruo.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PullRequest.repository"`)
	}
	if _, ok := pruo.mutation.IssueID(); pruo.mutation.IssueCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PullRequest.issue"`)
	}
	return nil
}

func (pruo *PullRequestUpdateOne) sqlSave(ctx context.Context) (_node *PullRequest, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pullrequest.Table, pullrequest.Columns, sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PullRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pullrequest.FieldID)
		for _, f := range fields {
			if !pullrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pullrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.URL(); ok {
		_spec.SetField(pullrequest.FieldURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.NodeID(); ok {
		_spec.SetField(pullrequest.FieldNodeID, field.TypeString, value)
	}
	if value, ok := pruo.mutation.HTMLURL(); ok {
		_spec.SetField(pullrequest.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.DiffURL(); ok {
		_spec.SetField(pullrequest.FieldDiffURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.PatchURL(); ok {
		_spec.SetField(pullrequest.FieldPatchURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.IssueURL(); ok {
		_spec.SetField(pullrequest.FieldIssueURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.CommitsURL(); ok {
		_spec.SetField(pullrequest.FieldCommitsURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ReviewCommentsURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentsURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ReviewCommentURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.CommentsURL(); ok {
		_spec.SetField(pullrequest.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.StatusesURL(); ok {
		_spec.SetField(pullrequest.FieldStatusesURL, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Number(); ok {
		_spec.SetField(pullrequest.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := pruo.mutation.AddedNumber(); ok {
		_spec.AddField(pullrequest.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := pruo.mutation.State(); ok {
		_spec.SetField(pullrequest.FieldState, field.TypeEnum, value)
	}
	if value, ok := pruo.mutation.Locked(); ok {
		_spec.SetField(pullrequest.FieldLocked, field.TypeBool, value)
	}
	if value, ok := pruo.mutation.Title(); ok {
		_spec.SetField(pullrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Body(); ok {
		_spec.SetField(pullrequest.FieldBody, field.TypeString, value)
	}
	if pruo.mutation.BodyCleared() {
		_spec.ClearField(pullrequest.FieldBody, field.TypeString)
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequest.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(pullrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequest.FieldClosedAt, field.TypeTime, value)
	}
	if pruo.mutation.ClosedAtCleared() {
		_spec.ClearField(pullrequest.FieldClosedAt, field.TypeTime)
	}
	if value, ok := pruo.mutation.MergedAt(); ok {
		_spec.SetField(pullrequest.FieldMergedAt, field.TypeTime, value)
	}
	if pruo.mutation.MergedAtCleared() {
		_spec.ClearField(pullrequest.FieldMergedAt, field.TypeTime)
	}
	if value, ok := pruo.mutation.MergeCommitSha(); ok {
		_spec.SetField(pullrequest.FieldMergeCommitSha, field.TypeString, value)
	}
	if pruo.mutation.MergeCommitShaCleared() {
		_spec.ClearField(pullrequest.FieldMergeCommitSha, field.TypeString)
	}
	if value, ok := pruo.mutation.Head(); ok {
		_spec.SetField(pullrequest.FieldHead, field.TypeJSON, value)
	}
	if value, ok := pruo.mutation.Base(); ok {
		_spec.SetField(pullrequest.FieldBase, field.TypeJSON, value)
	}
	if value, ok := pruo.mutation.Draft(); ok {
		_spec.SetField(pullrequest.FieldDraft, field.TypeBool, value)
	}
	if pruo.mutation.DraftCleared() {
		_spec.ClearField(pullrequest.FieldDraft, field.TypeBool)
	}
	if value, ok := pruo.mutation.AuthorAssociation(); ok {
		_spec.SetField(pullrequest.FieldAuthorAssociation, field.TypeEnum, value)
	}
	if pruo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.IssueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pullrequest.IssueTable,
			Columns: []string{pullrequest.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pullrequest.IssueTable,
			Columns: []string{pullrequest.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.UserTable,
			Columns: []string{pullrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.UserTable,
			Columns: []string{pullrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedAssigneesIDs(); len(nodes) > 0 && !pruo.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.RequestedReviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedRequestedReviewersIDs(); len(nodes) > 0 && !pruo.mutation.RequestedReviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RequestedReviewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PullRequest{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
