// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/pullrequest"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
	"github.com/gnolang/gh-sql/pkg/model"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNodeID sets the "node_id" field.
func (rc *RepositoryCreate) SetNodeID(s string) *RepositoryCreate {
	rc.mutation.SetNodeID(s)
	return rc
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetFullName sets the "full_name" field.
func (rc *RepositoryCreate) SetFullName(s string) *RepositoryCreate {
	rc.mutation.SetFullName(s)
	return rc
}

// SetPrivate sets the "private" field.
func (rc *RepositoryCreate) SetPrivate(b bool) *RepositoryCreate {
	rc.mutation.SetPrivate(b)
	return rc
}

// SetHTMLURL sets the "html_url" field.
func (rc *RepositoryCreate) SetHTMLURL(s string) *RepositoryCreate {
	rc.mutation.SetHTMLURL(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RepositoryCreate) SetDescription(s string) *RepositoryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableDescription(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetFork sets the "fork" field.
func (rc *RepositoryCreate) SetFork(b bool) *RepositoryCreate {
	rc.mutation.SetFork(b)
	return rc
}

// SetURL sets the "url" field.
func (rc *RepositoryCreate) SetURL(s string) *RepositoryCreate {
	rc.mutation.SetURL(s)
	return rc
}

// SetArchiveURL sets the "archive_url" field.
func (rc *RepositoryCreate) SetArchiveURL(s string) *RepositoryCreate {
	rc.mutation.SetArchiveURL(s)
	return rc
}

// SetAssigneesURL sets the "assignees_url" field.
func (rc *RepositoryCreate) SetAssigneesURL(s string) *RepositoryCreate {
	rc.mutation.SetAssigneesURL(s)
	return rc
}

// SetBlobsURL sets the "blobs_url" field.
func (rc *RepositoryCreate) SetBlobsURL(s string) *RepositoryCreate {
	rc.mutation.SetBlobsURL(s)
	return rc
}

// SetBranchesURL sets the "branches_url" field.
func (rc *RepositoryCreate) SetBranchesURL(s string) *RepositoryCreate {
	rc.mutation.SetBranchesURL(s)
	return rc
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (rc *RepositoryCreate) SetCollaboratorsURL(s string) *RepositoryCreate {
	rc.mutation.SetCollaboratorsURL(s)
	return rc
}

// SetCommentsURL sets the "comments_url" field.
func (rc *RepositoryCreate) SetCommentsURL(s string) *RepositoryCreate {
	rc.mutation.SetCommentsURL(s)
	return rc
}

// SetCommitsURL sets the "commits_url" field.
func (rc *RepositoryCreate) SetCommitsURL(s string) *RepositoryCreate {
	rc.mutation.SetCommitsURL(s)
	return rc
}

// SetCompareURL sets the "compare_url" field.
func (rc *RepositoryCreate) SetCompareURL(s string) *RepositoryCreate {
	rc.mutation.SetCompareURL(s)
	return rc
}

// SetContentsURL sets the "contents_url" field.
func (rc *RepositoryCreate) SetContentsURL(s string) *RepositoryCreate {
	rc.mutation.SetContentsURL(s)
	return rc
}

// SetContributorsURL sets the "contributors_url" field.
func (rc *RepositoryCreate) SetContributorsURL(s string) *RepositoryCreate {
	rc.mutation.SetContributorsURL(s)
	return rc
}

// SetDeploymentsURL sets the "deployments_url" field.
func (rc *RepositoryCreate) SetDeploymentsURL(s string) *RepositoryCreate {
	rc.mutation.SetDeploymentsURL(s)
	return rc
}

// SetDownloadsURL sets the "downloads_url" field.
func (rc *RepositoryCreate) SetDownloadsURL(s string) *RepositoryCreate {
	rc.mutation.SetDownloadsURL(s)
	return rc
}

// SetEventsURL sets the "events_url" field.
func (rc *RepositoryCreate) SetEventsURL(s string) *RepositoryCreate {
	rc.mutation.SetEventsURL(s)
	return rc
}

// SetForksURL sets the "forks_url" field.
func (rc *RepositoryCreate) SetForksURL(s string) *RepositoryCreate {
	rc.mutation.SetForksURL(s)
	return rc
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (rc *RepositoryCreate) SetGitCommitsURL(s string) *RepositoryCreate {
	rc.mutation.SetGitCommitsURL(s)
	return rc
}

// SetGitRefsURL sets the "git_refs_url" field.
func (rc *RepositoryCreate) SetGitRefsURL(s string) *RepositoryCreate {
	rc.mutation.SetGitRefsURL(s)
	return rc
}

// SetGitTagsURL sets the "git_tags_url" field.
func (rc *RepositoryCreate) SetGitTagsURL(s string) *RepositoryCreate {
	rc.mutation.SetGitTagsURL(s)
	return rc
}

// SetGitURL sets the "git_url" field.
func (rc *RepositoryCreate) SetGitURL(s string) *RepositoryCreate {
	rc.mutation.SetGitURL(s)
	return rc
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (rc *RepositoryCreate) SetIssueCommentURL(s string) *RepositoryCreate {
	rc.mutation.SetIssueCommentURL(s)
	return rc
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (rc *RepositoryCreate) SetIssueEventsURL(s string) *RepositoryCreate {
	rc.mutation.SetIssueEventsURL(s)
	return rc
}

// SetIssuesURL sets the "issues_url" field.
func (rc *RepositoryCreate) SetIssuesURL(s string) *RepositoryCreate {
	rc.mutation.SetIssuesURL(s)
	return rc
}

// SetKeysURL sets the "keys_url" field.
func (rc *RepositoryCreate) SetKeysURL(s string) *RepositoryCreate {
	rc.mutation.SetKeysURL(s)
	return rc
}

// SetLabelsURL sets the "labels_url" field.
func (rc *RepositoryCreate) SetLabelsURL(s string) *RepositoryCreate {
	rc.mutation.SetLabelsURL(s)
	return rc
}

// SetLanguagesURL sets the "languages_url" field.
func (rc *RepositoryCreate) SetLanguagesURL(s string) *RepositoryCreate {
	rc.mutation.SetLanguagesURL(s)
	return rc
}

// SetMergesURL sets the "merges_url" field.
func (rc *RepositoryCreate) SetMergesURL(s string) *RepositoryCreate {
	rc.mutation.SetMergesURL(s)
	return rc
}

// SetMilestonesURL sets the "milestones_url" field.
func (rc *RepositoryCreate) SetMilestonesURL(s string) *RepositoryCreate {
	rc.mutation.SetMilestonesURL(s)
	return rc
}

// SetNotificationsURL sets the "notifications_url" field.
func (rc *RepositoryCreate) SetNotificationsURL(s string) *RepositoryCreate {
	rc.mutation.SetNotificationsURL(s)
	return rc
}

// SetPullsURL sets the "pulls_url" field.
func (rc *RepositoryCreate) SetPullsURL(s string) *RepositoryCreate {
	rc.mutation.SetPullsURL(s)
	return rc
}

// SetReleasesURL sets the "releases_url" field.
func (rc *RepositoryCreate) SetReleasesURL(s string) *RepositoryCreate {
	rc.mutation.SetReleasesURL(s)
	return rc
}

// SetSSHURL sets the "ssh_url" field.
func (rc *RepositoryCreate) SetSSHURL(s string) *RepositoryCreate {
	rc.mutation.SetSSHURL(s)
	return rc
}

// SetStargazersURL sets the "stargazers_url" field.
func (rc *RepositoryCreate) SetStargazersURL(s string) *RepositoryCreate {
	rc.mutation.SetStargazersURL(s)
	return rc
}

// SetStatusesURL sets the "statuses_url" field.
func (rc *RepositoryCreate) SetStatusesURL(s string) *RepositoryCreate {
	rc.mutation.SetStatusesURL(s)
	return rc
}

// SetSubscribersURL sets the "subscribers_url" field.
func (rc *RepositoryCreate) SetSubscribersURL(s string) *RepositoryCreate {
	rc.mutation.SetSubscribersURL(s)
	return rc
}

// SetSubscriptionURL sets the "subscription_url" field.
func (rc *RepositoryCreate) SetSubscriptionURL(s string) *RepositoryCreate {
	rc.mutation.SetSubscriptionURL(s)
	return rc
}

// SetTagsURL sets the "tags_url" field.
func (rc *RepositoryCreate) SetTagsURL(s string) *RepositoryCreate {
	rc.mutation.SetTagsURL(s)
	return rc
}

// SetTeamsURL sets the "teams_url" field.
func (rc *RepositoryCreate) SetTeamsURL(s string) *RepositoryCreate {
	rc.mutation.SetTeamsURL(s)
	return rc
}

// SetTreesURL sets the "trees_url" field.
func (rc *RepositoryCreate) SetTreesURL(s string) *RepositoryCreate {
	rc.mutation.SetTreesURL(s)
	return rc
}

// SetCloneURL sets the "clone_url" field.
func (rc *RepositoryCreate) SetCloneURL(s string) *RepositoryCreate {
	rc.mutation.SetCloneURL(s)
	return rc
}

// SetMirrorURL sets the "mirror_url" field.
func (rc *RepositoryCreate) SetMirrorURL(s string) *RepositoryCreate {
	rc.mutation.SetMirrorURL(s)
	return rc
}

// SetNillableMirrorURL sets the "mirror_url" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableMirrorURL(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetMirrorURL(*s)
	}
	return rc
}

// SetHooksURL sets the "hooks_url" field.
func (rc *RepositoryCreate) SetHooksURL(s string) *RepositoryCreate {
	rc.mutation.SetHooksURL(s)
	return rc
}

// SetSvnURL sets the "svn_url" field.
func (rc *RepositoryCreate) SetSvnURL(s string) *RepositoryCreate {
	rc.mutation.SetSvnURL(s)
	return rc
}

// SetHomepage sets the "homepage" field.
func (rc *RepositoryCreate) SetHomepage(s string) *RepositoryCreate {
	rc.mutation.SetHomepage(s)
	return rc
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableHomepage(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetHomepage(*s)
	}
	return rc
}

// SetLanguage sets the "language" field.
func (rc *RepositoryCreate) SetLanguage(s string) *RepositoryCreate {
	rc.mutation.SetLanguage(s)
	return rc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableLanguage(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetLanguage(*s)
	}
	return rc
}

// SetForksCount sets the "forks_count" field.
func (rc *RepositoryCreate) SetForksCount(i int64) *RepositoryCreate {
	rc.mutation.SetForksCount(i)
	return rc
}

// SetStargazersCount sets the "stargazers_count" field.
func (rc *RepositoryCreate) SetStargazersCount(i int64) *RepositoryCreate {
	rc.mutation.SetStargazersCount(i)
	return rc
}

// SetWatchersCount sets the "watchers_count" field.
func (rc *RepositoryCreate) SetWatchersCount(i int64) *RepositoryCreate {
	rc.mutation.SetWatchersCount(i)
	return rc
}

// SetSize sets the "size" field.
func (rc *RepositoryCreate) SetSize(i int64) *RepositoryCreate {
	rc.mutation.SetSize(i)
	return rc
}

// SetDefaultBranch sets the "default_branch" field.
func (rc *RepositoryCreate) SetDefaultBranch(s string) *RepositoryCreate {
	rc.mutation.SetDefaultBranch(s)
	return rc
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (rc *RepositoryCreate) SetOpenIssuesCount(i int64) *RepositoryCreate {
	rc.mutation.SetOpenIssuesCount(i)
	return rc
}

// SetIsTemplate sets the "is_template" field.
func (rc *RepositoryCreate) SetIsTemplate(b bool) *RepositoryCreate {
	rc.mutation.SetIsTemplate(b)
	return rc
}

// SetTopics sets the "topics" field.
func (rc *RepositoryCreate) SetTopics(s []string) *RepositoryCreate {
	rc.mutation.SetTopics(s)
	return rc
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (rc *RepositoryCreate) SetHasIssuesEnabled(b bool) *RepositoryCreate {
	rc.mutation.SetHasIssuesEnabled(b)
	return rc
}

// SetHasProjects sets the "has_projects" field.
func (rc *RepositoryCreate) SetHasProjects(b bool) *RepositoryCreate {
	rc.mutation.SetHasProjects(b)
	return rc
}

// SetHasWiki sets the "has_wiki" field.
func (rc *RepositoryCreate) SetHasWiki(b bool) *RepositoryCreate {
	rc.mutation.SetHasWiki(b)
	return rc
}

// SetHasPages sets the "has_pages" field.
func (rc *RepositoryCreate) SetHasPages(b bool) *RepositoryCreate {
	rc.mutation.SetHasPages(b)
	return rc
}

// SetHasDownloads sets the "has_downloads" field.
func (rc *RepositoryCreate) SetHasDownloads(b bool) *RepositoryCreate {
	rc.mutation.SetHasDownloads(b)
	return rc
}

// SetHasDiscussions sets the "has_discussions" field.
func (rc *RepositoryCreate) SetHasDiscussions(b bool) *RepositoryCreate {
	rc.mutation.SetHasDiscussions(b)
	return rc
}

// SetArchived sets the "archived" field.
func (rc *RepositoryCreate) SetArchived(b bool) *RepositoryCreate {
	rc.mutation.SetArchived(b)
	return rc
}

// SetDisabled sets the "disabled" field.
func (rc *RepositoryCreate) SetDisabled(b bool) *RepositoryCreate {
	rc.mutation.SetDisabled(b)
	return rc
}

// SetVisibility sets the "visibility" field.
func (rc *RepositoryCreate) SetVisibility(r repository.Visibility) *RepositoryCreate {
	rc.mutation.SetVisibility(r)
	return rc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableVisibility(r *repository.Visibility) *RepositoryCreate {
	if r != nil {
		rc.SetVisibility(*r)
	}
	return rc
}

// SetPushedAt sets the "pushed_at" field.
func (rc *RepositoryCreate) SetPushedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetPushedAt(t)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RepositoryCreate) SetCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RepositoryCreate) SetUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetSubscribersCount sets the "subscribers_count" field.
func (rc *RepositoryCreate) SetSubscribersCount(i int64) *RepositoryCreate {
	rc.mutation.SetSubscribersCount(i)
	return rc
}

// SetNetworkCount sets the "network_count" field.
func (rc *RepositoryCreate) SetNetworkCount(i int64) *RepositoryCreate {
	rc.mutation.SetNetworkCount(i)
	return rc
}

// SetForks sets the "forks" field.
func (rc *RepositoryCreate) SetForks(i int64) *RepositoryCreate {
	rc.mutation.SetForks(i)
	return rc
}

// SetOpenIssues sets the "open_issues" field.
func (rc *RepositoryCreate) SetOpenIssues(i int64) *RepositoryCreate {
	rc.mutation.SetOpenIssues(i)
	return rc
}

// SetWatchers sets the "watchers" field.
func (rc *RepositoryCreate) SetWatchers(i int64) *RepositoryCreate {
	rc.mutation.SetWatchers(i)
	return rc
}

// SetLicense sets the "license" field.
func (rc *RepositoryCreate) SetLicense(m *model.License) *RepositoryCreate {
	rc.mutation.SetLicense(m)
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(i int64) *RepositoryCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rc *RepositoryCreate) SetOwnerID(id int64) *RepositoryCreate {
	rc.mutation.SetOwnerID(id)
	return rc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (rc *RepositoryCreate) SetNillableOwnerID(id *int64) *RepositoryCreate {
	if id != nil {
		rc = rc.SetOwnerID(*id)
	}
	return rc
}

// SetOwner sets the "owner" edge to the User entity.
func (rc *RepositoryCreate) SetOwner(u *User) *RepositoryCreate {
	return rc.SetOwnerID(u.ID)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (rc *RepositoryCreate) AddIssueIDs(ids ...int64) *RepositoryCreate {
	rc.mutation.AddIssueIDs(ids...)
	return rc
}

// AddIssues adds the "issues" edges to the Issue entity.
func (rc *RepositoryCreate) AddIssues(i ...*Issue) *RepositoryCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIssueIDs(ids...)
}

// AddPullRequestIDs adds the "pull_requests" edge to the PullRequest entity by IDs.
func (rc *RepositoryCreate) AddPullRequestIDs(ids ...int64) *RepositoryCreate {
	rc.mutation.AddPullRequestIDs(ids...)
	return rc
}

// AddPullRequests adds the "pull_requests" edges to the PullRequest entity.
func (rc *RepositoryCreate) AddPullRequests(p ...*PullRequest) *RepositoryCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPullRequestIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "Repository.node_id"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if _, ok := rc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Repository.full_name"`)}
	}
	if _, ok := rc.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "Repository.private"`)}
	}
	if _, ok := rc.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "Repository.html_url"`)}
	}
	if _, ok := rc.mutation.Fork(); !ok {
		return &ValidationError{Name: "fork", err: errors.New(`ent: missing required field "Repository.fork"`)}
	}
	if _, ok := rc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Repository.url"`)}
	}
	if _, ok := rc.mutation.ArchiveURL(); !ok {
		return &ValidationError{Name: "archive_url", err: errors.New(`ent: missing required field "Repository.archive_url"`)}
	}
	if _, ok := rc.mutation.AssigneesURL(); !ok {
		return &ValidationError{Name: "assignees_url", err: errors.New(`ent: missing required field "Repository.assignees_url"`)}
	}
	if _, ok := rc.mutation.BlobsURL(); !ok {
		return &ValidationError{Name: "blobs_url", err: errors.New(`ent: missing required field "Repository.blobs_url"`)}
	}
	if _, ok := rc.mutation.BranchesURL(); !ok {
		return &ValidationError{Name: "branches_url", err: errors.New(`ent: missing required field "Repository.branches_url"`)}
	}
	if _, ok := rc.mutation.CollaboratorsURL(); !ok {
		return &ValidationError{Name: "collaborators_url", err: errors.New(`ent: missing required field "Repository.collaborators_url"`)}
	}
	if _, ok := rc.mutation.CommentsURL(); !ok {
		return &ValidationError{Name: "comments_url", err: errors.New(`ent: missing required field "Repository.comments_url"`)}
	}
	if _, ok := rc.mutation.CommitsURL(); !ok {
		return &ValidationError{Name: "commits_url", err: errors.New(`ent: missing required field "Repository.commits_url"`)}
	}
	if _, ok := rc.mutation.CompareURL(); !ok {
		return &ValidationError{Name: "compare_url", err: errors.New(`ent: missing required field "Repository.compare_url"`)}
	}
	if _, ok := rc.mutation.ContentsURL(); !ok {
		return &ValidationError{Name: "contents_url", err: errors.New(`ent: missing required field "Repository.contents_url"`)}
	}
	if _, ok := rc.mutation.ContributorsURL(); !ok {
		return &ValidationError{Name: "contributors_url", err: errors.New(`ent: missing required field "Repository.contributors_url"`)}
	}
	if _, ok := rc.mutation.DeploymentsURL(); !ok {
		return &ValidationError{Name: "deployments_url", err: errors.New(`ent: missing required field "Repository.deployments_url"`)}
	}
	if _, ok := rc.mutation.DownloadsURL(); !ok {
		return &ValidationError{Name: "downloads_url", err: errors.New(`ent: missing required field "Repository.downloads_url"`)}
	}
	if _, ok := rc.mutation.EventsURL(); !ok {
		return &ValidationError{Name: "events_url", err: errors.New(`ent: missing required field "Repository.events_url"`)}
	}
	if _, ok := rc.mutation.ForksURL(); !ok {
		return &ValidationError{Name: "forks_url", err: errors.New(`ent: missing required field "Repository.forks_url"`)}
	}
	if _, ok := rc.mutation.GitCommitsURL(); !ok {
		return &ValidationError{Name: "git_commits_url", err: errors.New(`ent: missing required field "Repository.git_commits_url"`)}
	}
	if _, ok := rc.mutation.GitRefsURL(); !ok {
		return &ValidationError{Name: "git_refs_url", err: errors.New(`ent: missing required field "Repository.git_refs_url"`)}
	}
	if _, ok := rc.mutation.GitTagsURL(); !ok {
		return &ValidationError{Name: "git_tags_url", err: errors.New(`ent: missing required field "Repository.git_tags_url"`)}
	}
	if _, ok := rc.mutation.GitURL(); !ok {
		return &ValidationError{Name: "git_url", err: errors.New(`ent: missing required field "Repository.git_url"`)}
	}
	if _, ok := rc.mutation.IssueCommentURL(); !ok {
		return &ValidationError{Name: "issue_comment_url", err: errors.New(`ent: missing required field "Repository.issue_comment_url"`)}
	}
	if _, ok := rc.mutation.IssueEventsURL(); !ok {
		return &ValidationError{Name: "issue_events_url", err: errors.New(`ent: missing required field "Repository.issue_events_url"`)}
	}
	if _, ok := rc.mutation.IssuesURL(); !ok {
		return &ValidationError{Name: "issues_url", err: errors.New(`ent: missing required field "Repository.issues_url"`)}
	}
	if _, ok := rc.mutation.KeysURL(); !ok {
		return &ValidationError{Name: "keys_url", err: errors.New(`ent: missing required field "Repository.keys_url"`)}
	}
	if _, ok := rc.mutation.LabelsURL(); !ok {
		return &ValidationError{Name: "labels_url", err: errors.New(`ent: missing required field "Repository.labels_url"`)}
	}
	if _, ok := rc.mutation.LanguagesURL(); !ok {
		return &ValidationError{Name: "languages_url", err: errors.New(`ent: missing required field "Repository.languages_url"`)}
	}
	if _, ok := rc.mutation.MergesURL(); !ok {
		return &ValidationError{Name: "merges_url", err: errors.New(`ent: missing required field "Repository.merges_url"`)}
	}
	if _, ok := rc.mutation.MilestonesURL(); !ok {
		return &ValidationError{Name: "milestones_url", err: errors.New(`ent: missing required field "Repository.milestones_url"`)}
	}
	if _, ok := rc.mutation.NotificationsURL(); !ok {
		return &ValidationError{Name: "notifications_url", err: errors.New(`ent: missing required field "Repository.notifications_url"`)}
	}
	if _, ok := rc.mutation.PullsURL(); !ok {
		return &ValidationError{Name: "pulls_url", err: errors.New(`ent: missing required field "Repository.pulls_url"`)}
	}
	if _, ok := rc.mutation.ReleasesURL(); !ok {
		return &ValidationError{Name: "releases_url", err: errors.New(`ent: missing required field "Repository.releases_url"`)}
	}
	if _, ok := rc.mutation.SSHURL(); !ok {
		return &ValidationError{Name: "ssh_url", err: errors.New(`ent: missing required field "Repository.ssh_url"`)}
	}
	if _, ok := rc.mutation.StargazersURL(); !ok {
		return &ValidationError{Name: "stargazers_url", err: errors.New(`ent: missing required field "Repository.stargazers_url"`)}
	}
	if _, ok := rc.mutation.StatusesURL(); !ok {
		return &ValidationError{Name: "statuses_url", err: errors.New(`ent: missing required field "Repository.statuses_url"`)}
	}
	if _, ok := rc.mutation.SubscribersURL(); !ok {
		return &ValidationError{Name: "subscribers_url", err: errors.New(`ent: missing required field "Repository.subscribers_url"`)}
	}
	if _, ok := rc.mutation.SubscriptionURL(); !ok {
		return &ValidationError{Name: "subscription_url", err: errors.New(`ent: missing required field "Repository.subscription_url"`)}
	}
	if _, ok := rc.mutation.TagsURL(); !ok {
		return &ValidationError{Name: "tags_url", err: errors.New(`ent: missing required field "Repository.tags_url"`)}
	}
	if _, ok := rc.mutation.TeamsURL(); !ok {
		return &ValidationError{Name: "teams_url", err: errors.New(`ent: missing required field "Repository.teams_url"`)}
	}
	if _, ok := rc.mutation.TreesURL(); !ok {
		return &ValidationError{Name: "trees_url", err: errors.New(`ent: missing required field "Repository.trees_url"`)}
	}
	if _, ok := rc.mutation.CloneURL(); !ok {
		return &ValidationError{Name: "clone_url", err: errors.New(`ent: missing required field "Repository.clone_url"`)}
	}
	if _, ok := rc.mutation.HooksURL(); !ok {
		return &ValidationError{Name: "hooks_url", err: errors.New(`ent: missing required field "Repository.hooks_url"`)}
	}
	if _, ok := rc.mutation.SvnURL(); !ok {
		return &ValidationError{Name: "svn_url", err: errors.New(`ent: missing required field "Repository.svn_url"`)}
	}
	if _, ok := rc.mutation.ForksCount(); !ok {
		return &ValidationError{Name: "forks_count", err: errors.New(`ent: missing required field "Repository.forks_count"`)}
	}
	if _, ok := rc.mutation.StargazersCount(); !ok {
		return &ValidationError{Name: "stargazers_count", err: errors.New(`ent: missing required field "Repository.stargazers_count"`)}
	}
	if _, ok := rc.mutation.WatchersCount(); !ok {
		return &ValidationError{Name: "watchers_count", err: errors.New(`ent: missing required field "Repository.watchers_count"`)}
	}
	if _, ok := rc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Repository.size"`)}
	}
	if _, ok := rc.mutation.DefaultBranch(); !ok {
		return &ValidationError{Name: "default_branch", err: errors.New(`ent: missing required field "Repository.default_branch"`)}
	}
	if _, ok := rc.mutation.OpenIssuesCount(); !ok {
		return &ValidationError{Name: "open_issues_count", err: errors.New(`ent: missing required field "Repository.open_issues_count"`)}
	}
	if _, ok := rc.mutation.IsTemplate(); !ok {
		return &ValidationError{Name: "is_template", err: errors.New(`ent: missing required field "Repository.is_template"`)}
	}
	if _, ok := rc.mutation.Topics(); !ok {
		return &ValidationError{Name: "topics", err: errors.New(`ent: missing required field "Repository.topics"`)}
	}
	if _, ok := rc.mutation.HasIssuesEnabled(); !ok {
		return &ValidationError{Name: "has_issues_enabled", err: errors.New(`ent: missing required field "Repository.has_issues_enabled"`)}
	}
	if _, ok := rc.mutation.HasProjects(); !ok {
		return &ValidationError{Name: "has_projects", err: errors.New(`ent: missing required field "Repository.has_projects"`)}
	}
	if _, ok := rc.mutation.HasWiki(); !ok {
		return &ValidationError{Name: "has_wiki", err: errors.New(`ent: missing required field "Repository.has_wiki"`)}
	}
	if _, ok := rc.mutation.HasPages(); !ok {
		return &ValidationError{Name: "has_pages", err: errors.New(`ent: missing required field "Repository.has_pages"`)}
	}
	if _, ok := rc.mutation.HasDownloads(); !ok {
		return &ValidationError{Name: "has_downloads", err: errors.New(`ent: missing required field "Repository.has_downloads"`)}
	}
	if _, ok := rc.mutation.HasDiscussions(); !ok {
		return &ValidationError{Name: "has_discussions", err: errors.New(`ent: missing required field "Repository.has_discussions"`)}
	}
	if _, ok := rc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "Repository.archived"`)}
	}
	if _, ok := rc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Repository.disabled"`)}
	}
	if v, ok := rc.mutation.Visibility(); ok {
		if err := repository.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Repository.visibility": %w`, err)}
		}
	}
	if _, ok := rc.mutation.PushedAt(); !ok {
		return &ValidationError{Name: "pushed_at", err: errors.New(`ent: missing required field "Repository.pushed_at"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Repository.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Repository.updated_at"`)}
	}
	if _, ok := rc.mutation.SubscribersCount(); !ok {
		return &ValidationError{Name: "subscribers_count", err: errors.New(`ent: missing required field "Repository.subscribers_count"`)}
	}
	if _, ok := rc.mutation.NetworkCount(); !ok {
		return &ValidationError{Name: "network_count", err: errors.New(`ent: missing required field "Repository.network_count"`)}
	}
	if _, ok := rc.mutation.Forks(); !ok {
		return &ValidationError{Name: "forks", err: errors.New(`ent: missing required field "Repository.forks"`)}
	}
	if _, ok := rc.mutation.OpenIssues(); !ok {
		return &ValidationError{Name: "open_issues", err: errors.New(`ent: missing required field "Repository.open_issues"`)}
	}
	if _, ok := rc.mutation.Watchers(); !ok {
		return &ValidationError{Name: "watchers", err: errors.New(`ent: missing required field "Repository.watchers"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.NodeID(); ok {
		_spec.SetField(repository.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := rc.mutation.Private(); ok {
		_spec.SetField(repository.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := rc.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Fork(); ok {
		_spec.SetField(repository.FieldFork, field.TypeBool, value)
		_node.Fork = value
	}
	if value, ok := rc.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := rc.mutation.ArchiveURL(); ok {
		_spec.SetField(repository.FieldArchiveURL, field.TypeString, value)
		_node.ArchiveURL = value
	}
	if value, ok := rc.mutation.AssigneesURL(); ok {
		_spec.SetField(repository.FieldAssigneesURL, field.TypeString, value)
		_node.AssigneesURL = value
	}
	if value, ok := rc.mutation.BlobsURL(); ok {
		_spec.SetField(repository.FieldBlobsURL, field.TypeString, value)
		_node.BlobsURL = value
	}
	if value, ok := rc.mutation.BranchesURL(); ok {
		_spec.SetField(repository.FieldBranchesURL, field.TypeString, value)
		_node.BranchesURL = value
	}
	if value, ok := rc.mutation.CollaboratorsURL(); ok {
		_spec.SetField(repository.FieldCollaboratorsURL, field.TypeString, value)
		_node.CollaboratorsURL = value
	}
	if value, ok := rc.mutation.CommentsURL(); ok {
		_spec.SetField(repository.FieldCommentsURL, field.TypeString, value)
		_node.CommentsURL = value
	}
	if value, ok := rc.mutation.CommitsURL(); ok {
		_spec.SetField(repository.FieldCommitsURL, field.TypeString, value)
		_node.CommitsURL = value
	}
	if value, ok := rc.mutation.CompareURL(); ok {
		_spec.SetField(repository.FieldCompareURL, field.TypeString, value)
		_node.CompareURL = value
	}
	if value, ok := rc.mutation.ContentsURL(); ok {
		_spec.SetField(repository.FieldContentsURL, field.TypeString, value)
		_node.ContentsURL = value
	}
	if value, ok := rc.mutation.ContributorsURL(); ok {
		_spec.SetField(repository.FieldContributorsURL, field.TypeString, value)
		_node.ContributorsURL = value
	}
	if value, ok := rc.mutation.DeploymentsURL(); ok {
		_spec.SetField(repository.FieldDeploymentsURL, field.TypeString, value)
		_node.DeploymentsURL = value
	}
	if value, ok := rc.mutation.DownloadsURL(); ok {
		_spec.SetField(repository.FieldDownloadsURL, field.TypeString, value)
		_node.DownloadsURL = value
	}
	if value, ok := rc.mutation.EventsURL(); ok {
		_spec.SetField(repository.FieldEventsURL, field.TypeString, value)
		_node.EventsURL = value
	}
	if value, ok := rc.mutation.ForksURL(); ok {
		_spec.SetField(repository.FieldForksURL, field.TypeString, value)
		_node.ForksURL = value
	}
	if value, ok := rc.mutation.GitCommitsURL(); ok {
		_spec.SetField(repository.FieldGitCommitsURL, field.TypeString, value)
		_node.GitCommitsURL = value
	}
	if value, ok := rc.mutation.GitRefsURL(); ok {
		_spec.SetField(repository.FieldGitRefsURL, field.TypeString, value)
		_node.GitRefsURL = value
	}
	if value, ok := rc.mutation.GitTagsURL(); ok {
		_spec.SetField(repository.FieldGitTagsURL, field.TypeString, value)
		_node.GitTagsURL = value
	}
	if value, ok := rc.mutation.GitURL(); ok {
		_spec.SetField(repository.FieldGitURL, field.TypeString, value)
		_node.GitURL = value
	}
	if value, ok := rc.mutation.IssueCommentURL(); ok {
		_spec.SetField(repository.FieldIssueCommentURL, field.TypeString, value)
		_node.IssueCommentURL = value
	}
	if value, ok := rc.mutation.IssueEventsURL(); ok {
		_spec.SetField(repository.FieldIssueEventsURL, field.TypeString, value)
		_node.IssueEventsURL = value
	}
	if value, ok := rc.mutation.IssuesURL(); ok {
		_spec.SetField(repository.FieldIssuesURL, field.TypeString, value)
		_node.IssuesURL = value
	}
	if value, ok := rc.mutation.KeysURL(); ok {
		_spec.SetField(repository.FieldKeysURL, field.TypeString, value)
		_node.KeysURL = value
	}
	if value, ok := rc.mutation.LabelsURL(); ok {
		_spec.SetField(repository.FieldLabelsURL, field.TypeString, value)
		_node.LabelsURL = value
	}
	if value, ok := rc.mutation.LanguagesURL(); ok {
		_spec.SetField(repository.FieldLanguagesURL, field.TypeString, value)
		_node.LanguagesURL = value
	}
	if value, ok := rc.mutation.MergesURL(); ok {
		_spec.SetField(repository.FieldMergesURL, field.TypeString, value)
		_node.MergesURL = value
	}
	if value, ok := rc.mutation.MilestonesURL(); ok {
		_spec.SetField(repository.FieldMilestonesURL, field.TypeString, value)
		_node.MilestonesURL = value
	}
	if value, ok := rc.mutation.NotificationsURL(); ok {
		_spec.SetField(repository.FieldNotificationsURL, field.TypeString, value)
		_node.NotificationsURL = value
	}
	if value, ok := rc.mutation.PullsURL(); ok {
		_spec.SetField(repository.FieldPullsURL, field.TypeString, value)
		_node.PullsURL = value
	}
	if value, ok := rc.mutation.ReleasesURL(); ok {
		_spec.SetField(repository.FieldReleasesURL, field.TypeString, value)
		_node.ReleasesURL = value
	}
	if value, ok := rc.mutation.SSHURL(); ok {
		_spec.SetField(repository.FieldSSHURL, field.TypeString, value)
		_node.SSHURL = value
	}
	if value, ok := rc.mutation.StargazersURL(); ok {
		_spec.SetField(repository.FieldStargazersURL, field.TypeString, value)
		_node.StargazersURL = value
	}
	if value, ok := rc.mutation.StatusesURL(); ok {
		_spec.SetField(repository.FieldStatusesURL, field.TypeString, value)
		_node.StatusesURL = value
	}
	if value, ok := rc.mutation.SubscribersURL(); ok {
		_spec.SetField(repository.FieldSubscribersURL, field.TypeString, value)
		_node.SubscribersURL = value
	}
	if value, ok := rc.mutation.SubscriptionURL(); ok {
		_spec.SetField(repository.FieldSubscriptionURL, field.TypeString, value)
		_node.SubscriptionURL = value
	}
	if value, ok := rc.mutation.TagsURL(); ok {
		_spec.SetField(repository.FieldTagsURL, field.TypeString, value)
		_node.TagsURL = value
	}
	if value, ok := rc.mutation.TeamsURL(); ok {
		_spec.SetField(repository.FieldTeamsURL, field.TypeString, value)
		_node.TeamsURL = value
	}
	if value, ok := rc.mutation.TreesURL(); ok {
		_spec.SetField(repository.FieldTreesURL, field.TypeString, value)
		_node.TreesURL = value
	}
	if value, ok := rc.mutation.CloneURL(); ok {
		_spec.SetField(repository.FieldCloneURL, field.TypeString, value)
		_node.CloneURL = value
	}
	if value, ok := rc.mutation.MirrorURL(); ok {
		_spec.SetField(repository.FieldMirrorURL, field.TypeString, value)
		_node.MirrorURL = &value
	}
	if value, ok := rc.mutation.HooksURL(); ok {
		_spec.SetField(repository.FieldHooksURL, field.TypeString, value)
		_node.HooksURL = value
	}
	if value, ok := rc.mutation.SvnURL(); ok {
		_spec.SetField(repository.FieldSvnURL, field.TypeString, value)
		_node.SvnURL = value
	}
	if value, ok := rc.mutation.Homepage(); ok {
		_spec.SetField(repository.FieldHomepage, field.TypeString, value)
		_node.Homepage = value
	}
	if value, ok := rc.mutation.Language(); ok {
		_spec.SetField(repository.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := rc.mutation.ForksCount(); ok {
		_spec.SetField(repository.FieldForksCount, field.TypeInt64, value)
		_node.ForksCount = value
	}
	if value, ok := rc.mutation.StargazersCount(); ok {
		_spec.SetField(repository.FieldStargazersCount, field.TypeInt64, value)
		_node.StargazersCount = value
	}
	if value, ok := rc.mutation.WatchersCount(); ok {
		_spec.SetField(repository.FieldWatchersCount, field.TypeInt64, value)
		_node.WatchersCount = value
	}
	if value, ok := rc.mutation.Size(); ok {
		_spec.SetField(repository.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := rc.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
		_node.DefaultBranch = value
	}
	if value, ok := rc.mutation.OpenIssuesCount(); ok {
		_spec.SetField(repository.FieldOpenIssuesCount, field.TypeInt64, value)
		_node.OpenIssuesCount = value
	}
	if value, ok := rc.mutation.IsTemplate(); ok {
		_spec.SetField(repository.FieldIsTemplate, field.TypeBool, value)
		_node.IsTemplate = value
	}
	if value, ok := rc.mutation.Topics(); ok {
		_spec.SetField(repository.FieldTopics, field.TypeJSON, value)
		_node.Topics = value
	}
	if value, ok := rc.mutation.HasIssuesEnabled(); ok {
		_spec.SetField(repository.FieldHasIssuesEnabled, field.TypeBool, value)
		_node.HasIssuesEnabled = value
	}
	if value, ok := rc.mutation.HasProjects(); ok {
		_spec.SetField(repository.FieldHasProjects, field.TypeBool, value)
		_node.HasProjects = value
	}
	if value, ok := rc.mutation.HasWiki(); ok {
		_spec.SetField(repository.FieldHasWiki, field.TypeBool, value)
		_node.HasWiki = value
	}
	if value, ok := rc.mutation.HasPages(); ok {
		_spec.SetField(repository.FieldHasPages, field.TypeBool, value)
		_node.HasPages = value
	}
	if value, ok := rc.mutation.HasDownloads(); ok {
		_spec.SetField(repository.FieldHasDownloads, field.TypeBool, value)
		_node.HasDownloads = value
	}
	if value, ok := rc.mutation.HasDiscussions(); ok {
		_spec.SetField(repository.FieldHasDiscussions, field.TypeBool, value)
		_node.HasDiscussions = value
	}
	if value, ok := rc.mutation.Archived(); ok {
		_spec.SetField(repository.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := rc.mutation.Disabled(); ok {
		_spec.SetField(repository.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := rc.mutation.Visibility(); ok {
		_spec.SetField(repository.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = &value
	}
	if value, ok := rc.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
		_node.PushedAt = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.SubscribersCount(); ok {
		_spec.SetField(repository.FieldSubscribersCount, field.TypeInt64, value)
		_node.SubscribersCount = value
	}
	if value, ok := rc.mutation.NetworkCount(); ok {
		_spec.SetField(repository.FieldNetworkCount, field.TypeInt64, value)
		_node.NetworkCount = value
	}
	if value, ok := rc.mutation.Forks(); ok {
		_spec.SetField(repository.FieldForks, field.TypeInt64, value)
		_node.Forks = value
	}
	if value, ok := rc.mutation.OpenIssues(); ok {
		_spec.SetField(repository.FieldOpenIssues, field.TypeInt64, value)
		_node.OpenIssues = value
	}
	if value, ok := rc.mutation.Watchers(); ok {
		_spec.SetField(repository.FieldWatchers, field.TypeInt64, value)
		_node.Watchers = value
	}
	if value, ok := rc.mutation.License(); ok {
		_spec.SetField(repository.FieldLicense, field.TypeJSON, value)
		_node.License = value
	}
	if nodes := rc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.Create().
//		SetNodeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (rc *RepositoryCreate) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertOne {
	rc.conflict = opts
	return &RepositoryUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RepositoryCreate) OnConflictColumns(columns ...string) *RepositoryUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertOne{
		create: rc,
	}
}

type (
	// RepositoryUpsertOne is the builder for "upsert"-ing
	//  one Repository node.
	RepositoryUpsertOne struct {
		create *RepositoryCreate
	}

	// RepositoryUpsert is the "OnConflict" setter.
	RepositoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetNodeID sets the "node_id" field.
func (u *RepositoryUpsert) SetNodeID(v string) *RepositoryUpsert {
	u.Set(repository.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateNodeID() *RepositoryUpsert {
	u.SetExcluded(repository.FieldNodeID)
	return u
}

// SetName sets the "name" field.
func (u *RepositoryUpsert) SetName(v string) *RepositoryUpsert {
	u.Set(repository.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateName() *RepositoryUpsert {
	u.SetExcluded(repository.FieldName)
	return u
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsert) SetFullName(v string) *RepositoryUpsert {
	u.Set(repository.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateFullName() *RepositoryUpsert {
	u.SetExcluded(repository.FieldFullName)
	return u
}

// SetPrivate sets the "private" field.
func (u *RepositoryUpsert) SetPrivate(v bool) *RepositoryUpsert {
	u.Set(repository.FieldPrivate, v)
	return u
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdatePrivate() *RepositoryUpsert {
	u.SetExcluded(repository.FieldPrivate)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsert) SetHTMLURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHTMLURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHTMLURL)
	return u
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsert) SetDescription(v string) *RepositoryUpsert {
	u.Set(repository.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDescription() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *RepositoryUpsert) ClearDescription() *RepositoryUpsert {
	u.SetNull(repository.FieldDescription)
	return u
}

// SetFork sets the "fork" field.
func (u *RepositoryUpsert) SetFork(v bool) *RepositoryUpsert {
	u.Set(repository.FieldFork, v)
	return u
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateFork() *RepositoryUpsert {
	u.SetExcluded(repository.FieldFork)
	return u
}

// SetURL sets the "url" field.
func (u *RepositoryUpsert) SetURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldURL)
	return u
}

// SetArchiveURL sets the "archive_url" field.
func (u *RepositoryUpsert) SetArchiveURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldArchiveURL, v)
	return u
}

// UpdateArchiveURL sets the "archive_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateArchiveURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldArchiveURL)
	return u
}

// SetAssigneesURL sets the "assignees_url" field.
func (u *RepositoryUpsert) SetAssigneesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldAssigneesURL, v)
	return u
}

// UpdateAssigneesURL sets the "assignees_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateAssigneesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldAssigneesURL)
	return u
}

// SetBlobsURL sets the "blobs_url" field.
func (u *RepositoryUpsert) SetBlobsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldBlobsURL, v)
	return u
}

// UpdateBlobsURL sets the "blobs_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateBlobsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldBlobsURL)
	return u
}

// SetBranchesURL sets the "branches_url" field.
func (u *RepositoryUpsert) SetBranchesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldBranchesURL, v)
	return u
}

// UpdateBranchesURL sets the "branches_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateBranchesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldBranchesURL)
	return u
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (u *RepositoryUpsert) SetCollaboratorsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldCollaboratorsURL, v)
	return u
}

// UpdateCollaboratorsURL sets the "collaborators_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCollaboratorsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCollaboratorsURL)
	return u
}

// SetCommentsURL sets the "comments_url" field.
func (u *RepositoryUpsert) SetCommentsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldCommentsURL, v)
	return u
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCommentsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCommentsURL)
	return u
}

// SetCommitsURL sets the "commits_url" field.
func (u *RepositoryUpsert) SetCommitsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldCommitsURL, v)
	return u
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCommitsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCommitsURL)
	return u
}

// SetCompareURL sets the "compare_url" field.
func (u *RepositoryUpsert) SetCompareURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldCompareURL, v)
	return u
}

// UpdateCompareURL sets the "compare_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCompareURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCompareURL)
	return u
}

// SetContentsURL sets the "contents_url" field.
func (u *RepositoryUpsert) SetContentsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldContentsURL, v)
	return u
}

// UpdateContentsURL sets the "contents_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateContentsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldContentsURL)
	return u
}

// SetContributorsURL sets the "contributors_url" field.
func (u *RepositoryUpsert) SetContributorsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldContributorsURL, v)
	return u
}

// UpdateContributorsURL sets the "contributors_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateContributorsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldContributorsURL)
	return u
}

// SetDeploymentsURL sets the "deployments_url" field.
func (u *RepositoryUpsert) SetDeploymentsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldDeploymentsURL, v)
	return u
}

// UpdateDeploymentsURL sets the "deployments_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDeploymentsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDeploymentsURL)
	return u
}

// SetDownloadsURL sets the "downloads_url" field.
func (u *RepositoryUpsert) SetDownloadsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldDownloadsURL, v)
	return u
}

// UpdateDownloadsURL sets the "downloads_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDownloadsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDownloadsURL)
	return u
}

// SetEventsURL sets the "events_url" field.
func (u *RepositoryUpsert) SetEventsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldEventsURL, v)
	return u
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateEventsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldEventsURL)
	return u
}

// SetForksURL sets the "forks_url" field.
func (u *RepositoryUpsert) SetForksURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldForksURL, v)
	return u
}

// UpdateForksURL sets the "forks_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateForksURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldForksURL)
	return u
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (u *RepositoryUpsert) SetGitCommitsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitCommitsURL, v)
	return u
}

// UpdateGitCommitsURL sets the "git_commits_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitCommitsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitCommitsURL)
	return u
}

// SetGitRefsURL sets the "git_refs_url" field.
func (u *RepositoryUpsert) SetGitRefsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitRefsURL, v)
	return u
}

// UpdateGitRefsURL sets the "git_refs_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitRefsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitRefsURL)
	return u
}

// SetGitTagsURL sets the "git_tags_url" field.
func (u *RepositoryUpsert) SetGitTagsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitTagsURL, v)
	return u
}

// UpdateGitTagsURL sets the "git_tags_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitTagsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitTagsURL)
	return u
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsert) SetGitURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitURL, v)
	return u
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitURL)
	return u
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (u *RepositoryUpsert) SetIssueCommentURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldIssueCommentURL, v)
	return u
}

// UpdateIssueCommentURL sets the "issue_comment_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateIssueCommentURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldIssueCommentURL)
	return u
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (u *RepositoryUpsert) SetIssueEventsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldIssueEventsURL, v)
	return u
}

// UpdateIssueEventsURL sets the "issue_events_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateIssueEventsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldIssueEventsURL)
	return u
}

// SetIssuesURL sets the "issues_url" field.
func (u *RepositoryUpsert) SetIssuesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldIssuesURL, v)
	return u
}

// UpdateIssuesURL sets the "issues_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateIssuesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldIssuesURL)
	return u
}

// SetKeysURL sets the "keys_url" field.
func (u *RepositoryUpsert) SetKeysURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldKeysURL, v)
	return u
}

// UpdateKeysURL sets the "keys_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateKeysURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldKeysURL)
	return u
}

// SetLabelsURL sets the "labels_url" field.
func (u *RepositoryUpsert) SetLabelsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldLabelsURL, v)
	return u
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLabelsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLabelsURL)
	return u
}

// SetLanguagesURL sets the "languages_url" field.
func (u *RepositoryUpsert) SetLanguagesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldLanguagesURL, v)
	return u
}

// UpdateLanguagesURL sets the "languages_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLanguagesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLanguagesURL)
	return u
}

// SetMergesURL sets the "merges_url" field.
func (u *RepositoryUpsert) SetMergesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldMergesURL, v)
	return u
}

// UpdateMergesURL sets the "merges_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateMergesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldMergesURL)
	return u
}

// SetMilestonesURL sets the "milestones_url" field.
func (u *RepositoryUpsert) SetMilestonesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldMilestonesURL, v)
	return u
}

// UpdateMilestonesURL sets the "milestones_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateMilestonesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldMilestonesURL)
	return u
}

// SetNotificationsURL sets the "notifications_url" field.
func (u *RepositoryUpsert) SetNotificationsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldNotificationsURL, v)
	return u
}

// UpdateNotificationsURL sets the "notifications_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateNotificationsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldNotificationsURL)
	return u
}

// SetPullsURL sets the "pulls_url" field.
func (u *RepositoryUpsert) SetPullsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldPullsURL, v)
	return u
}

// UpdatePullsURL sets the "pulls_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdatePullsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldPullsURL)
	return u
}

// SetReleasesURL sets the "releases_url" field.
func (u *RepositoryUpsert) SetReleasesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldReleasesURL, v)
	return u
}

// UpdateReleasesURL sets the "releases_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateReleasesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldReleasesURL)
	return u
}

// SetSSHURL sets the "ssh_url" field.
func (u *RepositoryUpsert) SetSSHURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldSSHURL, v)
	return u
}

// UpdateSSHURL sets the "ssh_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSSHURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSSHURL)
	return u
}

// SetStargazersURL sets the "stargazers_url" field.
func (u *RepositoryUpsert) SetStargazersURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldStargazersURL, v)
	return u
}

// UpdateStargazersURL sets the "stargazers_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateStargazersURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldStargazersURL)
	return u
}

// SetStatusesURL sets the "statuses_url" field.
func (u *RepositoryUpsert) SetStatusesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldStatusesURL, v)
	return u
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateStatusesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldStatusesURL)
	return u
}

// SetSubscribersURL sets the "subscribers_url" field.
func (u *RepositoryUpsert) SetSubscribersURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldSubscribersURL, v)
	return u
}

// UpdateSubscribersURL sets the "subscribers_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSubscribersURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSubscribersURL)
	return u
}

// SetSubscriptionURL sets the "subscription_url" field.
func (u *RepositoryUpsert) SetSubscriptionURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldSubscriptionURL, v)
	return u
}

// UpdateSubscriptionURL sets the "subscription_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSubscriptionURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSubscriptionURL)
	return u
}

// SetTagsURL sets the "tags_url" field.
func (u *RepositoryUpsert) SetTagsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldTagsURL, v)
	return u
}

// UpdateTagsURL sets the "tags_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateTagsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldTagsURL)
	return u
}

// SetTeamsURL sets the "teams_url" field.
func (u *RepositoryUpsert) SetTeamsURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldTeamsURL, v)
	return u
}

// UpdateTeamsURL sets the "teams_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateTeamsURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldTeamsURL)
	return u
}

// SetTreesURL sets the "trees_url" field.
func (u *RepositoryUpsert) SetTreesURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldTreesURL, v)
	return u
}

// UpdateTreesURL sets the "trees_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateTreesURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldTreesURL)
	return u
}

// SetCloneURL sets the "clone_url" field.
func (u *RepositoryUpsert) SetCloneURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldCloneURL, v)
	return u
}

// UpdateCloneURL sets the "clone_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCloneURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCloneURL)
	return u
}

// SetMirrorURL sets the "mirror_url" field.
func (u *RepositoryUpsert) SetMirrorURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldMirrorURL, v)
	return u
}

// UpdateMirrorURL sets the "mirror_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateMirrorURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldMirrorURL)
	return u
}

// ClearMirrorURL clears the value of the "mirror_url" field.
func (u *RepositoryUpsert) ClearMirrorURL() *RepositoryUpsert {
	u.SetNull(repository.FieldMirrorURL)
	return u
}

// SetHooksURL sets the "hooks_url" field.
func (u *RepositoryUpsert) SetHooksURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldHooksURL, v)
	return u
}

// UpdateHooksURL sets the "hooks_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHooksURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHooksURL)
	return u
}

// SetSvnURL sets the "svn_url" field.
func (u *RepositoryUpsert) SetSvnURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldSvnURL, v)
	return u
}

// UpdateSvnURL sets the "svn_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSvnURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSvnURL)
	return u
}

// SetHomepage sets the "homepage" field.
func (u *RepositoryUpsert) SetHomepage(v string) *RepositoryUpsert {
	u.Set(repository.FieldHomepage, v)
	return u
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHomepage() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHomepage)
	return u
}

// ClearHomepage clears the value of the "homepage" field.
func (u *RepositoryUpsert) ClearHomepage() *RepositoryUpsert {
	u.SetNull(repository.FieldHomepage)
	return u
}

// SetLanguage sets the "language" field.
func (u *RepositoryUpsert) SetLanguage(v string) *RepositoryUpsert {
	u.Set(repository.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLanguage() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLanguage)
	return u
}

// ClearLanguage clears the value of the "language" field.
func (u *RepositoryUpsert) ClearLanguage() *RepositoryUpsert {
	u.SetNull(repository.FieldLanguage)
	return u
}

// SetForksCount sets the "forks_count" field.
func (u *RepositoryUpsert) SetForksCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldForksCount, v)
	return u
}

// UpdateForksCount sets the "forks_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateForksCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldForksCount)
	return u
}

// AddForksCount adds v to the "forks_count" field.
func (u *RepositoryUpsert) AddForksCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldForksCount, v)
	return u
}

// SetStargazersCount sets the "stargazers_count" field.
func (u *RepositoryUpsert) SetStargazersCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldStargazersCount, v)
	return u
}

// UpdateStargazersCount sets the "stargazers_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateStargazersCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldStargazersCount)
	return u
}

// AddStargazersCount adds v to the "stargazers_count" field.
func (u *RepositoryUpsert) AddStargazersCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldStargazersCount, v)
	return u
}

// SetWatchersCount sets the "watchers_count" field.
func (u *RepositoryUpsert) SetWatchersCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldWatchersCount, v)
	return u
}

// UpdateWatchersCount sets the "watchers_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateWatchersCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldWatchersCount)
	return u
}

// AddWatchersCount adds v to the "watchers_count" field.
func (u *RepositoryUpsert) AddWatchersCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldWatchersCount, v)
	return u
}

// SetSize sets the "size" field.
func (u *RepositoryUpsert) SetSize(v int64) *RepositoryUpsert {
	u.Set(repository.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSize() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *RepositoryUpsert) AddSize(v int64) *RepositoryUpsert {
	u.Add(repository.FieldSize, v)
	return u
}

// SetDefaultBranch sets the "default_branch" field.
func (u *RepositoryUpsert) SetDefaultBranch(v string) *RepositoryUpsert {
	u.Set(repository.FieldDefaultBranch, v)
	return u
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDefaultBranch() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDefaultBranch)
	return u
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (u *RepositoryUpsert) SetOpenIssuesCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldOpenIssuesCount, v)
	return u
}

// UpdateOpenIssuesCount sets the "open_issues_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateOpenIssuesCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldOpenIssuesCount)
	return u
}

// AddOpenIssuesCount adds v to the "open_issues_count" field.
func (u *RepositoryUpsert) AddOpenIssuesCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldOpenIssuesCount, v)
	return u
}

// SetIsTemplate sets the "is_template" field.
func (u *RepositoryUpsert) SetIsTemplate(v bool) *RepositoryUpsert {
	u.Set(repository.FieldIsTemplate, v)
	return u
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateIsTemplate() *RepositoryUpsert {
	u.SetExcluded(repository.FieldIsTemplate)
	return u
}

// SetTopics sets the "topics" field.
func (u *RepositoryUpsert) SetTopics(v []string) *RepositoryUpsert {
	u.Set(repository.FieldTopics, v)
	return u
}

// UpdateTopics sets the "topics" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateTopics() *RepositoryUpsert {
	u.SetExcluded(repository.FieldTopics)
	return u
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (u *RepositoryUpsert) SetHasIssuesEnabled(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasIssuesEnabled, v)
	return u
}

// UpdateHasIssuesEnabled sets the "has_issues_enabled" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasIssuesEnabled() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasIssuesEnabled)
	return u
}

// SetHasProjects sets the "has_projects" field.
func (u *RepositoryUpsert) SetHasProjects(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasProjects, v)
	return u
}

// UpdateHasProjects sets the "has_projects" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasProjects() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasProjects)
	return u
}

// SetHasWiki sets the "has_wiki" field.
func (u *RepositoryUpsert) SetHasWiki(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasWiki, v)
	return u
}

// UpdateHasWiki sets the "has_wiki" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasWiki() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasWiki)
	return u
}

// SetHasPages sets the "has_pages" field.
func (u *RepositoryUpsert) SetHasPages(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasPages, v)
	return u
}

// UpdateHasPages sets the "has_pages" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasPages() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasPages)
	return u
}

// SetHasDownloads sets the "has_downloads" field.
func (u *RepositoryUpsert) SetHasDownloads(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasDownloads, v)
	return u
}

// UpdateHasDownloads sets the "has_downloads" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasDownloads() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasDownloads)
	return u
}

// SetHasDiscussions sets the "has_discussions" field.
func (u *RepositoryUpsert) SetHasDiscussions(v bool) *RepositoryUpsert {
	u.Set(repository.FieldHasDiscussions, v)
	return u
}

// UpdateHasDiscussions sets the "has_discussions" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateHasDiscussions() *RepositoryUpsert {
	u.SetExcluded(repository.FieldHasDiscussions)
	return u
}

// SetArchived sets the "archived" field.
func (u *RepositoryUpsert) SetArchived(v bool) *RepositoryUpsert {
	u.Set(repository.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateArchived() *RepositoryUpsert {
	u.SetExcluded(repository.FieldArchived)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *RepositoryUpsert) SetDisabled(v bool) *RepositoryUpsert {
	u.Set(repository.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDisabled() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDisabled)
	return u
}

// SetVisibility sets the "visibility" field.
func (u *RepositoryUpsert) SetVisibility(v repository.Visibility) *RepositoryUpsert {
	u.Set(repository.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateVisibility() *RepositoryUpsert {
	u.SetExcluded(repository.FieldVisibility)
	return u
}

// ClearVisibility clears the value of the "visibility" field.
func (u *RepositoryUpsert) ClearVisibility() *RepositoryUpsert {
	u.SetNull(repository.FieldVisibility)
	return u
}

// SetPushedAt sets the "pushed_at" field.
func (u *RepositoryUpsert) SetPushedAt(v time.Time) *RepositoryUpsert {
	u.Set(repository.FieldPushedAt, v)
	return u
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdatePushedAt() *RepositoryUpsert {
	u.SetExcluded(repository.FieldPushedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RepositoryUpsert) SetCreatedAt(v time.Time) *RepositoryUpsert {
	u.Set(repository.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateCreatedAt() *RepositoryUpsert {
	u.SetExcluded(repository.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RepositoryUpsert) SetUpdatedAt(v time.Time) *RepositoryUpsert {
	u.Set(repository.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateUpdatedAt() *RepositoryUpsert {
	u.SetExcluded(repository.FieldUpdatedAt)
	return u
}

// SetSubscribersCount sets the "subscribers_count" field.
func (u *RepositoryUpsert) SetSubscribersCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldSubscribersCount, v)
	return u
}

// UpdateSubscribersCount sets the "subscribers_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateSubscribersCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldSubscribersCount)
	return u
}

// AddSubscribersCount adds v to the "subscribers_count" field.
func (u *RepositoryUpsert) AddSubscribersCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldSubscribersCount, v)
	return u
}

// SetNetworkCount sets the "network_count" field.
func (u *RepositoryUpsert) SetNetworkCount(v int64) *RepositoryUpsert {
	u.Set(repository.FieldNetworkCount, v)
	return u
}

// UpdateNetworkCount sets the "network_count" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateNetworkCount() *RepositoryUpsert {
	u.SetExcluded(repository.FieldNetworkCount)
	return u
}

// AddNetworkCount adds v to the "network_count" field.
func (u *RepositoryUpsert) AddNetworkCount(v int64) *RepositoryUpsert {
	u.Add(repository.FieldNetworkCount, v)
	return u
}

// SetForks sets the "forks" field.
func (u *RepositoryUpsert) SetForks(v int64) *RepositoryUpsert {
	u.Set(repository.FieldForks, v)
	return u
}

// UpdateForks sets the "forks" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateForks() *RepositoryUpsert {
	u.SetExcluded(repository.FieldForks)
	return u
}

// AddForks adds v to the "forks" field.
func (u *RepositoryUpsert) AddForks(v int64) *RepositoryUpsert {
	u.Add(repository.FieldForks, v)
	return u
}

// SetOpenIssues sets the "open_issues" field.
func (u *RepositoryUpsert) SetOpenIssues(v int64) *RepositoryUpsert {
	u.Set(repository.FieldOpenIssues, v)
	return u
}

// UpdateOpenIssues sets the "open_issues" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateOpenIssues() *RepositoryUpsert {
	u.SetExcluded(repository.FieldOpenIssues)
	return u
}

// AddOpenIssues adds v to the "open_issues" field.
func (u *RepositoryUpsert) AddOpenIssues(v int64) *RepositoryUpsert {
	u.Add(repository.FieldOpenIssues, v)
	return u
}

// SetWatchers sets the "watchers" field.
func (u *RepositoryUpsert) SetWatchers(v int64) *RepositoryUpsert {
	u.Set(repository.FieldWatchers, v)
	return u
}

// UpdateWatchers sets the "watchers" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateWatchers() *RepositoryUpsert {
	u.SetExcluded(repository.FieldWatchers)
	return u
}

// AddWatchers adds v to the "watchers" field.
func (u *RepositoryUpsert) AddWatchers(v int64) *RepositoryUpsert {
	u.Add(repository.FieldWatchers, v)
	return u
}

// SetLicense sets the "license" field.
func (u *RepositoryUpsert) SetLicense(v *model.License) *RepositoryUpsert {
	u.Set(repository.FieldLicense, v)
	return u
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateLicense() *RepositoryUpsert {
	u.SetExcluded(repository.FieldLicense)
	return u
}

// ClearLicense clears the value of the "license" field.
func (u *RepositoryUpsert) ClearLicense() *RepositoryUpsert {
	u.SetNull(repository.FieldLicense)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertOne) UpdateNewValues() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(repository.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RepositoryUpsertOne) Ignore() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertOne) DoNothing() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreate.OnConflict
// documentation for more info.
func (u *RepositoryUpsertOne) Update(set func(*RepositoryUpsert)) *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *RepositoryUpsertOne) SetNodeID(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateNodeID() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNodeID()
	})
}

// SetName sets the "name" field.
func (u *RepositoryUpsertOne) SetName(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateName() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsertOne) SetFullName(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateFullName() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetPrivate sets the "private" field.
func (u *RepositoryUpsertOne) SetPrivate(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdatePrivate() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePrivate()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsertOne) SetHTMLURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHTMLURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertOne) SetDescription(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDescription() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RepositoryUpsertOne) ClearDescription() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearDescription()
	})
}

// SetFork sets the "fork" field.
func (u *RepositoryUpsertOne) SetFork(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFork(v)
	})
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateFork() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFork()
	})
}

// SetURL sets the "url" field.
func (u *RepositoryUpsertOne) SetURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateURL()
	})
}

// SetArchiveURL sets the "archive_url" field.
func (u *RepositoryUpsertOne) SetArchiveURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetArchiveURL(v)
	})
}

// UpdateArchiveURL sets the "archive_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateArchiveURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateArchiveURL()
	})
}

// SetAssigneesURL sets the "assignees_url" field.
func (u *RepositoryUpsertOne) SetAssigneesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetAssigneesURL(v)
	})
}

// UpdateAssigneesURL sets the "assignees_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateAssigneesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateAssigneesURL()
	})
}

// SetBlobsURL sets the "blobs_url" field.
func (u *RepositoryUpsertOne) SetBlobsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetBlobsURL(v)
	})
}

// UpdateBlobsURL sets the "blobs_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateBlobsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateBlobsURL()
	})
}

// SetBranchesURL sets the "branches_url" field.
func (u *RepositoryUpsertOne) SetBranchesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetBranchesURL(v)
	})
}

// UpdateBranchesURL sets the "branches_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateBranchesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateBranchesURL()
	})
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (u *RepositoryUpsertOne) SetCollaboratorsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCollaboratorsURL(v)
	})
}

// UpdateCollaboratorsURL sets the "collaborators_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCollaboratorsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCollaboratorsURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *RepositoryUpsertOne) SetCommentsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCommentsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetCommitsURL sets the "commits_url" field.
func (u *RepositoryUpsertOne) SetCommitsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCommitsURL(v)
	})
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCommitsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCommitsURL()
	})
}

// SetCompareURL sets the "compare_url" field.
func (u *RepositoryUpsertOne) SetCompareURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCompareURL(v)
	})
}

// UpdateCompareURL sets the "compare_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCompareURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCompareURL()
	})
}

// SetContentsURL sets the "contents_url" field.
func (u *RepositoryUpsertOne) SetContentsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetContentsURL(v)
	})
}

// UpdateContentsURL sets the "contents_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateContentsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateContentsURL()
	})
}

// SetContributorsURL sets the "contributors_url" field.
func (u *RepositoryUpsertOne) SetContributorsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetContributorsURL(v)
	})
}

// UpdateContributorsURL sets the "contributors_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateContributorsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateContributorsURL()
	})
}

// SetDeploymentsURL sets the "deployments_url" field.
func (u *RepositoryUpsertOne) SetDeploymentsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDeploymentsURL(v)
	})
}

// UpdateDeploymentsURL sets the "deployments_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDeploymentsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDeploymentsURL()
	})
}

// SetDownloadsURL sets the "downloads_url" field.
func (u *RepositoryUpsertOne) SetDownloadsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDownloadsURL(v)
	})
}

// UpdateDownloadsURL sets the "downloads_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDownloadsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDownloadsURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *RepositoryUpsertOne) SetEventsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateEventsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateEventsURL()
	})
}

// SetForksURL sets the "forks_url" field.
func (u *RepositoryUpsertOne) SetForksURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForksURL(v)
	})
}

// UpdateForksURL sets the "forks_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateForksURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForksURL()
	})
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (u *RepositoryUpsertOne) SetGitCommitsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitCommitsURL(v)
	})
}

// UpdateGitCommitsURL sets the "git_commits_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitCommitsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitCommitsURL()
	})
}

// SetGitRefsURL sets the "git_refs_url" field.
func (u *RepositoryUpsertOne) SetGitRefsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitRefsURL(v)
	})
}

// UpdateGitRefsURL sets the "git_refs_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitRefsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitRefsURL()
	})
}

// SetGitTagsURL sets the "git_tags_url" field.
func (u *RepositoryUpsertOne) SetGitTagsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitTagsURL(v)
	})
}

// UpdateGitTagsURL sets the "git_tags_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitTagsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitTagsURL()
	})
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsertOne) SetGitURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitURL(v)
	})
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitURL()
	})
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (u *RepositoryUpsertOne) SetIssueCommentURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssueCommentURL(v)
	})
}

// UpdateIssueCommentURL sets the "issue_comment_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateIssueCommentURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssueCommentURL()
	})
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (u *RepositoryUpsertOne) SetIssueEventsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssueEventsURL(v)
	})
}

// UpdateIssueEventsURL sets the "issue_events_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateIssueEventsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssueEventsURL()
	})
}

// SetIssuesURL sets the "issues_url" field.
func (u *RepositoryUpsertOne) SetIssuesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssuesURL(v)
	})
}

// UpdateIssuesURL sets the "issues_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateIssuesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssuesURL()
	})
}

// SetKeysURL sets the "keys_url" field.
func (u *RepositoryUpsertOne) SetKeysURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetKeysURL(v)
	})
}

// UpdateKeysURL sets the "keys_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateKeysURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateKeysURL()
	})
}

// SetLabelsURL sets the "labels_url" field.
func (u *RepositoryUpsertOne) SetLabelsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLabelsURL(v)
	})
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLabelsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLabelsURL()
	})
}

// SetLanguagesURL sets the "languages_url" field.
func (u *RepositoryUpsertOne) SetLanguagesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLanguagesURL(v)
	})
}

// UpdateLanguagesURL sets the "languages_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLanguagesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLanguagesURL()
	})
}

// SetMergesURL sets the "merges_url" field.
func (u *RepositoryUpsertOne) SetMergesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMergesURL(v)
	})
}

// UpdateMergesURL sets the "merges_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateMergesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMergesURL()
	})
}

// SetMilestonesURL sets the "milestones_url" field.
func (u *RepositoryUpsertOne) SetMilestonesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMilestonesURL(v)
	})
}

// UpdateMilestonesURL sets the "milestones_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateMilestonesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMilestonesURL()
	})
}

// SetNotificationsURL sets the "notifications_url" field.
func (u *RepositoryUpsertOne) SetNotificationsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNotificationsURL(v)
	})
}

// UpdateNotificationsURL sets the "notifications_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateNotificationsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNotificationsURL()
	})
}

// SetPullsURL sets the "pulls_url" field.
func (u *RepositoryUpsertOne) SetPullsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPullsURL(v)
	})
}

// UpdatePullsURL sets the "pulls_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdatePullsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePullsURL()
	})
}

// SetReleasesURL sets the "releases_url" field.
func (u *RepositoryUpsertOne) SetReleasesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetReleasesURL(v)
	})
}

// UpdateReleasesURL sets the "releases_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateReleasesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateReleasesURL()
	})
}

// SetSSHURL sets the "ssh_url" field.
func (u *RepositoryUpsertOne) SetSSHURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSSHURL(v)
	})
}

// UpdateSSHURL sets the "ssh_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSSHURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSSHURL()
	})
}

// SetStargazersURL sets the "stargazers_url" field.
func (u *RepositoryUpsertOne) SetStargazersURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStargazersURL(v)
	})
}

// UpdateStargazersURL sets the "stargazers_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateStargazersURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStargazersURL()
	})
}

// SetStatusesURL sets the "statuses_url" field.
func (u *RepositoryUpsertOne) SetStatusesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStatusesURL(v)
	})
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateStatusesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStatusesURL()
	})
}

// SetSubscribersURL sets the "subscribers_url" field.
func (u *RepositoryUpsertOne) SetSubscribersURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscribersURL(v)
	})
}

// UpdateSubscribersURL sets the "subscribers_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSubscribersURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscribersURL()
	})
}

// SetSubscriptionURL sets the "subscription_url" field.
func (u *RepositoryUpsertOne) SetSubscriptionURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscriptionURL(v)
	})
}

// UpdateSubscriptionURL sets the "subscription_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSubscriptionURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscriptionURL()
	})
}

// SetTagsURL sets the "tags_url" field.
func (u *RepositoryUpsertOne) SetTagsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTagsURL(v)
	})
}

// UpdateTagsURL sets the "tags_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateTagsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTagsURL()
	})
}

// SetTeamsURL sets the "teams_url" field.
func (u *RepositoryUpsertOne) SetTeamsURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTeamsURL(v)
	})
}

// UpdateTeamsURL sets the "teams_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateTeamsURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTeamsURL()
	})
}

// SetTreesURL sets the "trees_url" field.
func (u *RepositoryUpsertOne) SetTreesURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTreesURL(v)
	})
}

// UpdateTreesURL sets the "trees_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateTreesURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTreesURL()
	})
}

// SetCloneURL sets the "clone_url" field.
func (u *RepositoryUpsertOne) SetCloneURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCloneURL(v)
	})
}

// UpdateCloneURL sets the "clone_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCloneURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCloneURL()
	})
}

// SetMirrorURL sets the "mirror_url" field.
func (u *RepositoryUpsertOne) SetMirrorURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMirrorURL(v)
	})
}

// UpdateMirrorURL sets the "mirror_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateMirrorURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMirrorURL()
	})
}

// ClearMirrorURL clears the value of the "mirror_url" field.
func (u *RepositoryUpsertOne) ClearMirrorURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearMirrorURL()
	})
}

// SetHooksURL sets the "hooks_url" field.
func (u *RepositoryUpsertOne) SetHooksURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHooksURL(v)
	})
}

// UpdateHooksURL sets the "hooks_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHooksURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHooksURL()
	})
}

// SetSvnURL sets the "svn_url" field.
func (u *RepositoryUpsertOne) SetSvnURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSvnURL(v)
	})
}

// UpdateSvnURL sets the "svn_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSvnURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSvnURL()
	})
}

// SetHomepage sets the "homepage" field.
func (u *RepositoryUpsertOne) SetHomepage(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHomepage() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHomepage()
	})
}

// ClearHomepage clears the value of the "homepage" field.
func (u *RepositoryUpsertOne) ClearHomepage() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearHomepage()
	})
}

// SetLanguage sets the "language" field.
func (u *RepositoryUpsertOne) SetLanguage(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLanguage() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLanguage()
	})
}

// ClearLanguage clears the value of the "language" field.
func (u *RepositoryUpsertOne) ClearLanguage() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLanguage()
	})
}

// SetForksCount sets the "forks_count" field.
func (u *RepositoryUpsertOne) SetForksCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForksCount(v)
	})
}

// AddForksCount adds v to the "forks_count" field.
func (u *RepositoryUpsertOne) AddForksCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddForksCount(v)
	})
}

// UpdateForksCount sets the "forks_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateForksCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForksCount()
	})
}

// SetStargazersCount sets the "stargazers_count" field.
func (u *RepositoryUpsertOne) SetStargazersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStargazersCount(v)
	})
}

// AddStargazersCount adds v to the "stargazers_count" field.
func (u *RepositoryUpsertOne) AddStargazersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddStargazersCount(v)
	})
}

// UpdateStargazersCount sets the "stargazers_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateStargazersCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStargazersCount()
	})
}

// SetWatchersCount sets the "watchers_count" field.
func (u *RepositoryUpsertOne) SetWatchersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetWatchersCount(v)
	})
}

// AddWatchersCount adds v to the "watchers_count" field.
func (u *RepositoryUpsertOne) AddWatchersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddWatchersCount(v)
	})
}

// UpdateWatchersCount sets the "watchers_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateWatchersCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateWatchersCount()
	})
}

// SetSize sets the "size" field.
func (u *RepositoryUpsertOne) SetSize(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *RepositoryUpsertOne) AddSize(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSize() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSize()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *RepositoryUpsertOne) SetDefaultBranch(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDefaultBranch() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (u *RepositoryUpsertOne) SetOpenIssuesCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetOpenIssuesCount(v)
	})
}

// AddOpenIssuesCount adds v to the "open_issues_count" field.
func (u *RepositoryUpsertOne) AddOpenIssuesCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddOpenIssuesCount(v)
	})
}

// UpdateOpenIssuesCount sets the "open_issues_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateOpenIssuesCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateOpenIssuesCount()
	})
}

// SetIsTemplate sets the "is_template" field.
func (u *RepositoryUpsertOne) SetIsTemplate(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIsTemplate(v)
	})
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateIsTemplate() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIsTemplate()
	})
}

// SetTopics sets the "topics" field.
func (u *RepositoryUpsertOne) SetTopics(v []string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTopics(v)
	})
}

// UpdateTopics sets the "topics" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateTopics() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTopics()
	})
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (u *RepositoryUpsertOne) SetHasIssuesEnabled(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasIssuesEnabled(v)
	})
}

// UpdateHasIssuesEnabled sets the "has_issues_enabled" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasIssuesEnabled() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasIssuesEnabled()
	})
}

// SetHasProjects sets the "has_projects" field.
func (u *RepositoryUpsertOne) SetHasProjects(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasProjects(v)
	})
}

// UpdateHasProjects sets the "has_projects" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasProjects() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasProjects()
	})
}

// SetHasWiki sets the "has_wiki" field.
func (u *RepositoryUpsertOne) SetHasWiki(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasWiki(v)
	})
}

// UpdateHasWiki sets the "has_wiki" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasWiki() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasWiki()
	})
}

// SetHasPages sets the "has_pages" field.
func (u *RepositoryUpsertOne) SetHasPages(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasPages(v)
	})
}

// UpdateHasPages sets the "has_pages" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasPages() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasPages()
	})
}

// SetHasDownloads sets the "has_downloads" field.
func (u *RepositoryUpsertOne) SetHasDownloads(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasDownloads(v)
	})
}

// UpdateHasDownloads sets the "has_downloads" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasDownloads() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasDownloads()
	})
}

// SetHasDiscussions sets the "has_discussions" field.
func (u *RepositoryUpsertOne) SetHasDiscussions(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasDiscussions(v)
	})
}

// UpdateHasDiscussions sets the "has_discussions" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateHasDiscussions() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasDiscussions()
	})
}

// SetArchived sets the "archived" field.
func (u *RepositoryUpsertOne) SetArchived(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateArchived() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateArchived()
	})
}

// SetDisabled sets the "disabled" field.
func (u *RepositoryUpsertOne) SetDisabled(v bool) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDisabled() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDisabled()
	})
}

// SetVisibility sets the "visibility" field.
func (u *RepositoryUpsertOne) SetVisibility(v repository.Visibility) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateVisibility() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateVisibility()
	})
}

// ClearVisibility clears the value of the "visibility" field.
func (u *RepositoryUpsertOne) ClearVisibility() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearVisibility()
	})
}

// SetPushedAt sets the "pushed_at" field.
func (u *RepositoryUpsertOne) SetPushedAt(v time.Time) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPushedAt(v)
	})
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdatePushedAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePushedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RepositoryUpsertOne) SetCreatedAt(v time.Time) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateCreatedAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RepositoryUpsertOne) SetUpdatedAt(v time.Time) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateUpdatedAt() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribersCount sets the "subscribers_count" field.
func (u *RepositoryUpsertOne) SetSubscribersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscribersCount(v)
	})
}

// AddSubscribersCount adds v to the "subscribers_count" field.
func (u *RepositoryUpsertOne) AddSubscribersCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddSubscribersCount(v)
	})
}

// UpdateSubscribersCount sets the "subscribers_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateSubscribersCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscribersCount()
	})
}

// SetNetworkCount sets the "network_count" field.
func (u *RepositoryUpsertOne) SetNetworkCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNetworkCount(v)
	})
}

// AddNetworkCount adds v to the "network_count" field.
func (u *RepositoryUpsertOne) AddNetworkCount(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddNetworkCount(v)
	})
}

// UpdateNetworkCount sets the "network_count" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateNetworkCount() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNetworkCount()
	})
}

// SetForks sets the "forks" field.
func (u *RepositoryUpsertOne) SetForks(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForks(v)
	})
}

// AddForks adds v to the "forks" field.
func (u *RepositoryUpsertOne) AddForks(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddForks(v)
	})
}

// UpdateForks sets the "forks" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateForks() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForks()
	})
}

// SetOpenIssues sets the "open_issues" field.
func (u *RepositoryUpsertOne) SetOpenIssues(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetOpenIssues(v)
	})
}

// AddOpenIssues adds v to the "open_issues" field.
func (u *RepositoryUpsertOne) AddOpenIssues(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddOpenIssues(v)
	})
}

// UpdateOpenIssues sets the "open_issues" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateOpenIssues() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateOpenIssues()
	})
}

// SetWatchers sets the "watchers" field.
func (u *RepositoryUpsertOne) SetWatchers(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetWatchers(v)
	})
}

// AddWatchers adds v to the "watchers" field.
func (u *RepositoryUpsertOne) AddWatchers(v int64) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddWatchers(v)
	})
}

// UpdateWatchers sets the "watchers" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateWatchers() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateWatchers()
	})
}

// SetLicense sets the "license" field.
func (u *RepositoryUpsertOne) SetLicense(v *model.License) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateLicense() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLicense()
	})
}

// ClearLicense clears the value of the "license" field.
func (u *RepositoryUpsertOne) ClearLicense() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLicense()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepositoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RepositoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RepositoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RepositoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertBulk {
	rcb.conflict = opts
	return &RepositoryUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RepositoryCreateBulk) OnConflictColumns(columns ...string) *RepositoryUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertBulk{
		create: rcb,
	}
}

// RepositoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Repository nodes.
type RepositoryUpsertBulk struct {
	create *RepositoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) UpdateNewValues() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(repository.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) Ignore() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertBulk) DoNothing() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreateBulk.OnConflict
// documentation for more info.
func (u *RepositoryUpsertBulk) Update(set func(*RepositoryUpsert)) *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *RepositoryUpsertBulk) SetNodeID(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateNodeID() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNodeID()
	})
}

// SetName sets the "name" field.
func (u *RepositoryUpsertBulk) SetName(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateName() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *RepositoryUpsertBulk) SetFullName(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateFullName() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetPrivate sets the "private" field.
func (u *RepositoryUpsertBulk) SetPrivate(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdatePrivate() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePrivate()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *RepositoryUpsertBulk) SetHTMLURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHTMLURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertBulk) SetDescription(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDescription() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RepositoryUpsertBulk) ClearDescription() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearDescription()
	})
}

// SetFork sets the "fork" field.
func (u *RepositoryUpsertBulk) SetFork(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetFork(v)
	})
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateFork() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateFork()
	})
}

// SetURL sets the "url" field.
func (u *RepositoryUpsertBulk) SetURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateURL()
	})
}

// SetArchiveURL sets the "archive_url" field.
func (u *RepositoryUpsertBulk) SetArchiveURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetArchiveURL(v)
	})
}

// UpdateArchiveURL sets the "archive_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateArchiveURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateArchiveURL()
	})
}

// SetAssigneesURL sets the "assignees_url" field.
func (u *RepositoryUpsertBulk) SetAssigneesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetAssigneesURL(v)
	})
}

// UpdateAssigneesURL sets the "assignees_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateAssigneesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateAssigneesURL()
	})
}

// SetBlobsURL sets the "blobs_url" field.
func (u *RepositoryUpsertBulk) SetBlobsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetBlobsURL(v)
	})
}

// UpdateBlobsURL sets the "blobs_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateBlobsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateBlobsURL()
	})
}

// SetBranchesURL sets the "branches_url" field.
func (u *RepositoryUpsertBulk) SetBranchesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetBranchesURL(v)
	})
}

// UpdateBranchesURL sets the "branches_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateBranchesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateBranchesURL()
	})
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (u *RepositoryUpsertBulk) SetCollaboratorsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCollaboratorsURL(v)
	})
}

// UpdateCollaboratorsURL sets the "collaborators_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCollaboratorsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCollaboratorsURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *RepositoryUpsertBulk) SetCommentsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCommentsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetCommitsURL sets the "commits_url" field.
func (u *RepositoryUpsertBulk) SetCommitsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCommitsURL(v)
	})
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCommitsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCommitsURL()
	})
}

// SetCompareURL sets the "compare_url" field.
func (u *RepositoryUpsertBulk) SetCompareURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCompareURL(v)
	})
}

// UpdateCompareURL sets the "compare_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCompareURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCompareURL()
	})
}

// SetContentsURL sets the "contents_url" field.
func (u *RepositoryUpsertBulk) SetContentsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetContentsURL(v)
	})
}

// UpdateContentsURL sets the "contents_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateContentsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateContentsURL()
	})
}

// SetContributorsURL sets the "contributors_url" field.
func (u *RepositoryUpsertBulk) SetContributorsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetContributorsURL(v)
	})
}

// UpdateContributorsURL sets the "contributors_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateContributorsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateContributorsURL()
	})
}

// SetDeploymentsURL sets the "deployments_url" field.
func (u *RepositoryUpsertBulk) SetDeploymentsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDeploymentsURL(v)
	})
}

// UpdateDeploymentsURL sets the "deployments_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDeploymentsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDeploymentsURL()
	})
}

// SetDownloadsURL sets the "downloads_url" field.
func (u *RepositoryUpsertBulk) SetDownloadsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDownloadsURL(v)
	})
}

// UpdateDownloadsURL sets the "downloads_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDownloadsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDownloadsURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *RepositoryUpsertBulk) SetEventsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateEventsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateEventsURL()
	})
}

// SetForksURL sets the "forks_url" field.
func (u *RepositoryUpsertBulk) SetForksURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForksURL(v)
	})
}

// UpdateForksURL sets the "forks_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateForksURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForksURL()
	})
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (u *RepositoryUpsertBulk) SetGitCommitsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitCommitsURL(v)
	})
}

// UpdateGitCommitsURL sets the "git_commits_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitCommitsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitCommitsURL()
	})
}

// SetGitRefsURL sets the "git_refs_url" field.
func (u *RepositoryUpsertBulk) SetGitRefsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitRefsURL(v)
	})
}

// UpdateGitRefsURL sets the "git_refs_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitRefsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitRefsURL()
	})
}

// SetGitTagsURL sets the "git_tags_url" field.
func (u *RepositoryUpsertBulk) SetGitTagsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitTagsURL(v)
	})
}

// UpdateGitTagsURL sets the "git_tags_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitTagsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitTagsURL()
	})
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsertBulk) SetGitURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitURL(v)
	})
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitURL()
	})
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (u *RepositoryUpsertBulk) SetIssueCommentURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssueCommentURL(v)
	})
}

// UpdateIssueCommentURL sets the "issue_comment_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateIssueCommentURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssueCommentURL()
	})
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (u *RepositoryUpsertBulk) SetIssueEventsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssueEventsURL(v)
	})
}

// UpdateIssueEventsURL sets the "issue_events_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateIssueEventsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssueEventsURL()
	})
}

// SetIssuesURL sets the "issues_url" field.
func (u *RepositoryUpsertBulk) SetIssuesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIssuesURL(v)
	})
}

// UpdateIssuesURL sets the "issues_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateIssuesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIssuesURL()
	})
}

// SetKeysURL sets the "keys_url" field.
func (u *RepositoryUpsertBulk) SetKeysURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetKeysURL(v)
	})
}

// UpdateKeysURL sets the "keys_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateKeysURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateKeysURL()
	})
}

// SetLabelsURL sets the "labels_url" field.
func (u *RepositoryUpsertBulk) SetLabelsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLabelsURL(v)
	})
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLabelsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLabelsURL()
	})
}

// SetLanguagesURL sets the "languages_url" field.
func (u *RepositoryUpsertBulk) SetLanguagesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLanguagesURL(v)
	})
}

// UpdateLanguagesURL sets the "languages_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLanguagesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLanguagesURL()
	})
}

// SetMergesURL sets the "merges_url" field.
func (u *RepositoryUpsertBulk) SetMergesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMergesURL(v)
	})
}

// UpdateMergesURL sets the "merges_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateMergesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMergesURL()
	})
}

// SetMilestonesURL sets the "milestones_url" field.
func (u *RepositoryUpsertBulk) SetMilestonesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMilestonesURL(v)
	})
}

// UpdateMilestonesURL sets the "milestones_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateMilestonesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMilestonesURL()
	})
}

// SetNotificationsURL sets the "notifications_url" field.
func (u *RepositoryUpsertBulk) SetNotificationsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNotificationsURL(v)
	})
}

// UpdateNotificationsURL sets the "notifications_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateNotificationsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNotificationsURL()
	})
}

// SetPullsURL sets the "pulls_url" field.
func (u *RepositoryUpsertBulk) SetPullsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPullsURL(v)
	})
}

// UpdatePullsURL sets the "pulls_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdatePullsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePullsURL()
	})
}

// SetReleasesURL sets the "releases_url" field.
func (u *RepositoryUpsertBulk) SetReleasesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetReleasesURL(v)
	})
}

// UpdateReleasesURL sets the "releases_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateReleasesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateReleasesURL()
	})
}

// SetSSHURL sets the "ssh_url" field.
func (u *RepositoryUpsertBulk) SetSSHURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSSHURL(v)
	})
}

// UpdateSSHURL sets the "ssh_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSSHURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSSHURL()
	})
}

// SetStargazersURL sets the "stargazers_url" field.
func (u *RepositoryUpsertBulk) SetStargazersURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStargazersURL(v)
	})
}

// UpdateStargazersURL sets the "stargazers_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateStargazersURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStargazersURL()
	})
}

// SetStatusesURL sets the "statuses_url" field.
func (u *RepositoryUpsertBulk) SetStatusesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStatusesURL(v)
	})
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateStatusesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStatusesURL()
	})
}

// SetSubscribersURL sets the "subscribers_url" field.
func (u *RepositoryUpsertBulk) SetSubscribersURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscribersURL(v)
	})
}

// UpdateSubscribersURL sets the "subscribers_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSubscribersURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscribersURL()
	})
}

// SetSubscriptionURL sets the "subscription_url" field.
func (u *RepositoryUpsertBulk) SetSubscriptionURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscriptionURL(v)
	})
}

// UpdateSubscriptionURL sets the "subscription_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSubscriptionURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscriptionURL()
	})
}

// SetTagsURL sets the "tags_url" field.
func (u *RepositoryUpsertBulk) SetTagsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTagsURL(v)
	})
}

// UpdateTagsURL sets the "tags_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateTagsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTagsURL()
	})
}

// SetTeamsURL sets the "teams_url" field.
func (u *RepositoryUpsertBulk) SetTeamsURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTeamsURL(v)
	})
}

// UpdateTeamsURL sets the "teams_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateTeamsURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTeamsURL()
	})
}

// SetTreesURL sets the "trees_url" field.
func (u *RepositoryUpsertBulk) SetTreesURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTreesURL(v)
	})
}

// UpdateTreesURL sets the "trees_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateTreesURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTreesURL()
	})
}

// SetCloneURL sets the "clone_url" field.
func (u *RepositoryUpsertBulk) SetCloneURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCloneURL(v)
	})
}

// UpdateCloneURL sets the "clone_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCloneURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCloneURL()
	})
}

// SetMirrorURL sets the "mirror_url" field.
func (u *RepositoryUpsertBulk) SetMirrorURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetMirrorURL(v)
	})
}

// UpdateMirrorURL sets the "mirror_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateMirrorURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateMirrorURL()
	})
}

// ClearMirrorURL clears the value of the "mirror_url" field.
func (u *RepositoryUpsertBulk) ClearMirrorURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearMirrorURL()
	})
}

// SetHooksURL sets the "hooks_url" field.
func (u *RepositoryUpsertBulk) SetHooksURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHooksURL(v)
	})
}

// UpdateHooksURL sets the "hooks_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHooksURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHooksURL()
	})
}

// SetSvnURL sets the "svn_url" field.
func (u *RepositoryUpsertBulk) SetSvnURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSvnURL(v)
	})
}

// UpdateSvnURL sets the "svn_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSvnURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSvnURL()
	})
}

// SetHomepage sets the "homepage" field.
func (u *RepositoryUpsertBulk) SetHomepage(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHomepage() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHomepage()
	})
}

// ClearHomepage clears the value of the "homepage" field.
func (u *RepositoryUpsertBulk) ClearHomepage() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearHomepage()
	})
}

// SetLanguage sets the "language" field.
func (u *RepositoryUpsertBulk) SetLanguage(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLanguage() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLanguage()
	})
}

// ClearLanguage clears the value of the "language" field.
func (u *RepositoryUpsertBulk) ClearLanguage() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLanguage()
	})
}

// SetForksCount sets the "forks_count" field.
func (u *RepositoryUpsertBulk) SetForksCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForksCount(v)
	})
}

// AddForksCount adds v to the "forks_count" field.
func (u *RepositoryUpsertBulk) AddForksCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddForksCount(v)
	})
}

// UpdateForksCount sets the "forks_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateForksCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForksCount()
	})
}

// SetStargazersCount sets the "stargazers_count" field.
func (u *RepositoryUpsertBulk) SetStargazersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetStargazersCount(v)
	})
}

// AddStargazersCount adds v to the "stargazers_count" field.
func (u *RepositoryUpsertBulk) AddStargazersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddStargazersCount(v)
	})
}

// UpdateStargazersCount sets the "stargazers_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateStargazersCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateStargazersCount()
	})
}

// SetWatchersCount sets the "watchers_count" field.
func (u *RepositoryUpsertBulk) SetWatchersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetWatchersCount(v)
	})
}

// AddWatchersCount adds v to the "watchers_count" field.
func (u *RepositoryUpsertBulk) AddWatchersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddWatchersCount(v)
	})
}

// UpdateWatchersCount sets the "watchers_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateWatchersCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateWatchersCount()
	})
}

// SetSize sets the "size" field.
func (u *RepositoryUpsertBulk) SetSize(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *RepositoryUpsertBulk) AddSize(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSize() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSize()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *RepositoryUpsertBulk) SetDefaultBranch(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDefaultBranch() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (u *RepositoryUpsertBulk) SetOpenIssuesCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetOpenIssuesCount(v)
	})
}

// AddOpenIssuesCount adds v to the "open_issues_count" field.
func (u *RepositoryUpsertBulk) AddOpenIssuesCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddOpenIssuesCount(v)
	})
}

// UpdateOpenIssuesCount sets the "open_issues_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateOpenIssuesCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateOpenIssuesCount()
	})
}

// SetIsTemplate sets the "is_template" field.
func (u *RepositoryUpsertBulk) SetIsTemplate(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetIsTemplate(v)
	})
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateIsTemplate() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateIsTemplate()
	})
}

// SetTopics sets the "topics" field.
func (u *RepositoryUpsertBulk) SetTopics(v []string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetTopics(v)
	})
}

// UpdateTopics sets the "topics" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateTopics() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateTopics()
	})
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (u *RepositoryUpsertBulk) SetHasIssuesEnabled(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasIssuesEnabled(v)
	})
}

// UpdateHasIssuesEnabled sets the "has_issues_enabled" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasIssuesEnabled() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasIssuesEnabled()
	})
}

// SetHasProjects sets the "has_projects" field.
func (u *RepositoryUpsertBulk) SetHasProjects(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasProjects(v)
	})
}

// UpdateHasProjects sets the "has_projects" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasProjects() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasProjects()
	})
}

// SetHasWiki sets the "has_wiki" field.
func (u *RepositoryUpsertBulk) SetHasWiki(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasWiki(v)
	})
}

// UpdateHasWiki sets the "has_wiki" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasWiki() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasWiki()
	})
}

// SetHasPages sets the "has_pages" field.
func (u *RepositoryUpsertBulk) SetHasPages(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasPages(v)
	})
}

// UpdateHasPages sets the "has_pages" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasPages() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasPages()
	})
}

// SetHasDownloads sets the "has_downloads" field.
func (u *RepositoryUpsertBulk) SetHasDownloads(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasDownloads(v)
	})
}

// UpdateHasDownloads sets the "has_downloads" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasDownloads() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasDownloads()
	})
}

// SetHasDiscussions sets the "has_discussions" field.
func (u *RepositoryUpsertBulk) SetHasDiscussions(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetHasDiscussions(v)
	})
}

// UpdateHasDiscussions sets the "has_discussions" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateHasDiscussions() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateHasDiscussions()
	})
}

// SetArchived sets the "archived" field.
func (u *RepositoryUpsertBulk) SetArchived(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateArchived() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateArchived()
	})
}

// SetDisabled sets the "disabled" field.
func (u *RepositoryUpsertBulk) SetDisabled(v bool) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDisabled() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDisabled()
	})
}

// SetVisibility sets the "visibility" field.
func (u *RepositoryUpsertBulk) SetVisibility(v repository.Visibility) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateVisibility() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateVisibility()
	})
}

// ClearVisibility clears the value of the "visibility" field.
func (u *RepositoryUpsertBulk) ClearVisibility() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearVisibility()
	})
}

// SetPushedAt sets the "pushed_at" field.
func (u *RepositoryUpsertBulk) SetPushedAt(v time.Time) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetPushedAt(v)
	})
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdatePushedAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdatePushedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RepositoryUpsertBulk) SetCreatedAt(v time.Time) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateCreatedAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RepositoryUpsertBulk) SetUpdatedAt(v time.Time) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateUpdatedAt() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribersCount sets the "subscribers_count" field.
func (u *RepositoryUpsertBulk) SetSubscribersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetSubscribersCount(v)
	})
}

// AddSubscribersCount adds v to the "subscribers_count" field.
func (u *RepositoryUpsertBulk) AddSubscribersCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddSubscribersCount(v)
	})
}

// UpdateSubscribersCount sets the "subscribers_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateSubscribersCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateSubscribersCount()
	})
}

// SetNetworkCount sets the "network_count" field.
func (u *RepositoryUpsertBulk) SetNetworkCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetNetworkCount(v)
	})
}

// AddNetworkCount adds v to the "network_count" field.
func (u *RepositoryUpsertBulk) AddNetworkCount(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddNetworkCount(v)
	})
}

// UpdateNetworkCount sets the "network_count" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateNetworkCount() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateNetworkCount()
	})
}

// SetForks sets the "forks" field.
func (u *RepositoryUpsertBulk) SetForks(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetForks(v)
	})
}

// AddForks adds v to the "forks" field.
func (u *RepositoryUpsertBulk) AddForks(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddForks(v)
	})
}

// UpdateForks sets the "forks" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateForks() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateForks()
	})
}

// SetOpenIssues sets the "open_issues" field.
func (u *RepositoryUpsertBulk) SetOpenIssues(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetOpenIssues(v)
	})
}

// AddOpenIssues adds v to the "open_issues" field.
func (u *RepositoryUpsertBulk) AddOpenIssues(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddOpenIssues(v)
	})
}

// UpdateOpenIssues sets the "open_issues" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateOpenIssues() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateOpenIssues()
	})
}

// SetWatchers sets the "watchers" field.
func (u *RepositoryUpsertBulk) SetWatchers(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetWatchers(v)
	})
}

// AddWatchers adds v to the "watchers" field.
func (u *RepositoryUpsertBulk) AddWatchers(v int64) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.AddWatchers(v)
	})
}

// UpdateWatchers sets the "watchers" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateWatchers() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateWatchers()
	})
}

// SetLicense sets the "license" field.
func (u *RepositoryUpsertBulk) SetLicense(v *model.License) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateLicense() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateLicense()
	})
}

// ClearLicense clears the value of the "license" field.
func (u *RepositoryUpsertBulk) ClearLicense() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.ClearLicense()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RepositoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RepositoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
