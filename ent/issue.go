// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
	"github.com/gnolang/gh-sql/pkg/model"
)

// Issue is the model entity for the Issue schema.
type Issue struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id"`
	// URL for the issue
	URL string `json:"url"`
	// RepositoryURL holds the value of the "repository_url" field.
	RepositoryURL string `json:"repository_url"`
	// LabelsURL holds the value of the "labels_url" field.
	LabelsURL string `json:"labels_url"`
	// CommentsURL holds the value of the "comments_url" field.
	CommentsURL string `json:"comments_url"`
	// EventsURL holds the value of the "events_url" field.
	EventsURL string `json:"events_url"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url"`
	// Number uniquely identifying the issue within its repository
	Number int64 `json:"number"`
	// State of the issue; either 'open' or 'closed'
	State string `json:"state"`
	// StateReason holds the value of the "state_reason" field.
	StateReason *model.StateReason `json:"state_reason"`
	// Title of the issue
	Title string `json:"title"`
	// Body holds the value of the "body" field.
	Body *string `json:"body"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked"`
	// ActiveLockReason holds the value of the "active_lock_reason" field.
	ActiveLockReason *string `json:"active_lock_reason"`
	// CommentsCount holds the value of the "comments_count" field.
	CommentsCount int64 `json:"comments"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt *time.Time `json:"closed_at"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// Draft holds the value of the "draft" field.
	Draft bool `json:"draft"`
	// AuthorAssociation holds the value of the "author_association" field.
	AuthorAssociation model.AuthorAssociation `json:"author_association"`
	// Reactions holds the value of the "reactions" field.
	Reactions model.ReactionRollup `json:"reactions"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssueQuery when eager-loading is set.
	Edges               IssueEdges `json:"-"`
	repository_issues   *int64
	user_issues_created *int64
	selectValues        sql.SelectValues
}

// IssueEdges holds the relations/edges for other nodes in the graph.
type IssueEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Assignees holds the value of the assignees edge.
	Assignees []*User `json:"assignees,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*IssueComment `json:"comments,omitempty"`
	// Timeline holds the value of the timeline edge.
	Timeline []*TimelineEvent `json:"timeline,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AssigneesOrErr returns the Assignees value or an error if the edge
// was not loaded in eager-loading.
func (e IssueEdges) AssigneesOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Assignees, nil
	}
	return nil, &NotLoadedError{edge: "assignees"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e IssueEdges) CommentsOrErr() ([]*IssueComment, error) {
	if e.loadedTypes[3] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TimelineOrErr returns the Timeline value or an error if the edge
// was not loaded in eager-loading.
func (e IssueEdges) TimelineOrErr() ([]*TimelineEvent, error) {
	if e.loadedTypes[4] {
		return e.Timeline, nil
	}
	return nil, &NotLoadedError{edge: "timeline"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Issue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issue.FieldReactions:
			values[i] = new([]byte)
		case issue.FieldLocked, issue.FieldDraft:
			values[i] = new(sql.NullBool)
		case issue.FieldID, issue.FieldNumber, issue.FieldCommentsCount:
			values[i] = new(sql.NullInt64)
		case issue.FieldNodeID, issue.FieldURL, issue.FieldRepositoryURL, issue.FieldLabelsURL, issue.FieldCommentsURL, issue.FieldEventsURL, issue.FieldHTMLURL, issue.FieldState, issue.FieldStateReason, issue.FieldTitle, issue.FieldBody, issue.FieldActiveLockReason, issue.FieldAuthorAssociation:
			values[i] = new(sql.NullString)
		case issue.FieldClosedAt, issue.FieldCreatedAt, issue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case issue.ForeignKeys[0]: // repository_issues
			values[i] = new(sql.NullInt64)
		case issue.ForeignKeys[1]: // user_issues_created
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Issue fields.
func (i *Issue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case issue.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case issue.FieldNodeID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[j])
			} else if value.Valid {
				i.NodeID = value.String
			}
		case issue.FieldURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[j])
			} else if value.Valid {
				i.URL = value.String
			}
		case issue.FieldRepositoryURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_url", values[j])
			} else if value.Valid {
				i.RepositoryURL = value.String
			}
		case issue.FieldLabelsURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field labels_url", values[j])
			} else if value.Valid {
				i.LabelsURL = value.String
			}
		case issue.FieldCommentsURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments_url", values[j])
			} else if value.Valid {
				i.CommentsURL = value.String
			}
		case issue.FieldEventsURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field events_url", values[j])
			} else if value.Valid {
				i.EventsURL = value.String
			}
		case issue.FieldHTMLURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[j])
			} else if value.Valid {
				i.HTMLURL = value.String
			}
		case issue.FieldNumber:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[j])
			} else if value.Valid {
				i.Number = value.Int64
			}
		case issue.FieldState:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[j])
			} else if value.Valid {
				i.State = value.String
			}
		case issue.FieldStateReason:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_reason", values[j])
			} else if value.Valid {
				i.StateReason = new(model.StateReason)
				*i.StateReason = model.StateReason(value.String)
			}
		case issue.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case issue.FieldBody:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[j])
			} else if value.Valid {
				i.Body = new(string)
				*i.Body = value.String
			}
		case issue.FieldLocked:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[j])
			} else if value.Valid {
				i.Locked = value.Bool
			}
		case issue.FieldActiveLockReason:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_lock_reason", values[j])
			} else if value.Valid {
				i.ActiveLockReason = new(string)
				*i.ActiveLockReason = value.String
			}
		case issue.FieldCommentsCount:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comments_count", values[j])
			} else if value.Valid {
				i.CommentsCount = value.Int64
			}
		case issue.FieldClosedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[j])
			} else if value.Valid {
				i.ClosedAt = new(time.Time)
				*i.ClosedAt = value.Time
			}
		case issue.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case issue.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case issue.FieldDraft:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field draft", values[j])
			} else if value.Valid {
				i.Draft = value.Bool
			}
		case issue.FieldAuthorAssociation:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_association", values[j])
			} else if value.Valid {
				i.AuthorAssociation = model.AuthorAssociation(value.String)
			}
		case issue.FieldReactions:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reactions", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Reactions); err != nil {
					return fmt.Errorf("unmarshal field reactions: %w", err)
				}
			}
		case issue.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_issues", value)
			} else if value.Valid {
				i.repository_issues = new(int64)
				*i.repository_issues = int64(value.Int64)
			}
		case issue.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_issues_created", value)
			} else if value.Valid {
				i.user_issues_created = new(int64)
				*i.user_issues_created = int64(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Issue.
// This includes values selected through modifiers, order, etc.
func (i *Issue) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the Issue entity.
func (i *Issue) QueryRepository() *RepositoryQuery {
	return NewIssueClient(i.config).QueryRepository(i)
}

// QueryUser queries the "user" edge of the Issue entity.
func (i *Issue) QueryUser() *UserQuery {
	return NewIssueClient(i.config).QueryUser(i)
}

// QueryAssignees queries the "assignees" edge of the Issue entity.
func (i *Issue) QueryAssignees() *UserQuery {
	return NewIssueClient(i.config).QueryAssignees(i)
}

// QueryComments queries the "comments" edge of the Issue entity.
func (i *Issue) QueryComments() *IssueCommentQuery {
	return NewIssueClient(i.config).QueryComments(i)
}

// QueryTimeline queries the "timeline" edge of the Issue entity.
func (i *Issue) QueryTimeline() *TimelineEventQuery {
	return NewIssueClient(i.config).QueryTimeline(i)
}

// Update returns a builder for updating this Issue.
// Note that you need to call Issue.Unwrap() before calling this method if this Issue
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Issue) Update() *IssueUpdateOne {
	return NewIssueClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Issue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Issue) Unwrap() *Issue {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Issue is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Issue) String() string {
	var builder strings.Builder
	builder.WriteString("Issue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("node_id=")
	builder.WriteString(i.NodeID)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(i.URL)
	builder.WriteString(", ")
	builder.WriteString("repository_url=")
	builder.WriteString(i.RepositoryURL)
	builder.WriteString(", ")
	builder.WriteString("labels_url=")
	builder.WriteString(i.LabelsURL)
	builder.WriteString(", ")
	builder.WriteString("comments_url=")
	builder.WriteString(i.CommentsURL)
	builder.WriteString(", ")
	builder.WriteString("events_url=")
	builder.WriteString(i.EventsURL)
	builder.WriteString(", ")
	builder.WriteString("html_url=")
	builder.WriteString(i.HTMLURL)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", i.Number))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(i.State)
	builder.WriteString(", ")
	if v := i.StateReason; v != nil {
		builder.WriteString("state_reason=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	if v := i.Body; v != nil {
		builder.WriteString("body=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", i.Locked))
	builder.WriteString(", ")
	if v := i.ActiveLockReason; v != nil {
		builder.WriteString("active_lock_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("comments_count=")
	builder.WriteString(fmt.Sprintf("%v", i.CommentsCount))
	builder.WriteString(", ")
	if v := i.ClosedAt; v != nil {
		builder.WriteString("closed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("draft=")
	builder.WriteString(fmt.Sprintf("%v", i.Draft))
	builder.WriteString(", ")
	builder.WriteString("author_association=")
	builder.WriteString(fmt.Sprintf("%v", i.AuthorAssociation))
	builder.WriteString(", ")
	builder.WriteString("reactions=")
	builder.WriteString(fmt.Sprintf("%v", i.Reactions))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (i *Issue) MarshalJSON() ([]byte, error) {
	type Alias Issue
	return json.Marshal(&struct {
		*Alias
		IssueEdges
	}{
		Alias:      (*Alias)(i),
		IssueEdges: i.Edges,
	})
}

// Issues is a parsable slice of Issue.
type Issues []*Issue
