// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/pullrequest"
	"github.com/gnoverse/gh-sql/ent/repository"
	"github.com/gnoverse/gh-sql/ent/user"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// PullRequest is the model entity for the PullRequest schema.
type PullRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url"`
	// DiffURL holds the value of the "diff_url" field.
	DiffURL string `json:"diff_url"`
	// PatchURL holds the value of the "patch_url" field.
	PatchURL string `json:"patch_url"`
	// IssueURL holds the value of the "issue_url" field.
	IssueURL string `json:"issue_url"`
	// CommitsURL holds the value of the "commits_url" field.
	CommitsURL string `json:"commits_url"`
	// ReviewCommentsURL holds the value of the "review_comments_url" field.
	ReviewCommentsURL string `json:"review_comments_url"`
	// ReviewCommentURL holds the value of the "review_comment_url" field.
	ReviewCommentURL string `json:"review_comment_url"`
	// CommentsURL holds the value of the "comments_url" field.
	CommentsURL string `json:"comments_url"`
	// StatusesURL holds the value of the "statuses_url" field.
	StatusesURL string `json:"statuses_url"`
	// Number uniquely identifying the pull request within its repository.
	Number int64 `json:"number"`
	// State of this Pull Request. Either `open` or `closed`.
	State pullrequest.State `json:"state"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked"`
	// The title of the pull request.
	Title string `json:"title"`
	// Body holds the value of the "body" field.
	Body string `json:"body"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt time.Time `json:"closed_at"`
	// MergedAt holds the value of the "merged_at" field.
	MergedAt time.Time `json:"merged_at"`
	// MergeCommitSha holds the value of the "merge_commit_sha" field.
	MergeCommitSha string `json:"merge_commit_sha"`
	// Head holds the value of the "head" field.
	Head model.PRBranch `json:"head"`
	// Base holds the value of the "base" field.
	Base model.PRBranch `json:"base"`
	// Draft holds the value of the "draft" field.
	Draft *bool `json:"draft"`
	// AuthorAssociation holds the value of the "author_association" field.
	AuthorAssociation model.AuthorAssociation `json:"author_association"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PullRequestQuery when eager-loading is set.
	Edges                    PullRequestEdges `json:"-"`
	issue_pull_request       *int64
	repository_pull_requests *int64
	user_prs_created         *int64
	selectValues             sql.SelectValues
}

// PullRequestEdges holds the relations/edges for other nodes in the graph.
type PullRequestEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Issue holds the value of the issue edge.
	Issue *Issue `json:"issue,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Assignees holds the value of the assignees edge.
	Assignees []*User `json:"assignees,omitempty"`
	// RequestedReviewers holds the value of the requested_reviewers edge.
	RequestedReviewers []*User `json:"requested_reviewers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PullRequestEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// IssueOrErr returns the Issue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PullRequestEdges) IssueOrErr() (*Issue, error) {
	if e.Issue != nil {
		return e.Issue, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: issue.Label}
	}
	return nil, &NotLoadedError{edge: "issue"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PullRequestEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AssigneesOrErr returns the Assignees value or an error if the edge
// was not loaded in eager-loading.
func (e PullRequestEdges) AssigneesOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Assignees, nil
	}
	return nil, &NotLoadedError{edge: "assignees"}
}

// RequestedReviewersOrErr returns the RequestedReviewers value or an error if the edge
// was not loaded in eager-loading.
func (e PullRequestEdges) RequestedReviewersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.RequestedReviewers, nil
	}
	return nil, &NotLoadedError{edge: "requested_reviewers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PullRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pullrequest.FieldHead, pullrequest.FieldBase:
			values[i] = new([]byte)
		case pullrequest.FieldLocked, pullrequest.FieldDraft:
			values[i] = new(sql.NullBool)
		case pullrequest.FieldID, pullrequest.FieldNumber:
			values[i] = new(sql.NullInt64)
		case pullrequest.FieldURL, pullrequest.FieldNodeID, pullrequest.FieldHTMLURL, pullrequest.FieldDiffURL, pullrequest.FieldPatchURL, pullrequest.FieldIssueURL, pullrequest.FieldCommitsURL, pullrequest.FieldReviewCommentsURL, pullrequest.FieldReviewCommentURL, pullrequest.FieldCommentsURL, pullrequest.FieldStatusesURL, pullrequest.FieldState, pullrequest.FieldTitle, pullrequest.FieldBody, pullrequest.FieldMergeCommitSha, pullrequest.FieldAuthorAssociation:
			values[i] = new(sql.NullString)
		case pullrequest.FieldCreatedAt, pullrequest.FieldUpdatedAt, pullrequest.FieldClosedAt, pullrequest.FieldMergedAt:
			values[i] = new(sql.NullTime)
		case pullrequest.ForeignKeys[0]: // issue_pull_request
			values[i] = new(sql.NullInt64)
		case pullrequest.ForeignKeys[1]: // repository_pull_requests
			values[i] = new(sql.NullInt64)
		case pullrequest.ForeignKeys[2]: // user_prs_created
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PullRequest fields.
func (pr *PullRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pullrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case pullrequest.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pr.URL = value.String
			}
		case pullrequest.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				pr.NodeID = value.String
			}
		case pullrequest.FieldHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[i])
			} else if value.Valid {
				pr.HTMLURL = value.String
			}
		case pullrequest.FieldDiffURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diff_url", values[i])
			} else if value.Valid {
				pr.DiffURL = value.String
			}
		case pullrequest.FieldPatchURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patch_url", values[i])
			} else if value.Valid {
				pr.PatchURL = value.String
			}
		case pullrequest.FieldIssueURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issue_url", values[i])
			} else if value.Valid {
				pr.IssueURL = value.String
			}
		case pullrequest.FieldCommitsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commits_url", values[i])
			} else if value.Valid {
				pr.CommitsURL = value.String
			}
		case pullrequest.FieldReviewCommentsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_comments_url", values[i])
			} else if value.Valid {
				pr.ReviewCommentsURL = value.String
			}
		case pullrequest.FieldReviewCommentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_comment_url", values[i])
			} else if value.Valid {
				pr.ReviewCommentURL = value.String
			}
		case pullrequest.FieldCommentsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments_url", values[i])
			} else if value.Valid {
				pr.CommentsURL = value.String
			}
		case pullrequest.FieldStatusesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statuses_url", values[i])
			} else if value.Valid {
				pr.StatusesURL = value.String
			}
		case pullrequest.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pr.Number = value.Int64
			}
		case pullrequest.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pr.State = pullrequest.State(value.String)
			}
		case pullrequest.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				pr.Locked = value.Bool
			}
		case pullrequest.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case pullrequest.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				pr.Body = value.String
			}
		case pullrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case pullrequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case pullrequest.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				pr.ClosedAt = value.Time
			}
		case pullrequest.FieldMergedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field merged_at", values[i])
			} else if value.Valid {
				pr.MergedAt = value.Time
			}
		case pullrequest.FieldMergeCommitSha:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merge_commit_sha", values[i])
			} else if value.Valid {
				pr.MergeCommitSha = value.String
			}
		case pullrequest.FieldHead:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field head", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Head); err != nil {
					return fmt.Errorf("unmarshal field head: %w", err)
				}
			}
		case pullrequest.FieldBase:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field base", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Base); err != nil {
					return fmt.Errorf("unmarshal field base: %w", err)
				}
			}
		case pullrequest.FieldDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field draft", values[i])
			} else if value.Valid {
				pr.Draft = new(bool)
				*pr.Draft = value.Bool
			}
		case pullrequest.FieldAuthorAssociation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_association", values[i])
			} else if value.Valid {
				pr.AuthorAssociation = model.AuthorAssociation(value.String)
			}
		case pullrequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field issue_pull_request", value)
			} else if value.Valid {
				pr.issue_pull_request = new(int64)
				*pr.issue_pull_request = int64(value.Int64)
			}
		case pullrequest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_pull_requests", value)
			} else if value.Valid {
				pr.repository_pull_requests = new(int64)
				*pr.repository_pull_requests = int64(value.Int64)
			}
		case pullrequest.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_prs_created", value)
			} else if value.Valid {
				pr.user_prs_created = new(int64)
				*pr.user_prs_created = int64(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PullRequest.
// This includes values selected through modifiers, order, etc.
func (pr *PullRequest) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the PullRequest entity.
func (pr *PullRequest) QueryRepository() *RepositoryQuery {
	return NewPullRequestClient(pr.config).QueryRepository(pr)
}

// QueryIssue queries the "issue" edge of the PullRequest entity.
func (pr *PullRequest) QueryIssue() *IssueQuery {
	return NewPullRequestClient(pr.config).QueryIssue(pr)
}

// QueryUser queries the "user" edge of the PullRequest entity.
func (pr *PullRequest) QueryUser() *UserQuery {
	return NewPullRequestClient(pr.config).QueryUser(pr)
}

// QueryAssignees queries the "assignees" edge of the PullRequest entity.
func (pr *PullRequest) QueryAssignees() *UserQuery {
	return NewPullRequestClient(pr.config).QueryAssignees(pr)
}

// QueryRequestedReviewers queries the "requested_reviewers" edge of the PullRequest entity.
func (pr *PullRequest) QueryRequestedReviewers() *UserQuery {
	return NewPullRequestClient(pr.config).QueryRequestedReviewers(pr)
}

// Update returns a builder for updating this PullRequest.
// Note that you need to call PullRequest.Unwrap() before calling this method if this PullRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PullRequest) Update() *PullRequestUpdateOne {
	return NewPullRequestClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PullRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PullRequest) Unwrap() *PullRequest {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PullRequest is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PullRequest) String() string {
	var builder strings.Builder
	builder.WriteString("PullRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("url=")
	builder.WriteString(pr.URL)
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(pr.NodeID)
	builder.WriteString(", ")
	builder.WriteString("html_url=")
	builder.WriteString(pr.HTMLURL)
	builder.WriteString(", ")
	builder.WriteString("diff_url=")
	builder.WriteString(pr.DiffURL)
	builder.WriteString(", ")
	builder.WriteString("patch_url=")
	builder.WriteString(pr.PatchURL)
	builder.WriteString(", ")
	builder.WriteString("issue_url=")
	builder.WriteString(pr.IssueURL)
	builder.WriteString(", ")
	builder.WriteString("commits_url=")
	builder.WriteString(pr.CommitsURL)
	builder.WriteString(", ")
	builder.WriteString("review_comments_url=")
	builder.WriteString(pr.ReviewCommentsURL)
	builder.WriteString(", ")
	builder.WriteString("review_comment_url=")
	builder.WriteString(pr.ReviewCommentURL)
	builder.WriteString(", ")
	builder.WriteString("comments_url=")
	builder.WriteString(pr.CommentsURL)
	builder.WriteString(", ")
	builder.WriteString("statuses_url=")
	builder.WriteString(pr.StatusesURL)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", pr.Number))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", pr.State))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", pr.Locked))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(pr.Body)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(pr.ClosedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("merged_at=")
	builder.WriteString(pr.MergedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("merge_commit_sha=")
	builder.WriteString(pr.MergeCommitSha)
	builder.WriteString(", ")
	builder.WriteString("head=")
	builder.WriteString(fmt.Sprintf("%v", pr.Head))
	builder.WriteString(", ")
	builder.WriteString("base=")
	builder.WriteString(fmt.Sprintf("%v", pr.Base))
	builder.WriteString(", ")
	if v := pr.Draft; v != nil {
		builder.WriteString("draft=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("author_association=")
	builder.WriteString(fmt.Sprintf("%v", pr.AuthorAssociation))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pr *PullRequest) MarshalJSON() ([]byte, error) {
	type Alias PullRequest
	return json.Marshal(&struct {
		*Alias
		PullRequestEdges
	}{
		Alias:            (*Alias)(pr),
		PullRequestEdges: pr.Edges,
	})
}

// PullRequests is a parsable slice of PullRequest.
type PullRequests []*PullRequest
