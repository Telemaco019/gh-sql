// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/issuecomment"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLogin sets the "login" field.
func (uc *UserCreate) SetLogin(s string) *UserCreate {
	uc.mutation.SetLogin(s)
	return uc
}

// SetNodeID sets the "node_id" field.
func (uc *UserCreate) SetNodeID(s string) *UserCreate {
	uc.mutation.SetNodeID(s)
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *UserCreate) SetAvatarURL(s string) *UserCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetGravatarID sets the "gravatar_id" field.
func (uc *UserCreate) SetGravatarID(s string) *UserCreate {
	uc.mutation.SetGravatarID(s)
	return uc
}

// SetNillableGravatarID sets the "gravatar_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableGravatarID(s *string) *UserCreate {
	if s != nil {
		uc.SetGravatarID(*s)
	}
	return uc
}

// SetURL sets the "url" field.
func (uc *UserCreate) SetURL(s string) *UserCreate {
	uc.mutation.SetURL(s)
	return uc
}

// SetHTMLURL sets the "html_url" field.
func (uc *UserCreate) SetHTMLURL(s string) *UserCreate {
	uc.mutation.SetHTMLURL(s)
	return uc
}

// SetFollowersURL sets the "followers_url" field.
func (uc *UserCreate) SetFollowersURL(s string) *UserCreate {
	uc.mutation.SetFollowersURL(s)
	return uc
}

// SetFollowingURL sets the "following_url" field.
func (uc *UserCreate) SetFollowingURL(s string) *UserCreate {
	uc.mutation.SetFollowingURL(s)
	return uc
}

// SetGistsURL sets the "gists_url" field.
func (uc *UserCreate) SetGistsURL(s string) *UserCreate {
	uc.mutation.SetGistsURL(s)
	return uc
}

// SetStarredURL sets the "starred_url" field.
func (uc *UserCreate) SetStarredURL(s string) *UserCreate {
	uc.mutation.SetStarredURL(s)
	return uc
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (uc *UserCreate) SetSubscriptionsURL(s string) *UserCreate {
	uc.mutation.SetSubscriptionsURL(s)
	return uc
}

// SetOrganizationsURL sets the "organizations_url" field.
func (uc *UserCreate) SetOrganizationsURL(s string) *UserCreate {
	uc.mutation.SetOrganizationsURL(s)
	return uc
}

// SetReposURL sets the "repos_url" field.
func (uc *UserCreate) SetReposURL(s string) *UserCreate {
	uc.mutation.SetReposURL(s)
	return uc
}

// SetEventsURL sets the "events_url" field.
func (uc *UserCreate) SetEventsURL(s string) *UserCreate {
	uc.mutation.SetEventsURL(s)
	return uc
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (uc *UserCreate) SetReceivedEventsURL(s string) *UserCreate {
	uc.mutation.SetReceivedEventsURL(s)
	return uc
}

// SetType sets the "type" field.
func (uc *UserCreate) SetType(s string) *UserCreate {
	uc.mutation.SetType(s)
	return uc
}

// SetSiteAdmin sets the "site_admin" field.
func (uc *UserCreate) SetSiteAdmin(b bool) *UserCreate {
	uc.mutation.SetSiteAdmin(b)
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetCompany sets the "company" field.
func (uc *UserCreate) SetCompany(s string) *UserCreate {
	uc.mutation.SetCompany(s)
	return uc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uc *UserCreate) SetNillableCompany(s *string) *UserCreate {
	if s != nil {
		uc.SetCompany(*s)
	}
	return uc
}

// SetBlog sets the "blog" field.
func (uc *UserCreate) SetBlog(s string) *UserCreate {
	uc.mutation.SetBlog(s)
	return uc
}

// SetNillableBlog sets the "blog" field if the given value is not nil.
func (uc *UserCreate) SetNillableBlog(s *string) *UserCreate {
	if s != nil {
		uc.SetBlog(*s)
	}
	return uc
}

// SetLocation sets the "location" field.
func (uc *UserCreate) SetLocation(s string) *UserCreate {
	uc.mutation.SetLocation(s)
	return uc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocation(s *string) *UserCreate {
	if s != nil {
		uc.SetLocation(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetHireable sets the "hireable" field.
func (uc *UserCreate) SetHireable(b bool) *UserCreate {
	uc.mutation.SetHireable(b)
	return uc
}

// SetNillableHireable sets the "hireable" field if the given value is not nil.
func (uc *UserCreate) SetNillableHireable(b *bool) *UserCreate {
	if b != nil {
		uc.SetHireable(*b)
	}
	return uc
}

// SetBio sets the "bio" field.
func (uc *UserCreate) SetBio(s string) *UserCreate {
	uc.mutation.SetBio(s)
	return uc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uc *UserCreate) SetNillableBio(s *string) *UserCreate {
	if s != nil {
		uc.SetBio(*s)
	}
	return uc
}

// SetPublicRepos sets the "public_repos" field.
func (uc *UserCreate) SetPublicRepos(i int64) *UserCreate {
	uc.mutation.SetPublicRepos(i)
	return uc
}

// SetPublicGists sets the "public_gists" field.
func (uc *UserCreate) SetPublicGists(i int64) *UserCreate {
	uc.mutation.SetPublicGists(i)
	return uc
}

// SetFollowers sets the "followers" field.
func (uc *UserCreate) SetFollowers(i int64) *UserCreate {
	uc.mutation.SetFollowers(i)
	return uc
}

// SetFollowing sets the "following" field.
func (uc *UserCreate) SetFollowing(i int64) *UserCreate {
	uc.mutation.SetFollowing(i)
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uc *UserCreate) AddRepositoryIDs(ids ...int64) *UserCreate {
	uc.mutation.AddRepositoryIDs(ids...)
	return uc
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uc *UserCreate) AddRepositories(r ...*Repository) *UserCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRepositoryIDs(ids...)
}

// AddIssuesCreatedIDs adds the "issues_created" edge to the Issue entity by IDs.
func (uc *UserCreate) AddIssuesCreatedIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIssuesCreatedIDs(ids...)
	return uc
}

// AddIssuesCreated adds the "issues_created" edges to the Issue entity.
func (uc *UserCreate) AddIssuesCreated(i ...*Issue) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddIssuesCreatedIDs(ids...)
}

// AddCommentsCreatedIDs adds the "comments_created" edge to the IssueComment entity by IDs.
func (uc *UserCreate) AddCommentsCreatedIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCommentsCreatedIDs(ids...)
	return uc
}

// AddCommentsCreated adds the "comments_created" edges to the IssueComment entity.
func (uc *UserCreate) AddCommentsCreated(i ...*IssueComment) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddCommentsCreatedIDs(ids...)
}

// AddIssuesAssignedIDs adds the "issues_assigned" edge to the Issue entity by IDs.
func (uc *UserCreate) AddIssuesAssignedIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIssuesAssignedIDs(ids...)
	return uc
}

// AddIssuesAssigned adds the "issues_assigned" edges to the Issue entity.
func (uc *UserCreate) AddIssuesAssigned(i ...*Issue) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddIssuesAssignedIDs(ids...)
}

// AddIssuesClosedIDs adds the "issues_closed" edge to the Issue entity by IDs.
func (uc *UserCreate) AddIssuesClosedIDs(ids ...int64) *UserCreate {
	uc.mutation.AddIssuesClosedIDs(ids...)
	return uc
}

// AddIssuesClosed adds the "issues_closed" edges to the Issue entity.
func (uc *UserCreate) AddIssuesClosed(i ...*Issue) *UserCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddIssuesClosedIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "User.login"`)}
	}
	if _, ok := uc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "User.node_id"`)}
	}
	if _, ok := uc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New(`ent: missing required field "User.avatar_url"`)}
	}
	if _, ok := uc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "User.url"`)}
	}
	if _, ok := uc.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "User.html_url"`)}
	}
	if _, ok := uc.mutation.FollowersURL(); !ok {
		return &ValidationError{Name: "followers_url", err: errors.New(`ent: missing required field "User.followers_url"`)}
	}
	if _, ok := uc.mutation.FollowingURL(); !ok {
		return &ValidationError{Name: "following_url", err: errors.New(`ent: missing required field "User.following_url"`)}
	}
	if _, ok := uc.mutation.GistsURL(); !ok {
		return &ValidationError{Name: "gists_url", err: errors.New(`ent: missing required field "User.gists_url"`)}
	}
	if _, ok := uc.mutation.StarredURL(); !ok {
		return &ValidationError{Name: "starred_url", err: errors.New(`ent: missing required field "User.starred_url"`)}
	}
	if _, ok := uc.mutation.SubscriptionsURL(); !ok {
		return &ValidationError{Name: "subscriptions_url", err: errors.New(`ent: missing required field "User.subscriptions_url"`)}
	}
	if _, ok := uc.mutation.OrganizationsURL(); !ok {
		return &ValidationError{Name: "organizations_url", err: errors.New(`ent: missing required field "User.organizations_url"`)}
	}
	if _, ok := uc.mutation.ReposURL(); !ok {
		return &ValidationError{Name: "repos_url", err: errors.New(`ent: missing required field "User.repos_url"`)}
	}
	if _, ok := uc.mutation.EventsURL(); !ok {
		return &ValidationError{Name: "events_url", err: errors.New(`ent: missing required field "User.events_url"`)}
	}
	if _, ok := uc.mutation.ReceivedEventsURL(); !ok {
		return &ValidationError{Name: "received_events_url", err: errors.New(`ent: missing required field "User.received_events_url"`)}
	}
	if _, ok := uc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "User.type"`)}
	}
	if _, ok := uc.mutation.SiteAdmin(); !ok {
		return &ValidationError{Name: "site_admin", err: errors.New(`ent: missing required field "User.site_admin"`)}
	}
	if _, ok := uc.mutation.PublicRepos(); !ok {
		return &ValidationError{Name: "public_repos", err: errors.New(`ent: missing required field "User.public_repos"`)}
	}
	if _, ok := uc.mutation.PublicGists(); !ok {
		return &ValidationError{Name: "public_gists", err: errors.New(`ent: missing required field "User.public_gists"`)}
	}
	if _, ok := uc.mutation.Followers(); !ok {
		return &ValidationError{Name: "followers", err: errors.New(`ent: missing required field "User.followers"`)}
	}
	if _, ok := uc.mutation.Following(); !ok {
		return &ValidationError{Name: "following", err: errors.New(`ent: missing required field "User.following"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
		_node.Login = value
	}
	if value, ok := uc.mutation.NodeID(); ok {
		_spec.SetField(user.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := uc.mutation.GravatarID(); ok {
		_spec.SetField(user.FieldGravatarID, field.TypeString, value)
		_node.GravatarID = value
	}
	if value, ok := uc.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := uc.mutation.HTMLURL(); ok {
		_spec.SetField(user.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := uc.mutation.FollowersURL(); ok {
		_spec.SetField(user.FieldFollowersURL, field.TypeString, value)
		_node.FollowersURL = value
	}
	if value, ok := uc.mutation.FollowingURL(); ok {
		_spec.SetField(user.FieldFollowingURL, field.TypeString, value)
		_node.FollowingURL = value
	}
	if value, ok := uc.mutation.GistsURL(); ok {
		_spec.SetField(user.FieldGistsURL, field.TypeString, value)
		_node.GistsURL = value
	}
	if value, ok := uc.mutation.StarredURL(); ok {
		_spec.SetField(user.FieldStarredURL, field.TypeString, value)
		_node.StarredURL = value
	}
	if value, ok := uc.mutation.SubscriptionsURL(); ok {
		_spec.SetField(user.FieldSubscriptionsURL, field.TypeString, value)
		_node.SubscriptionsURL = value
	}
	if value, ok := uc.mutation.OrganizationsURL(); ok {
		_spec.SetField(user.FieldOrganizationsURL, field.TypeString, value)
		_node.OrganizationsURL = value
	}
	if value, ok := uc.mutation.ReposURL(); ok {
		_spec.SetField(user.FieldReposURL, field.TypeString, value)
		_node.ReposURL = value
	}
	if value, ok := uc.mutation.EventsURL(); ok {
		_spec.SetField(user.FieldEventsURL, field.TypeString, value)
		_node.EventsURL = value
	}
	if value, ok := uc.mutation.ReceivedEventsURL(); ok {
		_spec.SetField(user.FieldReceivedEventsURL, field.TypeString, value)
		_node.ReceivedEventsURL = value
	}
	if value, ok := uc.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := uc.mutation.SiteAdmin(); ok {
		_spec.SetField(user.FieldSiteAdmin, field.TypeBool, value)
		_node.SiteAdmin = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := uc.mutation.Blog(); ok {
		_spec.SetField(user.FieldBlog, field.TypeString, value)
		_node.Blog = value
	}
	if value, ok := uc.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Hireable(); ok {
		_spec.SetField(user.FieldHireable, field.TypeBool, value)
		_node.Hireable = value
	}
	if value, ok := uc.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := uc.mutation.PublicRepos(); ok {
		_spec.SetField(user.FieldPublicRepos, field.TypeInt64, value)
		_node.PublicRepos = value
	}
	if value, ok := uc.mutation.PublicGists(); ok {
		_spec.SetField(user.FieldPublicGists, field.TypeInt64, value)
		_node.PublicGists = value
	}
	if value, ok := uc.mutation.Followers(); ok {
		_spec.SetField(user.FieldFollowers, field.TypeInt64, value)
		_node.Followers = value
	}
	if value, ok := uc.mutation.Following(); ok {
		_spec.SetField(user.FieldFollowing, field.TypeInt64, value)
		_node.Following = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IssuesCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CommentsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IssuesAssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IssuesClosedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetLogin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetLogin sets the "login" field.
func (u *UserUpsert) SetLogin(v string) *UserUpsert {
	u.Set(user.FieldLogin, v)
	return u
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsert) UpdateLogin() *UserUpsert {
	u.SetExcluded(user.FieldLogin)
	return u
}

// SetNodeID sets the "node_id" field.
func (u *UserUpsert) SetNodeID(v string) *UserUpsert {
	u.Set(user.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateNodeID() *UserUpsert {
	u.SetExcluded(user.FieldNodeID)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsert) SetAvatarURL(v string) *UserUpsert {
	u.Set(user.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarURL() *UserUpsert {
	u.SetExcluded(user.FieldAvatarURL)
	return u
}

// SetGravatarID sets the "gravatar_id" field.
func (u *UserUpsert) SetGravatarID(v string) *UserUpsert {
	u.Set(user.FieldGravatarID, v)
	return u
}

// UpdateGravatarID sets the "gravatar_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateGravatarID() *UserUpsert {
	u.SetExcluded(user.FieldGravatarID)
	return u
}

// ClearGravatarID clears the value of the "gravatar_id" field.
func (u *UserUpsert) ClearGravatarID() *UserUpsert {
	u.SetNull(user.FieldGravatarID)
	return u
}

// SetURL sets the "url" field.
func (u *UserUpsert) SetURL(v string) *UserUpsert {
	u.Set(user.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsert) UpdateURL() *UserUpsert {
	u.SetExcluded(user.FieldURL)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *UserUpsert) SetHTMLURL(v string) *UserUpsert {
	u.Set(user.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateHTMLURL() *UserUpsert {
	u.SetExcluded(user.FieldHTMLURL)
	return u
}

// SetFollowersURL sets the "followers_url" field.
func (u *UserUpsert) SetFollowersURL(v string) *UserUpsert {
	u.Set(user.FieldFollowersURL, v)
	return u
}

// UpdateFollowersURL sets the "followers_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateFollowersURL() *UserUpsert {
	u.SetExcluded(user.FieldFollowersURL)
	return u
}

// SetFollowingURL sets the "following_url" field.
func (u *UserUpsert) SetFollowingURL(v string) *UserUpsert {
	u.Set(user.FieldFollowingURL, v)
	return u
}

// UpdateFollowingURL sets the "following_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateFollowingURL() *UserUpsert {
	u.SetExcluded(user.FieldFollowingURL)
	return u
}

// SetGistsURL sets the "gists_url" field.
func (u *UserUpsert) SetGistsURL(v string) *UserUpsert {
	u.Set(user.FieldGistsURL, v)
	return u
}

// UpdateGistsURL sets the "gists_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateGistsURL() *UserUpsert {
	u.SetExcluded(user.FieldGistsURL)
	return u
}

// SetStarredURL sets the "starred_url" field.
func (u *UserUpsert) SetStarredURL(v string) *UserUpsert {
	u.Set(user.FieldStarredURL, v)
	return u
}

// UpdateStarredURL sets the "starred_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateStarredURL() *UserUpsert {
	u.SetExcluded(user.FieldStarredURL)
	return u
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (u *UserUpsert) SetSubscriptionsURL(v string) *UserUpsert {
	u.Set(user.FieldSubscriptionsURL, v)
	return u
}

// UpdateSubscriptionsURL sets the "subscriptions_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateSubscriptionsURL() *UserUpsert {
	u.SetExcluded(user.FieldSubscriptionsURL)
	return u
}

// SetOrganizationsURL sets the "organizations_url" field.
func (u *UserUpsert) SetOrganizationsURL(v string) *UserUpsert {
	u.Set(user.FieldOrganizationsURL, v)
	return u
}

// UpdateOrganizationsURL sets the "organizations_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateOrganizationsURL() *UserUpsert {
	u.SetExcluded(user.FieldOrganizationsURL)
	return u
}

// SetReposURL sets the "repos_url" field.
func (u *UserUpsert) SetReposURL(v string) *UserUpsert {
	u.Set(user.FieldReposURL, v)
	return u
}

// UpdateReposURL sets the "repos_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateReposURL() *UserUpsert {
	u.SetExcluded(user.FieldReposURL)
	return u
}

// SetEventsURL sets the "events_url" field.
func (u *UserUpsert) SetEventsURL(v string) *UserUpsert {
	u.Set(user.FieldEventsURL, v)
	return u
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateEventsURL() *UserUpsert {
	u.SetExcluded(user.FieldEventsURL)
	return u
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (u *UserUpsert) SetReceivedEventsURL(v string) *UserUpsert {
	u.Set(user.FieldReceivedEventsURL, v)
	return u
}

// UpdateReceivedEventsURL sets the "received_events_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateReceivedEventsURL() *UserUpsert {
	u.SetExcluded(user.FieldReceivedEventsURL)
	return u
}

// SetType sets the "type" field.
func (u *UserUpsert) SetType(v string) *UserUpsert {
	u.Set(user.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsert) UpdateType() *UserUpsert {
	u.SetExcluded(user.FieldType)
	return u
}

// SetSiteAdmin sets the "site_admin" field.
func (u *UserUpsert) SetSiteAdmin(v bool) *UserUpsert {
	u.Set(user.FieldSiteAdmin, v)
	return u
}

// UpdateSiteAdmin sets the "site_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateSiteAdmin() *UserUpsert {
	u.SetExcluded(user.FieldSiteAdmin)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserUpsert) ClearName() *UserUpsert {
	u.SetNull(user.FieldName)
	return u
}

// SetCompany sets the "company" field.
func (u *UserUpsert) SetCompany(v string) *UserUpsert {
	u.Set(user.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsert) UpdateCompany() *UserUpsert {
	u.SetExcluded(user.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *UserUpsert) ClearCompany() *UserUpsert {
	u.SetNull(user.FieldCompany)
	return u
}

// SetBlog sets the "blog" field.
func (u *UserUpsert) SetBlog(v string) *UserUpsert {
	u.Set(user.FieldBlog, v)
	return u
}

// UpdateBlog sets the "blog" field to the value that was provided on create.
func (u *UserUpsert) UpdateBlog() *UserUpsert {
	u.SetExcluded(user.FieldBlog)
	return u
}

// ClearBlog clears the value of the "blog" field.
func (u *UserUpsert) ClearBlog() *UserUpsert {
	u.SetNull(user.FieldBlog)
	return u
}

// SetLocation sets the "location" field.
func (u *UserUpsert) SetLocation(v string) *UserUpsert {
	u.Set(user.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsert) UpdateLocation() *UserUpsert {
	u.SetExcluded(user.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsert) ClearLocation() *UserUpsert {
	u.SetNull(user.FieldLocation)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetHireable sets the "hireable" field.
func (u *UserUpsert) SetHireable(v bool) *UserUpsert {
	u.Set(user.FieldHireable, v)
	return u
}

// UpdateHireable sets the "hireable" field to the value that was provided on create.
func (u *UserUpsert) UpdateHireable() *UserUpsert {
	u.SetExcluded(user.FieldHireable)
	return u
}

// ClearHireable clears the value of the "hireable" field.
func (u *UserUpsert) ClearHireable() *UserUpsert {
	u.SetNull(user.FieldHireable)
	return u
}

// SetBio sets the "bio" field.
func (u *UserUpsert) SetBio(v string) *UserUpsert {
	u.Set(user.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsert) UpdateBio() *UserUpsert {
	u.SetExcluded(user.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsert) ClearBio() *UserUpsert {
	u.SetNull(user.FieldBio)
	return u
}

// SetPublicRepos sets the "public_repos" field.
func (u *UserUpsert) SetPublicRepos(v int64) *UserUpsert {
	u.Set(user.FieldPublicRepos, v)
	return u
}

// UpdatePublicRepos sets the "public_repos" field to the value that was provided on create.
func (u *UserUpsert) UpdatePublicRepos() *UserUpsert {
	u.SetExcluded(user.FieldPublicRepos)
	return u
}

// AddPublicRepos adds v to the "public_repos" field.
func (u *UserUpsert) AddPublicRepos(v int64) *UserUpsert {
	u.Add(user.FieldPublicRepos, v)
	return u
}

// SetPublicGists sets the "public_gists" field.
func (u *UserUpsert) SetPublicGists(v int64) *UserUpsert {
	u.Set(user.FieldPublicGists, v)
	return u
}

// UpdatePublicGists sets the "public_gists" field to the value that was provided on create.
func (u *UserUpsert) UpdatePublicGists() *UserUpsert {
	u.SetExcluded(user.FieldPublicGists)
	return u
}

// AddPublicGists adds v to the "public_gists" field.
func (u *UserUpsert) AddPublicGists(v int64) *UserUpsert {
	u.Add(user.FieldPublicGists, v)
	return u
}

// SetFollowers sets the "followers" field.
func (u *UserUpsert) SetFollowers(v int64) *UserUpsert {
	u.Set(user.FieldFollowers, v)
	return u
}

// UpdateFollowers sets the "followers" field to the value that was provided on create.
func (u *UserUpsert) UpdateFollowers() *UserUpsert {
	u.SetExcluded(user.FieldFollowers)
	return u
}

// AddFollowers adds v to the "followers" field.
func (u *UserUpsert) AddFollowers(v int64) *UserUpsert {
	u.Add(user.FieldFollowers, v)
	return u
}

// SetFollowing sets the "following" field.
func (u *UserUpsert) SetFollowing(v int64) *UserUpsert {
	u.Set(user.FieldFollowing, v)
	return u
}

// UpdateFollowing sets the "following" field to the value that was provided on create.
func (u *UserUpsert) UpdateFollowing() *UserUpsert {
	u.SetExcluded(user.FieldFollowing)
	return u
}

// AddFollowing adds v to the "following" field.
func (u *UserUpsert) AddFollowing(v int64) *UserUpsert {
	u.Add(user.FieldFollowing, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UserUpsertOne) SetLogin(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetNodeID sets the "node_id" field.
func (u *UserUpsertOne) SetNodeID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNodeID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNodeID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertOne) SetAvatarURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetGravatarID sets the "gravatar_id" field.
func (u *UserUpsertOne) SetGravatarID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGravatarID(v)
	})
}

// UpdateGravatarID sets the "gravatar_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGravatarID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGravatarID()
	})
}

// ClearGravatarID clears the value of the "gravatar_id" field.
func (u *UserUpsertOne) ClearGravatarID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearGravatarID()
	})
}

// SetURL sets the "url" field.
func (u *UserUpsertOne) SetURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateURL()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *UserUpsertOne) SetHTMLURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHTMLURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetFollowersURL sets the "followers_url" field.
func (u *UserUpsertOne) SetFollowersURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowersURL(v)
	})
}

// UpdateFollowersURL sets the "followers_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFollowersURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowersURL()
	})
}

// SetFollowingURL sets the "following_url" field.
func (u *UserUpsertOne) SetFollowingURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowingURL(v)
	})
}

// UpdateFollowingURL sets the "following_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFollowingURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowingURL()
	})
}

// SetGistsURL sets the "gists_url" field.
func (u *UserUpsertOne) SetGistsURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGistsURL(v)
	})
}

// UpdateGistsURL sets the "gists_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGistsURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGistsURL()
	})
}

// SetStarredURL sets the "starred_url" field.
func (u *UserUpsertOne) SetStarredURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStarredURL(v)
	})
}

// UpdateStarredURL sets the "starred_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStarredURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStarredURL()
	})
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (u *UserUpsertOne) SetSubscriptionsURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSubscriptionsURL(v)
	})
}

// UpdateSubscriptionsURL sets the "subscriptions_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSubscriptionsURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSubscriptionsURL()
	})
}

// SetOrganizationsURL sets the "organizations_url" field.
func (u *UserUpsertOne) SetOrganizationsURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOrganizationsURL(v)
	})
}

// UpdateOrganizationsURL sets the "organizations_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOrganizationsURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrganizationsURL()
	})
}

// SetReposURL sets the "repos_url" field.
func (u *UserUpsertOne) SetReposURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetReposURL(v)
	})
}

// UpdateReposURL sets the "repos_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateReposURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateReposURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *UserUpsertOne) SetEventsURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEventsURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEventsURL()
	})
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (u *UserUpsertOne) SetReceivedEventsURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetReceivedEventsURL(v)
	})
}

// UpdateReceivedEventsURL sets the "received_events_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateReceivedEventsURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateReceivedEventsURL()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertOne) SetType(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// SetSiteAdmin sets the "site_admin" field.
func (u *UserUpsertOne) SetSiteAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSiteAdmin(v)
	})
}

// UpdateSiteAdmin sets the "site_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSiteAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSiteAdmin()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertOne) ClearName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetCompany sets the "company" field.
func (u *UserUpsertOne) SetCompany(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCompany() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *UserUpsertOne) ClearCompany() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCompany()
	})
}

// SetBlog sets the "blog" field.
func (u *UserUpsertOne) SetBlog(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBlog(v)
	})
}

// UpdateBlog sets the "blog" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBlog() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBlog()
	})
}

// ClearBlog clears the value of the "blog" field.
func (u *UserUpsertOne) ClearBlog() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBlog()
	})
}

// SetLocation sets the "location" field.
func (u *UserUpsertOne) SetLocation(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLocation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsertOne) ClearLocation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocation()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetHireable sets the "hireable" field.
func (u *UserUpsertOne) SetHireable(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHireable(v)
	})
}

// UpdateHireable sets the "hireable" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHireable() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHireable()
	})
}

// ClearHireable clears the value of the "hireable" field.
func (u *UserUpsertOne) ClearHireable() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearHireable()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertOne) SetBio(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertOne) ClearBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetPublicRepos sets the "public_repos" field.
func (u *UserUpsertOne) SetPublicRepos(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicRepos(v)
	})
}

// AddPublicRepos adds v to the "public_repos" field.
func (u *UserUpsertOne) AddPublicRepos(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicRepos(v)
	})
}

// UpdatePublicRepos sets the "public_repos" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePublicRepos() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicRepos()
	})
}

// SetPublicGists sets the "public_gists" field.
func (u *UserUpsertOne) SetPublicGists(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicGists(v)
	})
}

// AddPublicGists adds v to the "public_gists" field.
func (u *UserUpsertOne) AddPublicGists(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicGists(v)
	})
}

// UpdatePublicGists sets the "public_gists" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePublicGists() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicGists()
	})
}

// SetFollowers sets the "followers" field.
func (u *UserUpsertOne) SetFollowers(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowers(v)
	})
}

// AddFollowers adds v to the "followers" field.
func (u *UserUpsertOne) AddFollowers(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddFollowers(v)
	})
}

// UpdateFollowers sets the "followers" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFollowers() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowers()
	})
}

// SetFollowing sets the "following" field.
func (u *UserUpsertOne) SetFollowing(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowing(v)
	})
}

// AddFollowing adds v to the "following" field.
func (u *UserUpsertOne) AddFollowing(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddFollowing(v)
	})
}

// UpdateFollowing sets the "following" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFollowing() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowing()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UserUpsertBulk) SetLogin(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetNodeID sets the "node_id" field.
func (u *UserUpsertBulk) SetNodeID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNodeID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNodeID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertBulk) SetAvatarURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetGravatarID sets the "gravatar_id" field.
func (u *UserUpsertBulk) SetGravatarID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGravatarID(v)
	})
}

// UpdateGravatarID sets the "gravatar_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGravatarID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGravatarID()
	})
}

// ClearGravatarID clears the value of the "gravatar_id" field.
func (u *UserUpsertBulk) ClearGravatarID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearGravatarID()
	})
}

// SetURL sets the "url" field.
func (u *UserUpsertBulk) SetURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateURL()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *UserUpsertBulk) SetHTMLURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHTMLURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetFollowersURL sets the "followers_url" field.
func (u *UserUpsertBulk) SetFollowersURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowersURL(v)
	})
}

// UpdateFollowersURL sets the "followers_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFollowersURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowersURL()
	})
}

// SetFollowingURL sets the "following_url" field.
func (u *UserUpsertBulk) SetFollowingURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowingURL(v)
	})
}

// UpdateFollowingURL sets the "following_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFollowingURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowingURL()
	})
}

// SetGistsURL sets the "gists_url" field.
func (u *UserUpsertBulk) SetGistsURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGistsURL(v)
	})
}

// UpdateGistsURL sets the "gists_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGistsURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGistsURL()
	})
}

// SetStarredURL sets the "starred_url" field.
func (u *UserUpsertBulk) SetStarredURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStarredURL(v)
	})
}

// UpdateStarredURL sets the "starred_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStarredURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStarredURL()
	})
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (u *UserUpsertBulk) SetSubscriptionsURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSubscriptionsURL(v)
	})
}

// UpdateSubscriptionsURL sets the "subscriptions_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSubscriptionsURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSubscriptionsURL()
	})
}

// SetOrganizationsURL sets the "organizations_url" field.
func (u *UserUpsertBulk) SetOrganizationsURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOrganizationsURL(v)
	})
}

// UpdateOrganizationsURL sets the "organizations_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOrganizationsURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrganizationsURL()
	})
}

// SetReposURL sets the "repos_url" field.
func (u *UserUpsertBulk) SetReposURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetReposURL(v)
	})
}

// UpdateReposURL sets the "repos_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateReposURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateReposURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *UserUpsertBulk) SetEventsURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEventsURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEventsURL()
	})
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (u *UserUpsertBulk) SetReceivedEventsURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetReceivedEventsURL(v)
	})
}

// UpdateReceivedEventsURL sets the "received_events_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateReceivedEventsURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateReceivedEventsURL()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertBulk) SetType(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// SetSiteAdmin sets the "site_admin" field.
func (u *UserUpsertBulk) SetSiteAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSiteAdmin(v)
	})
}

// UpdateSiteAdmin sets the "site_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSiteAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSiteAdmin()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertBulk) ClearName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetCompany sets the "company" field.
func (u *UserUpsertBulk) SetCompany(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCompany() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *UserUpsertBulk) ClearCompany() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCompany()
	})
}

// SetBlog sets the "blog" field.
func (u *UserUpsertBulk) SetBlog(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBlog(v)
	})
}

// UpdateBlog sets the "blog" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBlog() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBlog()
	})
}

// ClearBlog clears the value of the "blog" field.
func (u *UserUpsertBulk) ClearBlog() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBlog()
	})
}

// SetLocation sets the "location" field.
func (u *UserUpsertBulk) SetLocation(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLocation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UserUpsertBulk) ClearLocation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocation()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetHireable sets the "hireable" field.
func (u *UserUpsertBulk) SetHireable(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHireable(v)
	})
}

// UpdateHireable sets the "hireable" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHireable() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHireable()
	})
}

// ClearHireable clears the value of the "hireable" field.
func (u *UserUpsertBulk) ClearHireable() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearHireable()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertBulk) SetBio(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertBulk) ClearBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetPublicRepos sets the "public_repos" field.
func (u *UserUpsertBulk) SetPublicRepos(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicRepos(v)
	})
}

// AddPublicRepos adds v to the "public_repos" field.
func (u *UserUpsertBulk) AddPublicRepos(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicRepos(v)
	})
}

// UpdatePublicRepos sets the "public_repos" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePublicRepos() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicRepos()
	})
}

// SetPublicGists sets the "public_gists" field.
func (u *UserUpsertBulk) SetPublicGists(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicGists(v)
	})
}

// AddPublicGists adds v to the "public_gists" field.
func (u *UserUpsertBulk) AddPublicGists(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicGists(v)
	})
}

// UpdatePublicGists sets the "public_gists" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePublicGists() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicGists()
	})
}

// SetFollowers sets the "followers" field.
func (u *UserUpsertBulk) SetFollowers(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowers(v)
	})
}

// AddFollowers adds v to the "followers" field.
func (u *UserUpsertBulk) AddFollowers(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddFollowers(v)
	})
}

// UpdateFollowers sets the "followers" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFollowers() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowers()
	})
}

// SetFollowing sets the "following" field.
func (u *UserUpsertBulk) SetFollowing(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFollowing(v)
	})
}

// AddFollowing adds v to the "following" field.
func (u *UserUpsertBulk) AddFollowing(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddFollowing(v)
	})
}

// UpdateFollowing sets the "following" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFollowing() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFollowing()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
