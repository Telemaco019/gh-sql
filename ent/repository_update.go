// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/predicate"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetNodeID sets the "node_id" field.
func (ru *RepositoryUpdate) SetNodeID(s string) *RepositoryUpdate {
	ru.mutation.SetNodeID(s)
	return ru
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableNodeID(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetNodeID(*s)
	}
	return ru
}

// SetName sets the "name" field.
func (ru *RepositoryUpdate) SetName(s string) *RepositoryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetFullName sets the "full_name" field.
func (ru *RepositoryUpdate) SetFullName(s string) *RepositoryUpdate {
	ru.mutation.SetFullName(s)
	return ru
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableFullName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetFullName(*s)
	}
	return ru
}

// SetPrivate sets the "private" field.
func (ru *RepositoryUpdate) SetPrivate(b bool) *RepositoryUpdate {
	ru.mutation.SetPrivate(b)
	return ru
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillablePrivate(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetPrivate(*b)
	}
	return ru
}

// SetHTMLURL sets the "html_url" field.
func (ru *RepositoryUpdate) SetHTMLURL(s string) *RepositoryUpdate {
	ru.mutation.SetHTMLURL(s)
	return ru
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHTMLURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetHTMLURL(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RepositoryUpdate) SetDescription(s string) *RepositoryUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDescription(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RepositoryUpdate) ClearDescription() *RepositoryUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetFork sets the "fork" field.
func (ru *RepositoryUpdate) SetFork(b bool) *RepositoryUpdate {
	ru.mutation.SetFork(b)
	return ru
}

// SetNillableFork sets the "fork" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableFork(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetFork(*b)
	}
	return ru
}

// SetURL sets the "url" field.
func (ru *RepositoryUpdate) SetURL(s string) *RepositoryUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetURL(*s)
	}
	return ru
}

// SetArchiveURL sets the "archive_url" field.
func (ru *RepositoryUpdate) SetArchiveURL(s string) *RepositoryUpdate {
	ru.mutation.SetArchiveURL(s)
	return ru
}

// SetNillableArchiveURL sets the "archive_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableArchiveURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetArchiveURL(*s)
	}
	return ru
}

// SetAssigneesURL sets the "assignees_url" field.
func (ru *RepositoryUpdate) SetAssigneesURL(s string) *RepositoryUpdate {
	ru.mutation.SetAssigneesURL(s)
	return ru
}

// SetNillableAssigneesURL sets the "assignees_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableAssigneesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetAssigneesURL(*s)
	}
	return ru
}

// SetBlobsURL sets the "blobs_url" field.
func (ru *RepositoryUpdate) SetBlobsURL(s string) *RepositoryUpdate {
	ru.mutation.SetBlobsURL(s)
	return ru
}

// SetNillableBlobsURL sets the "blobs_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableBlobsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetBlobsURL(*s)
	}
	return ru
}

// SetBranchesURL sets the "branches_url" field.
func (ru *RepositoryUpdate) SetBranchesURL(s string) *RepositoryUpdate {
	ru.mutation.SetBranchesURL(s)
	return ru
}

// SetNillableBranchesURL sets the "branches_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableBranchesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetBranchesURL(*s)
	}
	return ru
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (ru *RepositoryUpdate) SetCollaboratorsURL(s string) *RepositoryUpdate {
	ru.mutation.SetCollaboratorsURL(s)
	return ru
}

// SetNillableCollaboratorsURL sets the "collaborators_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCollaboratorsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetCollaboratorsURL(*s)
	}
	return ru
}

// SetCommentsURL sets the "comments_url" field.
func (ru *RepositoryUpdate) SetCommentsURL(s string) *RepositoryUpdate {
	ru.mutation.SetCommentsURL(s)
	return ru
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCommentsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetCommentsURL(*s)
	}
	return ru
}

// SetCommitsURL sets the "commits_url" field.
func (ru *RepositoryUpdate) SetCommitsURL(s string) *RepositoryUpdate {
	ru.mutation.SetCommitsURL(s)
	return ru
}

// SetNillableCommitsURL sets the "commits_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCommitsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetCommitsURL(*s)
	}
	return ru
}

// SetCompareURL sets the "compare_url" field.
func (ru *RepositoryUpdate) SetCompareURL(s string) *RepositoryUpdate {
	ru.mutation.SetCompareURL(s)
	return ru
}

// SetNillableCompareURL sets the "compare_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCompareURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetCompareURL(*s)
	}
	return ru
}

// SetContentsURL sets the "contents_url" field.
func (ru *RepositoryUpdate) SetContentsURL(s string) *RepositoryUpdate {
	ru.mutation.SetContentsURL(s)
	return ru
}

// SetNillableContentsURL sets the "contents_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableContentsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetContentsURL(*s)
	}
	return ru
}

// SetContributorsURL sets the "contributors_url" field.
func (ru *RepositoryUpdate) SetContributorsURL(s string) *RepositoryUpdate {
	ru.mutation.SetContributorsURL(s)
	return ru
}

// SetNillableContributorsURL sets the "contributors_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableContributorsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetContributorsURL(*s)
	}
	return ru
}

// SetDeploymentsURL sets the "deployments_url" field.
func (ru *RepositoryUpdate) SetDeploymentsURL(s string) *RepositoryUpdate {
	ru.mutation.SetDeploymentsURL(s)
	return ru
}

// SetNillableDeploymentsURL sets the "deployments_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDeploymentsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDeploymentsURL(*s)
	}
	return ru
}

// SetDownloadsURL sets the "downloads_url" field.
func (ru *RepositoryUpdate) SetDownloadsURL(s string) *RepositoryUpdate {
	ru.mutation.SetDownloadsURL(s)
	return ru
}

// SetNillableDownloadsURL sets the "downloads_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDownloadsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDownloadsURL(*s)
	}
	return ru
}

// SetEventsURL sets the "events_url" field.
func (ru *RepositoryUpdate) SetEventsURL(s string) *RepositoryUpdate {
	ru.mutation.SetEventsURL(s)
	return ru
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableEventsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetEventsURL(*s)
	}
	return ru
}

// SetForksURL sets the "forks_url" field.
func (ru *RepositoryUpdate) SetForksURL(s string) *RepositoryUpdate {
	ru.mutation.SetForksURL(s)
	return ru
}

// SetNillableForksURL sets the "forks_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableForksURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetForksURL(*s)
	}
	return ru
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (ru *RepositoryUpdate) SetGitCommitsURL(s string) *RepositoryUpdate {
	ru.mutation.SetGitCommitsURL(s)
	return ru
}

// SetNillableGitCommitsURL sets the "git_commits_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGitCommitsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetGitCommitsURL(*s)
	}
	return ru
}

// SetGitRefsURL sets the "git_refs_url" field.
func (ru *RepositoryUpdate) SetGitRefsURL(s string) *RepositoryUpdate {
	ru.mutation.SetGitRefsURL(s)
	return ru
}

// SetNillableGitRefsURL sets the "git_refs_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGitRefsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetGitRefsURL(*s)
	}
	return ru
}

// SetGitTagsURL sets the "git_tags_url" field.
func (ru *RepositoryUpdate) SetGitTagsURL(s string) *RepositoryUpdate {
	ru.mutation.SetGitTagsURL(s)
	return ru
}

// SetNillableGitTagsURL sets the "git_tags_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGitTagsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetGitTagsURL(*s)
	}
	return ru
}

// SetGitURL sets the "git_url" field.
func (ru *RepositoryUpdate) SetGitURL(s string) *RepositoryUpdate {
	ru.mutation.SetGitURL(s)
	return ru
}

// SetNillableGitURL sets the "git_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGitURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetGitURL(*s)
	}
	return ru
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (ru *RepositoryUpdate) SetIssueCommentURL(s string) *RepositoryUpdate {
	ru.mutation.SetIssueCommentURL(s)
	return ru
}

// SetNillableIssueCommentURL sets the "issue_comment_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableIssueCommentURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetIssueCommentURL(*s)
	}
	return ru
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (ru *RepositoryUpdate) SetIssueEventsURL(s string) *RepositoryUpdate {
	ru.mutation.SetIssueEventsURL(s)
	return ru
}

// SetNillableIssueEventsURL sets the "issue_events_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableIssueEventsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetIssueEventsURL(*s)
	}
	return ru
}

// SetIssuesURL sets the "issues_url" field.
func (ru *RepositoryUpdate) SetIssuesURL(s string) *RepositoryUpdate {
	ru.mutation.SetIssuesURL(s)
	return ru
}

// SetNillableIssuesURL sets the "issues_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableIssuesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetIssuesURL(*s)
	}
	return ru
}

// SetKeysURL sets the "keys_url" field.
func (ru *RepositoryUpdate) SetKeysURL(s string) *RepositoryUpdate {
	ru.mutation.SetKeysURL(s)
	return ru
}

// SetNillableKeysURL sets the "keys_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableKeysURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetKeysURL(*s)
	}
	return ru
}

// SetLabelsURL sets the "labels_url" field.
func (ru *RepositoryUpdate) SetLabelsURL(s string) *RepositoryUpdate {
	ru.mutation.SetLabelsURL(s)
	return ru
}

// SetNillableLabelsURL sets the "labels_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableLabelsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetLabelsURL(*s)
	}
	return ru
}

// SetLanguagesURL sets the "languages_url" field.
func (ru *RepositoryUpdate) SetLanguagesURL(s string) *RepositoryUpdate {
	ru.mutation.SetLanguagesURL(s)
	return ru
}

// SetNillableLanguagesURL sets the "languages_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableLanguagesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetLanguagesURL(*s)
	}
	return ru
}

// SetMergesURL sets the "merges_url" field.
func (ru *RepositoryUpdate) SetMergesURL(s string) *RepositoryUpdate {
	ru.mutation.SetMergesURL(s)
	return ru
}

// SetNillableMergesURL sets the "merges_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableMergesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetMergesURL(*s)
	}
	return ru
}

// SetMilestonesURL sets the "milestones_url" field.
func (ru *RepositoryUpdate) SetMilestonesURL(s string) *RepositoryUpdate {
	ru.mutation.SetMilestonesURL(s)
	return ru
}

// SetNillableMilestonesURL sets the "milestones_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableMilestonesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetMilestonesURL(*s)
	}
	return ru
}

// SetNotificationsURL sets the "notifications_url" field.
func (ru *RepositoryUpdate) SetNotificationsURL(s string) *RepositoryUpdate {
	ru.mutation.SetNotificationsURL(s)
	return ru
}

// SetNillableNotificationsURL sets the "notifications_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableNotificationsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetNotificationsURL(*s)
	}
	return ru
}

// SetPullsURL sets the "pulls_url" field.
func (ru *RepositoryUpdate) SetPullsURL(s string) *RepositoryUpdate {
	ru.mutation.SetPullsURL(s)
	return ru
}

// SetNillablePullsURL sets the "pulls_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillablePullsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetPullsURL(*s)
	}
	return ru
}

// SetReleasesURL sets the "releases_url" field.
func (ru *RepositoryUpdate) SetReleasesURL(s string) *RepositoryUpdate {
	ru.mutation.SetReleasesURL(s)
	return ru
}

// SetNillableReleasesURL sets the "releases_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableReleasesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetReleasesURL(*s)
	}
	return ru
}

// SetSSHURL sets the "ssh_url" field.
func (ru *RepositoryUpdate) SetSSHURL(s string) *RepositoryUpdate {
	ru.mutation.SetSSHURL(s)
	return ru
}

// SetNillableSSHURL sets the "ssh_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSSHURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetSSHURL(*s)
	}
	return ru
}

// SetStargazersURL sets the "stargazers_url" field.
func (ru *RepositoryUpdate) SetStargazersURL(s string) *RepositoryUpdate {
	ru.mutation.SetStargazersURL(s)
	return ru
}

// SetNillableStargazersURL sets the "stargazers_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStargazersURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetStargazersURL(*s)
	}
	return ru
}

// SetStatusesURL sets the "statuses_url" field.
func (ru *RepositoryUpdate) SetStatusesURL(s string) *RepositoryUpdate {
	ru.mutation.SetStatusesURL(s)
	return ru
}

// SetNillableStatusesURL sets the "statuses_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStatusesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetStatusesURL(*s)
	}
	return ru
}

// SetSubscribersURL sets the "subscribers_url" field.
func (ru *RepositoryUpdate) SetSubscribersURL(s string) *RepositoryUpdate {
	ru.mutation.SetSubscribersURL(s)
	return ru
}

// SetNillableSubscribersURL sets the "subscribers_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSubscribersURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetSubscribersURL(*s)
	}
	return ru
}

// SetSubscriptionURL sets the "subscription_url" field.
func (ru *RepositoryUpdate) SetSubscriptionURL(s string) *RepositoryUpdate {
	ru.mutation.SetSubscriptionURL(s)
	return ru
}

// SetNillableSubscriptionURL sets the "subscription_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSubscriptionURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetSubscriptionURL(*s)
	}
	return ru
}

// SetTagsURL sets the "tags_url" field.
func (ru *RepositoryUpdate) SetTagsURL(s string) *RepositoryUpdate {
	ru.mutation.SetTagsURL(s)
	return ru
}

// SetNillableTagsURL sets the "tags_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableTagsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetTagsURL(*s)
	}
	return ru
}

// SetTeamsURL sets the "teams_url" field.
func (ru *RepositoryUpdate) SetTeamsURL(s string) *RepositoryUpdate {
	ru.mutation.SetTeamsURL(s)
	return ru
}

// SetNillableTeamsURL sets the "teams_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableTeamsURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetTeamsURL(*s)
	}
	return ru
}

// SetTreesURL sets the "trees_url" field.
func (ru *RepositoryUpdate) SetTreesURL(s string) *RepositoryUpdate {
	ru.mutation.SetTreesURL(s)
	return ru
}

// SetNillableTreesURL sets the "trees_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableTreesURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetTreesURL(*s)
	}
	return ru
}

// SetCloneURL sets the "clone_url" field.
func (ru *RepositoryUpdate) SetCloneURL(s string) *RepositoryUpdate {
	ru.mutation.SetCloneURL(s)
	return ru
}

// SetNillableCloneURL sets the "clone_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCloneURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetCloneURL(*s)
	}
	return ru
}

// SetMirrorURL sets the "mirror_url" field.
func (ru *RepositoryUpdate) SetMirrorURL(s string) *RepositoryUpdate {
	ru.mutation.SetMirrorURL(s)
	return ru
}

// SetNillableMirrorURL sets the "mirror_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableMirrorURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetMirrorURL(*s)
	}
	return ru
}

// ClearMirrorURL clears the value of the "mirror_url" field.
func (ru *RepositoryUpdate) ClearMirrorURL() *RepositoryUpdate {
	ru.mutation.ClearMirrorURL()
	return ru
}

// SetHooksURL sets the "hooks_url" field.
func (ru *RepositoryUpdate) SetHooksURL(s string) *RepositoryUpdate {
	ru.mutation.SetHooksURL(s)
	return ru
}

// SetNillableHooksURL sets the "hooks_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHooksURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetHooksURL(*s)
	}
	return ru
}

// SetSvnURL sets the "svn_url" field.
func (ru *RepositoryUpdate) SetSvnURL(s string) *RepositoryUpdate {
	ru.mutation.SetSvnURL(s)
	return ru
}

// SetNillableSvnURL sets the "svn_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSvnURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetSvnURL(*s)
	}
	return ru
}

// SetHomepage sets the "homepage" field.
func (ru *RepositoryUpdate) SetHomepage(s string) *RepositoryUpdate {
	ru.mutation.SetHomepage(s)
	return ru
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHomepage(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetHomepage(*s)
	}
	return ru
}

// ClearHomepage clears the value of the "homepage" field.
func (ru *RepositoryUpdate) ClearHomepage() *RepositoryUpdate {
	ru.mutation.ClearHomepage()
	return ru
}

// SetLanguage sets the "language" field.
func (ru *RepositoryUpdate) SetLanguage(s string) *RepositoryUpdate {
	ru.mutation.SetLanguage(s)
	return ru
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableLanguage(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetLanguage(*s)
	}
	return ru
}

// ClearLanguage clears the value of the "language" field.
func (ru *RepositoryUpdate) ClearLanguage() *RepositoryUpdate {
	ru.mutation.ClearLanguage()
	return ru
}

// SetForksCount sets the "forks_count" field.
func (ru *RepositoryUpdate) SetForksCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetForksCount()
	ru.mutation.SetForksCount(i)
	return ru
}

// SetNillableForksCount sets the "forks_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableForksCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetForksCount(*i)
	}
	return ru
}

// AddForksCount adds i to the "forks_count" field.
func (ru *RepositoryUpdate) AddForksCount(i int64) *RepositoryUpdate {
	ru.mutation.AddForksCount(i)
	return ru
}

// SetStargazersCount sets the "stargazers_count" field.
func (ru *RepositoryUpdate) SetStargazersCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetStargazersCount()
	ru.mutation.SetStargazersCount(i)
	return ru
}

// SetNillableStargazersCount sets the "stargazers_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableStargazersCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetStargazersCount(*i)
	}
	return ru
}

// AddStargazersCount adds i to the "stargazers_count" field.
func (ru *RepositoryUpdate) AddStargazersCount(i int64) *RepositoryUpdate {
	ru.mutation.AddStargazersCount(i)
	return ru
}

// SetWatchersCount sets the "watchers_count" field.
func (ru *RepositoryUpdate) SetWatchersCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetWatchersCount()
	ru.mutation.SetWatchersCount(i)
	return ru
}

// SetNillableWatchersCount sets the "watchers_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableWatchersCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetWatchersCount(*i)
	}
	return ru
}

// AddWatchersCount adds i to the "watchers_count" field.
func (ru *RepositoryUpdate) AddWatchersCount(i int64) *RepositoryUpdate {
	ru.mutation.AddWatchersCount(i)
	return ru
}

// SetSize sets the "size" field.
func (ru *RepositoryUpdate) SetSize(i int64) *RepositoryUpdate {
	ru.mutation.ResetSize()
	ru.mutation.SetSize(i)
	return ru
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSize(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetSize(*i)
	}
	return ru
}

// AddSize adds i to the "size" field.
func (ru *RepositoryUpdate) AddSize(i int64) *RepositoryUpdate {
	ru.mutation.AddSize(i)
	return ru
}

// SetDefaultBranch sets the "default_branch" field.
func (ru *RepositoryUpdate) SetDefaultBranch(s string) *RepositoryUpdate {
	ru.mutation.SetDefaultBranch(s)
	return ru
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDefaultBranch(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDefaultBranch(*s)
	}
	return ru
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (ru *RepositoryUpdate) SetOpenIssuesCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetOpenIssuesCount()
	ru.mutation.SetOpenIssuesCount(i)
	return ru
}

// SetNillableOpenIssuesCount sets the "open_issues_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableOpenIssuesCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetOpenIssuesCount(*i)
	}
	return ru
}

// AddOpenIssuesCount adds i to the "open_issues_count" field.
func (ru *RepositoryUpdate) AddOpenIssuesCount(i int64) *RepositoryUpdate {
	ru.mutation.AddOpenIssuesCount(i)
	return ru
}

// SetIsTemplate sets the "is_template" field.
func (ru *RepositoryUpdate) SetIsTemplate(b bool) *RepositoryUpdate {
	ru.mutation.SetIsTemplate(b)
	return ru
}

// SetNillableIsTemplate sets the "is_template" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableIsTemplate(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetIsTemplate(*b)
	}
	return ru
}

// SetTopics sets the "topics" field.
func (ru *RepositoryUpdate) SetTopics(s []string) *RepositoryUpdate {
	ru.mutation.SetTopics(s)
	return ru
}

// AppendTopics appends s to the "topics" field.
func (ru *RepositoryUpdate) AppendTopics(s []string) *RepositoryUpdate {
	ru.mutation.AppendTopics(s)
	return ru
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (ru *RepositoryUpdate) SetHasIssuesEnabled(b bool) *RepositoryUpdate {
	ru.mutation.SetHasIssuesEnabled(b)
	return ru
}

// SetNillableHasIssuesEnabled sets the "has_issues_enabled" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasIssuesEnabled(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasIssuesEnabled(*b)
	}
	return ru
}

// SetHasProjects sets the "has_projects" field.
func (ru *RepositoryUpdate) SetHasProjects(b bool) *RepositoryUpdate {
	ru.mutation.SetHasProjects(b)
	return ru
}

// SetNillableHasProjects sets the "has_projects" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasProjects(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasProjects(*b)
	}
	return ru
}

// SetHasWiki sets the "has_wiki" field.
func (ru *RepositoryUpdate) SetHasWiki(b bool) *RepositoryUpdate {
	ru.mutation.SetHasWiki(b)
	return ru
}

// SetNillableHasWiki sets the "has_wiki" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasWiki(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasWiki(*b)
	}
	return ru
}

// SetHasPages sets the "has_pages" field.
func (ru *RepositoryUpdate) SetHasPages(b bool) *RepositoryUpdate {
	ru.mutation.SetHasPages(b)
	return ru
}

// SetNillableHasPages sets the "has_pages" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasPages(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasPages(*b)
	}
	return ru
}

// SetHasDownloads sets the "has_downloads" field.
func (ru *RepositoryUpdate) SetHasDownloads(b bool) *RepositoryUpdate {
	ru.mutation.SetHasDownloads(b)
	return ru
}

// SetNillableHasDownloads sets the "has_downloads" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasDownloads(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasDownloads(*b)
	}
	return ru
}

// SetHasDiscussions sets the "has_discussions" field.
func (ru *RepositoryUpdate) SetHasDiscussions(b bool) *RepositoryUpdate {
	ru.mutation.SetHasDiscussions(b)
	return ru
}

// SetNillableHasDiscussions sets the "has_discussions" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasDiscussions(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasDiscussions(*b)
	}
	return ru
}

// SetArchived sets the "archived" field.
func (ru *RepositoryUpdate) SetArchived(b bool) *RepositoryUpdate {
	ru.mutation.SetArchived(b)
	return ru
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableArchived(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetArchived(*b)
	}
	return ru
}

// SetDisabled sets the "disabled" field.
func (ru *RepositoryUpdate) SetDisabled(b bool) *RepositoryUpdate {
	ru.mutation.SetDisabled(b)
	return ru
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDisabled(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetDisabled(*b)
	}
	return ru
}

// SetVisibility sets the "visibility" field.
func (ru *RepositoryUpdate) SetVisibility(r repository.Visibility) *RepositoryUpdate {
	ru.mutation.SetVisibility(r)
	return ru
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableVisibility(r *repository.Visibility) *RepositoryUpdate {
	if r != nil {
		ru.SetVisibility(*r)
	}
	return ru
}

// ClearVisibility clears the value of the "visibility" field.
func (ru *RepositoryUpdate) ClearVisibility() *RepositoryUpdate {
	ru.mutation.ClearVisibility()
	return ru
}

// SetPushedAt sets the "pushed_at" field.
func (ru *RepositoryUpdate) SetPushedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetPushedAt(t)
	return ru
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillablePushedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetPushedAt(*t)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RepositoryUpdate) SetCreatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCreatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RepositoryUpdate) SetUpdatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// SetSubscribersCount sets the "subscribers_count" field.
func (ru *RepositoryUpdate) SetSubscribersCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetSubscribersCount()
	ru.mutation.SetSubscribersCount(i)
	return ru
}

// SetNillableSubscribersCount sets the "subscribers_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSubscribersCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetSubscribersCount(*i)
	}
	return ru
}

// AddSubscribersCount adds i to the "subscribers_count" field.
func (ru *RepositoryUpdate) AddSubscribersCount(i int64) *RepositoryUpdate {
	ru.mutation.AddSubscribersCount(i)
	return ru
}

// SetNetworkCount sets the "network_count" field.
func (ru *RepositoryUpdate) SetNetworkCount(i int64) *RepositoryUpdate {
	ru.mutation.ResetNetworkCount()
	ru.mutation.SetNetworkCount(i)
	return ru
}

// SetNillableNetworkCount sets the "network_count" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableNetworkCount(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetNetworkCount(*i)
	}
	return ru
}

// AddNetworkCount adds i to the "network_count" field.
func (ru *RepositoryUpdate) AddNetworkCount(i int64) *RepositoryUpdate {
	ru.mutation.AddNetworkCount(i)
	return ru
}

// SetForks sets the "forks" field.
func (ru *RepositoryUpdate) SetForks(i int64) *RepositoryUpdate {
	ru.mutation.ResetForks()
	ru.mutation.SetForks(i)
	return ru
}

// SetNillableForks sets the "forks" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableForks(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetForks(*i)
	}
	return ru
}

// AddForks adds i to the "forks" field.
func (ru *RepositoryUpdate) AddForks(i int64) *RepositoryUpdate {
	ru.mutation.AddForks(i)
	return ru
}

// SetOpenIssues sets the "open_issues" field.
func (ru *RepositoryUpdate) SetOpenIssues(i int64) *RepositoryUpdate {
	ru.mutation.ResetOpenIssues()
	ru.mutation.SetOpenIssues(i)
	return ru
}

// SetNillableOpenIssues sets the "open_issues" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableOpenIssues(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetOpenIssues(*i)
	}
	return ru
}

// AddOpenIssues adds i to the "open_issues" field.
func (ru *RepositoryUpdate) AddOpenIssues(i int64) *RepositoryUpdate {
	ru.mutation.AddOpenIssues(i)
	return ru
}

// SetWatchers sets the "watchers" field.
func (ru *RepositoryUpdate) SetWatchers(i int64) *RepositoryUpdate {
	ru.mutation.ResetWatchers()
	ru.mutation.SetWatchers(i)
	return ru
}

// SetNillableWatchers sets the "watchers" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableWatchers(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetWatchers(*i)
	}
	return ru
}

// AddWatchers adds i to the "watchers" field.
func (ru *RepositoryUpdate) AddWatchers(i int64) *RepositoryUpdate {
	ru.mutation.AddWatchers(i)
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RepositoryUpdate) SetOwnerID(id int64) *RepositoryUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableOwnerID(id *int64) *RepositoryUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RepositoryUpdate) SetOwner(u *User) *RepositoryUpdate {
	return ru.SetOwnerID(u.ID)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (ru *RepositoryUpdate) AddIssueIDs(ids ...int64) *RepositoryUpdate {
	ru.mutation.AddIssueIDs(ids...)
	return ru
}

// AddIssues adds the "issues" edges to the Issue entity.
func (ru *RepositoryUpdate) AddIssues(i ...*Issue) *RepositoryUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddIssueIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RepositoryUpdate) ClearOwner() *RepositoryUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearIssues clears all "issues" edges to the Issue entity.
func (ru *RepositoryUpdate) ClearIssues() *RepositoryUpdate {
	ru.mutation.ClearIssues()
	return ru
}

// RemoveIssueIDs removes the "issues" edge to Issue entities by IDs.
func (ru *RepositoryUpdate) RemoveIssueIDs(ids ...int64) *RepositoryUpdate {
	ru.mutation.RemoveIssueIDs(ids...)
	return ru
}

// RemoveIssues removes "issues" edges to Issue entities.
func (ru *RepositoryUpdate) RemoveIssues(i ...*Issue) *RepositoryUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveIssueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RepositoryUpdate) check() error {
	if v, ok := ru.mutation.Visibility(); ok {
		if err := repository.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Repository.visibility": %w`, err)}
		}
	}
	return nil
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.NodeID(); ok {
		_spec.SetField(repository.FieldNodeID, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Private(); ok {
		_spec.SetField(repository.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(repository.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Fork(); ok {
		_spec.SetField(repository.FieldFork, field.TypeBool, value)
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.ArchiveURL(); ok {
		_spec.SetField(repository.FieldArchiveURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.AssigneesURL(); ok {
		_spec.SetField(repository.FieldAssigneesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.BlobsURL(); ok {
		_spec.SetField(repository.FieldBlobsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.BranchesURL(); ok {
		_spec.SetField(repository.FieldBranchesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.CollaboratorsURL(); ok {
		_spec.SetField(repository.FieldCollaboratorsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.CommentsURL(); ok {
		_spec.SetField(repository.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.CommitsURL(); ok {
		_spec.SetField(repository.FieldCommitsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.CompareURL(); ok {
		_spec.SetField(repository.FieldCompareURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.ContentsURL(); ok {
		_spec.SetField(repository.FieldContentsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.ContributorsURL(); ok {
		_spec.SetField(repository.FieldContributorsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.DeploymentsURL(); ok {
		_spec.SetField(repository.FieldDeploymentsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.DownloadsURL(); ok {
		_spec.SetField(repository.FieldDownloadsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.EventsURL(); ok {
		_spec.SetField(repository.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.ForksURL(); ok {
		_spec.SetField(repository.FieldForksURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.GitCommitsURL(); ok {
		_spec.SetField(repository.FieldGitCommitsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.GitRefsURL(); ok {
		_spec.SetField(repository.FieldGitRefsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.GitTagsURL(); ok {
		_spec.SetField(repository.FieldGitTagsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.GitURL(); ok {
		_spec.SetField(repository.FieldGitURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.IssueCommentURL(); ok {
		_spec.SetField(repository.FieldIssueCommentURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.IssueEventsURL(); ok {
		_spec.SetField(repository.FieldIssueEventsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.IssuesURL(); ok {
		_spec.SetField(repository.FieldIssuesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.KeysURL(); ok {
		_spec.SetField(repository.FieldKeysURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.LabelsURL(); ok {
		_spec.SetField(repository.FieldLabelsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.LanguagesURL(); ok {
		_spec.SetField(repository.FieldLanguagesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.MergesURL(); ok {
		_spec.SetField(repository.FieldMergesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.MilestonesURL(); ok {
		_spec.SetField(repository.FieldMilestonesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.NotificationsURL(); ok {
		_spec.SetField(repository.FieldNotificationsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.PullsURL(); ok {
		_spec.SetField(repository.FieldPullsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.ReleasesURL(); ok {
		_spec.SetField(repository.FieldReleasesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.SSHURL(); ok {
		_spec.SetField(repository.FieldSSHURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.StargazersURL(); ok {
		_spec.SetField(repository.FieldStargazersURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.StatusesURL(); ok {
		_spec.SetField(repository.FieldStatusesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.SubscribersURL(); ok {
		_spec.SetField(repository.FieldSubscribersURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.SubscriptionURL(); ok {
		_spec.SetField(repository.FieldSubscriptionURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.TagsURL(); ok {
		_spec.SetField(repository.FieldTagsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.TeamsURL(); ok {
		_spec.SetField(repository.FieldTeamsURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.TreesURL(); ok {
		_spec.SetField(repository.FieldTreesURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.CloneURL(); ok {
		_spec.SetField(repository.FieldCloneURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.MirrorURL(); ok {
		_spec.SetField(repository.FieldMirrorURL, field.TypeString, value)
	}
	if ru.mutation.MirrorURLCleared() {
		_spec.ClearField(repository.FieldMirrorURL, field.TypeString)
	}
	if value, ok := ru.mutation.HooksURL(); ok {
		_spec.SetField(repository.FieldHooksURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.SvnURL(); ok {
		_spec.SetField(repository.FieldSvnURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.Homepage(); ok {
		_spec.SetField(repository.FieldHomepage, field.TypeString, value)
	}
	if ru.mutation.HomepageCleared() {
		_spec.ClearField(repository.FieldHomepage, field.TypeString)
	}
	if value, ok := ru.mutation.Language(); ok {
		_spec.SetField(repository.FieldLanguage, field.TypeString, value)
	}
	if ru.mutation.LanguageCleared() {
		_spec.ClearField(repository.FieldLanguage, field.TypeString)
	}
	if value, ok := ru.mutation.ForksCount(); ok {
		_spec.SetField(repository.FieldForksCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedForksCount(); ok {
		_spec.AddField(repository.FieldForksCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.StargazersCount(); ok {
		_spec.SetField(repository.FieldStargazersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedStargazersCount(); ok {
		_spec.AddField(repository.FieldStargazersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.WatchersCount(); ok {
		_spec.SetField(repository.FieldWatchersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedWatchersCount(); ok {
		_spec.AddField(repository.FieldWatchersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Size(); ok {
		_spec.SetField(repository.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedSize(); ok {
		_spec.AddField(repository.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := ru.mutation.OpenIssuesCount(); ok {
		_spec.SetField(repository.FieldOpenIssuesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedOpenIssuesCount(); ok {
		_spec.AddField(repository.FieldOpenIssuesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.IsTemplate(); ok {
		_spec.SetField(repository.FieldIsTemplate, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Topics(); ok {
		_spec.SetField(repository.FieldTopics, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedTopics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, repository.FieldTopics, value)
		})
	}
	if value, ok := ru.mutation.HasIssuesEnabled(); ok {
		_spec.SetField(repository.FieldHasIssuesEnabled, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HasProjects(); ok {
		_spec.SetField(repository.FieldHasProjects, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HasWiki(); ok {
		_spec.SetField(repository.FieldHasWiki, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HasPages(); ok {
		_spec.SetField(repository.FieldHasPages, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HasDownloads(); ok {
		_spec.SetField(repository.FieldHasDownloads, field.TypeBool, value)
	}
	if value, ok := ru.mutation.HasDiscussions(); ok {
		_spec.SetField(repository.FieldHasDiscussions, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Archived(); ok {
		_spec.SetField(repository.FieldArchived, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Disabled(); ok {
		_spec.SetField(repository.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Visibility(); ok {
		_spec.SetField(repository.FieldVisibility, field.TypeEnum, value)
	}
	if ru.mutation.VisibilityCleared() {
		_spec.ClearField(repository.FieldVisibility, field.TypeEnum)
	}
	if value, ok := ru.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.SubscribersCount(); ok {
		_spec.SetField(repository.FieldSubscribersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedSubscribersCount(); ok {
		_spec.AddField(repository.FieldSubscribersCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.NetworkCount(); ok {
		_spec.SetField(repository.FieldNetworkCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedNetworkCount(); ok {
		_spec.AddField(repository.FieldNetworkCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Forks(); ok {
		_spec.SetField(repository.FieldForks, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedForks(); ok {
		_spec.AddField(repository.FieldForks, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.OpenIssues(); ok {
		_spec.SetField(repository.FieldOpenIssues, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedOpenIssues(); ok {
		_spec.AddField(repository.FieldOpenIssues, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Watchers(); ok {
		_spec.SetField(repository.FieldWatchers, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedWatchers(); ok {
		_spec.AddField(repository.FieldWatchers, field.TypeInt64, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedIssuesIDs(); len(nodes) > 0 && !ru.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetNodeID sets the "node_id" field.
func (ruo *RepositoryUpdateOne) SetNodeID(s string) *RepositoryUpdateOne {
	ruo.mutation.SetNodeID(s)
	return ruo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableNodeID(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetNodeID(*s)
	}
	return ruo
}

// SetName sets the "name" field.
func (ruo *RepositoryUpdateOne) SetName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetFullName sets the "full_name" field.
func (ruo *RepositoryUpdateOne) SetFullName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetFullName(s)
	return ruo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableFullName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetFullName(*s)
	}
	return ruo
}

// SetPrivate sets the "private" field.
func (ruo *RepositoryUpdateOne) SetPrivate(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetPrivate(b)
	return ruo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillablePrivate(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetPrivate(*b)
	}
	return ruo
}

// SetHTMLURL sets the "html_url" field.
func (ruo *RepositoryUpdateOne) SetHTMLURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetHTMLURL(s)
	return ruo
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHTMLURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetHTMLURL(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RepositoryUpdateOne) SetDescription(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDescription(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RepositoryUpdateOne) ClearDescription() *RepositoryUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetFork sets the "fork" field.
func (ruo *RepositoryUpdateOne) SetFork(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetFork(b)
	return ruo
}

// SetNillableFork sets the "fork" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableFork(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetFork(*b)
	}
	return ruo
}

// SetURL sets the "url" field.
func (ruo *RepositoryUpdateOne) SetURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetURL(*s)
	}
	return ruo
}

// SetArchiveURL sets the "archive_url" field.
func (ruo *RepositoryUpdateOne) SetArchiveURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetArchiveURL(s)
	return ruo
}

// SetNillableArchiveURL sets the "archive_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableArchiveURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetArchiveURL(*s)
	}
	return ruo
}

// SetAssigneesURL sets the "assignees_url" field.
func (ruo *RepositoryUpdateOne) SetAssigneesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetAssigneesURL(s)
	return ruo
}

// SetNillableAssigneesURL sets the "assignees_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableAssigneesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetAssigneesURL(*s)
	}
	return ruo
}

// SetBlobsURL sets the "blobs_url" field.
func (ruo *RepositoryUpdateOne) SetBlobsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetBlobsURL(s)
	return ruo
}

// SetNillableBlobsURL sets the "blobs_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableBlobsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetBlobsURL(*s)
	}
	return ruo
}

// SetBranchesURL sets the "branches_url" field.
func (ruo *RepositoryUpdateOne) SetBranchesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetBranchesURL(s)
	return ruo
}

// SetNillableBranchesURL sets the "branches_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableBranchesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetBranchesURL(*s)
	}
	return ruo
}

// SetCollaboratorsURL sets the "collaborators_url" field.
func (ruo *RepositoryUpdateOne) SetCollaboratorsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetCollaboratorsURL(s)
	return ruo
}

// SetNillableCollaboratorsURL sets the "collaborators_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCollaboratorsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetCollaboratorsURL(*s)
	}
	return ruo
}

// SetCommentsURL sets the "comments_url" field.
func (ruo *RepositoryUpdateOne) SetCommentsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetCommentsURL(s)
	return ruo
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCommentsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetCommentsURL(*s)
	}
	return ruo
}

// SetCommitsURL sets the "commits_url" field.
func (ruo *RepositoryUpdateOne) SetCommitsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetCommitsURL(s)
	return ruo
}

// SetNillableCommitsURL sets the "commits_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCommitsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetCommitsURL(*s)
	}
	return ruo
}

// SetCompareURL sets the "compare_url" field.
func (ruo *RepositoryUpdateOne) SetCompareURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetCompareURL(s)
	return ruo
}

// SetNillableCompareURL sets the "compare_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCompareURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetCompareURL(*s)
	}
	return ruo
}

// SetContentsURL sets the "contents_url" field.
func (ruo *RepositoryUpdateOne) SetContentsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetContentsURL(s)
	return ruo
}

// SetNillableContentsURL sets the "contents_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableContentsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetContentsURL(*s)
	}
	return ruo
}

// SetContributorsURL sets the "contributors_url" field.
func (ruo *RepositoryUpdateOne) SetContributorsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetContributorsURL(s)
	return ruo
}

// SetNillableContributorsURL sets the "contributors_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableContributorsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetContributorsURL(*s)
	}
	return ruo
}

// SetDeploymentsURL sets the "deployments_url" field.
func (ruo *RepositoryUpdateOne) SetDeploymentsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDeploymentsURL(s)
	return ruo
}

// SetNillableDeploymentsURL sets the "deployments_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDeploymentsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDeploymentsURL(*s)
	}
	return ruo
}

// SetDownloadsURL sets the "downloads_url" field.
func (ruo *RepositoryUpdateOne) SetDownloadsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDownloadsURL(s)
	return ruo
}

// SetNillableDownloadsURL sets the "downloads_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDownloadsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDownloadsURL(*s)
	}
	return ruo
}

// SetEventsURL sets the "events_url" field.
func (ruo *RepositoryUpdateOne) SetEventsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetEventsURL(s)
	return ruo
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableEventsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetEventsURL(*s)
	}
	return ruo
}

// SetForksURL sets the "forks_url" field.
func (ruo *RepositoryUpdateOne) SetForksURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetForksURL(s)
	return ruo
}

// SetNillableForksURL sets the "forks_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableForksURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetForksURL(*s)
	}
	return ruo
}

// SetGitCommitsURL sets the "git_commits_url" field.
func (ruo *RepositoryUpdateOne) SetGitCommitsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetGitCommitsURL(s)
	return ruo
}

// SetNillableGitCommitsURL sets the "git_commits_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGitCommitsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetGitCommitsURL(*s)
	}
	return ruo
}

// SetGitRefsURL sets the "git_refs_url" field.
func (ruo *RepositoryUpdateOne) SetGitRefsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetGitRefsURL(s)
	return ruo
}

// SetNillableGitRefsURL sets the "git_refs_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGitRefsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetGitRefsURL(*s)
	}
	return ruo
}

// SetGitTagsURL sets the "git_tags_url" field.
func (ruo *RepositoryUpdateOne) SetGitTagsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetGitTagsURL(s)
	return ruo
}

// SetNillableGitTagsURL sets the "git_tags_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGitTagsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetGitTagsURL(*s)
	}
	return ruo
}

// SetGitURL sets the "git_url" field.
func (ruo *RepositoryUpdateOne) SetGitURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetGitURL(s)
	return ruo
}

// SetNillableGitURL sets the "git_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGitURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetGitURL(*s)
	}
	return ruo
}

// SetIssueCommentURL sets the "issue_comment_url" field.
func (ruo *RepositoryUpdateOne) SetIssueCommentURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetIssueCommentURL(s)
	return ruo
}

// SetNillableIssueCommentURL sets the "issue_comment_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableIssueCommentURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetIssueCommentURL(*s)
	}
	return ruo
}

// SetIssueEventsURL sets the "issue_events_url" field.
func (ruo *RepositoryUpdateOne) SetIssueEventsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetIssueEventsURL(s)
	return ruo
}

// SetNillableIssueEventsURL sets the "issue_events_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableIssueEventsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetIssueEventsURL(*s)
	}
	return ruo
}

// SetIssuesURL sets the "issues_url" field.
func (ruo *RepositoryUpdateOne) SetIssuesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetIssuesURL(s)
	return ruo
}

// SetNillableIssuesURL sets the "issues_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableIssuesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetIssuesURL(*s)
	}
	return ruo
}

// SetKeysURL sets the "keys_url" field.
func (ruo *RepositoryUpdateOne) SetKeysURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetKeysURL(s)
	return ruo
}

// SetNillableKeysURL sets the "keys_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableKeysURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetKeysURL(*s)
	}
	return ruo
}

// SetLabelsURL sets the "labels_url" field.
func (ruo *RepositoryUpdateOne) SetLabelsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetLabelsURL(s)
	return ruo
}

// SetNillableLabelsURL sets the "labels_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableLabelsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetLabelsURL(*s)
	}
	return ruo
}

// SetLanguagesURL sets the "languages_url" field.
func (ruo *RepositoryUpdateOne) SetLanguagesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetLanguagesURL(s)
	return ruo
}

// SetNillableLanguagesURL sets the "languages_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableLanguagesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetLanguagesURL(*s)
	}
	return ruo
}

// SetMergesURL sets the "merges_url" field.
func (ruo *RepositoryUpdateOne) SetMergesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetMergesURL(s)
	return ruo
}

// SetNillableMergesURL sets the "merges_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableMergesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetMergesURL(*s)
	}
	return ruo
}

// SetMilestonesURL sets the "milestones_url" field.
func (ruo *RepositoryUpdateOne) SetMilestonesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetMilestonesURL(s)
	return ruo
}

// SetNillableMilestonesURL sets the "milestones_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableMilestonesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetMilestonesURL(*s)
	}
	return ruo
}

// SetNotificationsURL sets the "notifications_url" field.
func (ruo *RepositoryUpdateOne) SetNotificationsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetNotificationsURL(s)
	return ruo
}

// SetNillableNotificationsURL sets the "notifications_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableNotificationsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetNotificationsURL(*s)
	}
	return ruo
}

// SetPullsURL sets the "pulls_url" field.
func (ruo *RepositoryUpdateOne) SetPullsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetPullsURL(s)
	return ruo
}

// SetNillablePullsURL sets the "pulls_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillablePullsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetPullsURL(*s)
	}
	return ruo
}

// SetReleasesURL sets the "releases_url" field.
func (ruo *RepositoryUpdateOne) SetReleasesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetReleasesURL(s)
	return ruo
}

// SetNillableReleasesURL sets the "releases_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableReleasesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetReleasesURL(*s)
	}
	return ruo
}

// SetSSHURL sets the "ssh_url" field.
func (ruo *RepositoryUpdateOne) SetSSHURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetSSHURL(s)
	return ruo
}

// SetNillableSSHURL sets the "ssh_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSSHURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetSSHURL(*s)
	}
	return ruo
}

// SetStargazersURL sets the "stargazers_url" field.
func (ruo *RepositoryUpdateOne) SetStargazersURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetStargazersURL(s)
	return ruo
}

// SetNillableStargazersURL sets the "stargazers_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStargazersURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetStargazersURL(*s)
	}
	return ruo
}

// SetStatusesURL sets the "statuses_url" field.
func (ruo *RepositoryUpdateOne) SetStatusesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetStatusesURL(s)
	return ruo
}

// SetNillableStatusesURL sets the "statuses_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStatusesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetStatusesURL(*s)
	}
	return ruo
}

// SetSubscribersURL sets the "subscribers_url" field.
func (ruo *RepositoryUpdateOne) SetSubscribersURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetSubscribersURL(s)
	return ruo
}

// SetNillableSubscribersURL sets the "subscribers_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSubscribersURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetSubscribersURL(*s)
	}
	return ruo
}

// SetSubscriptionURL sets the "subscription_url" field.
func (ruo *RepositoryUpdateOne) SetSubscriptionURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetSubscriptionURL(s)
	return ruo
}

// SetNillableSubscriptionURL sets the "subscription_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSubscriptionURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetSubscriptionURL(*s)
	}
	return ruo
}

// SetTagsURL sets the "tags_url" field.
func (ruo *RepositoryUpdateOne) SetTagsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetTagsURL(s)
	return ruo
}

// SetNillableTagsURL sets the "tags_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableTagsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetTagsURL(*s)
	}
	return ruo
}

// SetTeamsURL sets the "teams_url" field.
func (ruo *RepositoryUpdateOne) SetTeamsURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetTeamsURL(s)
	return ruo
}

// SetNillableTeamsURL sets the "teams_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableTeamsURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetTeamsURL(*s)
	}
	return ruo
}

// SetTreesURL sets the "trees_url" field.
func (ruo *RepositoryUpdateOne) SetTreesURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetTreesURL(s)
	return ruo
}

// SetNillableTreesURL sets the "trees_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableTreesURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetTreesURL(*s)
	}
	return ruo
}

// SetCloneURL sets the "clone_url" field.
func (ruo *RepositoryUpdateOne) SetCloneURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetCloneURL(s)
	return ruo
}

// SetNillableCloneURL sets the "clone_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCloneURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetCloneURL(*s)
	}
	return ruo
}

// SetMirrorURL sets the "mirror_url" field.
func (ruo *RepositoryUpdateOne) SetMirrorURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetMirrorURL(s)
	return ruo
}

// SetNillableMirrorURL sets the "mirror_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableMirrorURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetMirrorURL(*s)
	}
	return ruo
}

// ClearMirrorURL clears the value of the "mirror_url" field.
func (ruo *RepositoryUpdateOne) ClearMirrorURL() *RepositoryUpdateOne {
	ruo.mutation.ClearMirrorURL()
	return ruo
}

// SetHooksURL sets the "hooks_url" field.
func (ruo *RepositoryUpdateOne) SetHooksURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetHooksURL(s)
	return ruo
}

// SetNillableHooksURL sets the "hooks_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHooksURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetHooksURL(*s)
	}
	return ruo
}

// SetSvnURL sets the "svn_url" field.
func (ruo *RepositoryUpdateOne) SetSvnURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetSvnURL(s)
	return ruo
}

// SetNillableSvnURL sets the "svn_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSvnURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetSvnURL(*s)
	}
	return ruo
}

// SetHomepage sets the "homepage" field.
func (ruo *RepositoryUpdateOne) SetHomepage(s string) *RepositoryUpdateOne {
	ruo.mutation.SetHomepage(s)
	return ruo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHomepage(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetHomepage(*s)
	}
	return ruo
}

// ClearHomepage clears the value of the "homepage" field.
func (ruo *RepositoryUpdateOne) ClearHomepage() *RepositoryUpdateOne {
	ruo.mutation.ClearHomepage()
	return ruo
}

// SetLanguage sets the "language" field.
func (ruo *RepositoryUpdateOne) SetLanguage(s string) *RepositoryUpdateOne {
	ruo.mutation.SetLanguage(s)
	return ruo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableLanguage(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetLanguage(*s)
	}
	return ruo
}

// ClearLanguage clears the value of the "language" field.
func (ruo *RepositoryUpdateOne) ClearLanguage() *RepositoryUpdateOne {
	ruo.mutation.ClearLanguage()
	return ruo
}

// SetForksCount sets the "forks_count" field.
func (ruo *RepositoryUpdateOne) SetForksCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetForksCount()
	ruo.mutation.SetForksCount(i)
	return ruo
}

// SetNillableForksCount sets the "forks_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableForksCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetForksCount(*i)
	}
	return ruo
}

// AddForksCount adds i to the "forks_count" field.
func (ruo *RepositoryUpdateOne) AddForksCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddForksCount(i)
	return ruo
}

// SetStargazersCount sets the "stargazers_count" field.
func (ruo *RepositoryUpdateOne) SetStargazersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetStargazersCount()
	ruo.mutation.SetStargazersCount(i)
	return ruo
}

// SetNillableStargazersCount sets the "stargazers_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableStargazersCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetStargazersCount(*i)
	}
	return ruo
}

// AddStargazersCount adds i to the "stargazers_count" field.
func (ruo *RepositoryUpdateOne) AddStargazersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddStargazersCount(i)
	return ruo
}

// SetWatchersCount sets the "watchers_count" field.
func (ruo *RepositoryUpdateOne) SetWatchersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetWatchersCount()
	ruo.mutation.SetWatchersCount(i)
	return ruo
}

// SetNillableWatchersCount sets the "watchers_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableWatchersCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetWatchersCount(*i)
	}
	return ruo
}

// AddWatchersCount adds i to the "watchers_count" field.
func (ruo *RepositoryUpdateOne) AddWatchersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddWatchersCount(i)
	return ruo
}

// SetSize sets the "size" field.
func (ruo *RepositoryUpdateOne) SetSize(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetSize()
	ruo.mutation.SetSize(i)
	return ruo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSize(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetSize(*i)
	}
	return ruo
}

// AddSize adds i to the "size" field.
func (ruo *RepositoryUpdateOne) AddSize(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddSize(i)
	return ruo
}

// SetDefaultBranch sets the "default_branch" field.
func (ruo *RepositoryUpdateOne) SetDefaultBranch(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDefaultBranch(s)
	return ruo
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDefaultBranch(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDefaultBranch(*s)
	}
	return ruo
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (ruo *RepositoryUpdateOne) SetOpenIssuesCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetOpenIssuesCount()
	ruo.mutation.SetOpenIssuesCount(i)
	return ruo
}

// SetNillableOpenIssuesCount sets the "open_issues_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableOpenIssuesCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetOpenIssuesCount(*i)
	}
	return ruo
}

// AddOpenIssuesCount adds i to the "open_issues_count" field.
func (ruo *RepositoryUpdateOne) AddOpenIssuesCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddOpenIssuesCount(i)
	return ruo
}

// SetIsTemplate sets the "is_template" field.
func (ruo *RepositoryUpdateOne) SetIsTemplate(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetIsTemplate(b)
	return ruo
}

// SetNillableIsTemplate sets the "is_template" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableIsTemplate(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetIsTemplate(*b)
	}
	return ruo
}

// SetTopics sets the "topics" field.
func (ruo *RepositoryUpdateOne) SetTopics(s []string) *RepositoryUpdateOne {
	ruo.mutation.SetTopics(s)
	return ruo
}

// AppendTopics appends s to the "topics" field.
func (ruo *RepositoryUpdateOne) AppendTopics(s []string) *RepositoryUpdateOne {
	ruo.mutation.AppendTopics(s)
	return ruo
}

// SetHasIssuesEnabled sets the "has_issues_enabled" field.
func (ruo *RepositoryUpdateOne) SetHasIssuesEnabled(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasIssuesEnabled(b)
	return ruo
}

// SetNillableHasIssuesEnabled sets the "has_issues_enabled" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasIssuesEnabled(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasIssuesEnabled(*b)
	}
	return ruo
}

// SetHasProjects sets the "has_projects" field.
func (ruo *RepositoryUpdateOne) SetHasProjects(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasProjects(b)
	return ruo
}

// SetNillableHasProjects sets the "has_projects" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasProjects(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasProjects(*b)
	}
	return ruo
}

// SetHasWiki sets the "has_wiki" field.
func (ruo *RepositoryUpdateOne) SetHasWiki(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasWiki(b)
	return ruo
}

// SetNillableHasWiki sets the "has_wiki" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasWiki(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasWiki(*b)
	}
	return ruo
}

// SetHasPages sets the "has_pages" field.
func (ruo *RepositoryUpdateOne) SetHasPages(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasPages(b)
	return ruo
}

// SetNillableHasPages sets the "has_pages" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasPages(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasPages(*b)
	}
	return ruo
}

// SetHasDownloads sets the "has_downloads" field.
func (ruo *RepositoryUpdateOne) SetHasDownloads(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasDownloads(b)
	return ruo
}

// SetNillableHasDownloads sets the "has_downloads" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasDownloads(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasDownloads(*b)
	}
	return ruo
}

// SetHasDiscussions sets the "has_discussions" field.
func (ruo *RepositoryUpdateOne) SetHasDiscussions(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasDiscussions(b)
	return ruo
}

// SetNillableHasDiscussions sets the "has_discussions" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasDiscussions(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasDiscussions(*b)
	}
	return ruo
}

// SetArchived sets the "archived" field.
func (ruo *RepositoryUpdateOne) SetArchived(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetArchived(b)
	return ruo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableArchived(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetArchived(*b)
	}
	return ruo
}

// SetDisabled sets the "disabled" field.
func (ruo *RepositoryUpdateOne) SetDisabled(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetDisabled(b)
	return ruo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDisabled(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetDisabled(*b)
	}
	return ruo
}

// SetVisibility sets the "visibility" field.
func (ruo *RepositoryUpdateOne) SetVisibility(r repository.Visibility) *RepositoryUpdateOne {
	ruo.mutation.SetVisibility(r)
	return ruo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableVisibility(r *repository.Visibility) *RepositoryUpdateOne {
	if r != nil {
		ruo.SetVisibility(*r)
	}
	return ruo
}

// ClearVisibility clears the value of the "visibility" field.
func (ruo *RepositoryUpdateOne) ClearVisibility() *RepositoryUpdateOne {
	ruo.mutation.ClearVisibility()
	return ruo
}

// SetPushedAt sets the "pushed_at" field.
func (ruo *RepositoryUpdateOne) SetPushedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetPushedAt(t)
	return ruo
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillablePushedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetPushedAt(*t)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RepositoryUpdateOne) SetCreatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCreatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RepositoryUpdateOne) SetUpdatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// SetSubscribersCount sets the "subscribers_count" field.
func (ruo *RepositoryUpdateOne) SetSubscribersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetSubscribersCount()
	ruo.mutation.SetSubscribersCount(i)
	return ruo
}

// SetNillableSubscribersCount sets the "subscribers_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSubscribersCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetSubscribersCount(*i)
	}
	return ruo
}

// AddSubscribersCount adds i to the "subscribers_count" field.
func (ruo *RepositoryUpdateOne) AddSubscribersCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddSubscribersCount(i)
	return ruo
}

// SetNetworkCount sets the "network_count" field.
func (ruo *RepositoryUpdateOne) SetNetworkCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetNetworkCount()
	ruo.mutation.SetNetworkCount(i)
	return ruo
}

// SetNillableNetworkCount sets the "network_count" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableNetworkCount(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetNetworkCount(*i)
	}
	return ruo
}

// AddNetworkCount adds i to the "network_count" field.
func (ruo *RepositoryUpdateOne) AddNetworkCount(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddNetworkCount(i)
	return ruo
}

// SetForks sets the "forks" field.
func (ruo *RepositoryUpdateOne) SetForks(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetForks()
	ruo.mutation.SetForks(i)
	return ruo
}

// SetNillableForks sets the "forks" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableForks(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetForks(*i)
	}
	return ruo
}

// AddForks adds i to the "forks" field.
func (ruo *RepositoryUpdateOne) AddForks(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddForks(i)
	return ruo
}

// SetOpenIssues sets the "open_issues" field.
func (ruo *RepositoryUpdateOne) SetOpenIssues(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetOpenIssues()
	ruo.mutation.SetOpenIssues(i)
	return ruo
}

// SetNillableOpenIssues sets the "open_issues" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableOpenIssues(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetOpenIssues(*i)
	}
	return ruo
}

// AddOpenIssues adds i to the "open_issues" field.
func (ruo *RepositoryUpdateOne) AddOpenIssues(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddOpenIssues(i)
	return ruo
}

// SetWatchers sets the "watchers" field.
func (ruo *RepositoryUpdateOne) SetWatchers(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetWatchers()
	ruo.mutation.SetWatchers(i)
	return ruo
}

// SetNillableWatchers sets the "watchers" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableWatchers(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetWatchers(*i)
	}
	return ruo
}

// AddWatchers adds i to the "watchers" field.
func (ruo *RepositoryUpdateOne) AddWatchers(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddWatchers(i)
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RepositoryUpdateOne) SetOwnerID(id int64) *RepositoryUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableOwnerID(id *int64) *RepositoryUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RepositoryUpdateOne) SetOwner(u *User) *RepositoryUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (ruo *RepositoryUpdateOne) AddIssueIDs(ids ...int64) *RepositoryUpdateOne {
	ruo.mutation.AddIssueIDs(ids...)
	return ruo
}

// AddIssues adds the "issues" edges to the Issue entity.
func (ruo *RepositoryUpdateOne) AddIssues(i ...*Issue) *RepositoryUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddIssueIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RepositoryUpdateOne) ClearOwner() *RepositoryUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearIssues clears all "issues" edges to the Issue entity.
func (ruo *RepositoryUpdateOne) ClearIssues() *RepositoryUpdateOne {
	ruo.mutation.ClearIssues()
	return ruo
}

// RemoveIssueIDs removes the "issues" edge to Issue entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveIssueIDs(ids ...int64) *RepositoryUpdateOne {
	ruo.mutation.RemoveIssueIDs(ids...)
	return ruo
}

// RemoveIssues removes "issues" edges to Issue entities.
func (ruo *RepositoryUpdateOne) RemoveIssues(i ...*Issue) *RepositoryUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveIssueIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RepositoryUpdateOne) check() error {
	if v, ok := ruo.mutation.Visibility(); ok {
		if err := repository.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Repository.visibility": %w`, err)}
		}
	}
	return nil
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.NodeID(); ok {
		_spec.SetField(repository.FieldNodeID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.FullName(); ok {
		_spec.SetField(repository.FieldFullName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Private(); ok {
		_spec.SetField(repository.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HTMLURL(); ok {
		_spec.SetField(repository.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(repository.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Fork(); ok {
		_spec.SetField(repository.FieldFork, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ArchiveURL(); ok {
		_spec.SetField(repository.FieldArchiveURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.AssigneesURL(); ok {
		_spec.SetField(repository.FieldAssigneesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.BlobsURL(); ok {
		_spec.SetField(repository.FieldBlobsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.BranchesURL(); ok {
		_spec.SetField(repository.FieldBranchesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CollaboratorsURL(); ok {
		_spec.SetField(repository.FieldCollaboratorsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CommentsURL(); ok {
		_spec.SetField(repository.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CommitsURL(); ok {
		_spec.SetField(repository.FieldCommitsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CompareURL(); ok {
		_spec.SetField(repository.FieldCompareURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ContentsURL(); ok {
		_spec.SetField(repository.FieldContentsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ContributorsURL(); ok {
		_spec.SetField(repository.FieldContributorsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DeploymentsURL(); ok {
		_spec.SetField(repository.FieldDeploymentsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DownloadsURL(); ok {
		_spec.SetField(repository.FieldDownloadsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.EventsURL(); ok {
		_spec.SetField(repository.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ForksURL(); ok {
		_spec.SetField(repository.FieldForksURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GitCommitsURL(); ok {
		_spec.SetField(repository.FieldGitCommitsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GitRefsURL(); ok {
		_spec.SetField(repository.FieldGitRefsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GitTagsURL(); ok {
		_spec.SetField(repository.FieldGitTagsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GitURL(); ok {
		_spec.SetField(repository.FieldGitURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IssueCommentURL(); ok {
		_spec.SetField(repository.FieldIssueCommentURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IssueEventsURL(); ok {
		_spec.SetField(repository.FieldIssueEventsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IssuesURL(); ok {
		_spec.SetField(repository.FieldIssuesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.KeysURL(); ok {
		_spec.SetField(repository.FieldKeysURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.LabelsURL(); ok {
		_spec.SetField(repository.FieldLabelsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.LanguagesURL(); ok {
		_spec.SetField(repository.FieldLanguagesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MergesURL(); ok {
		_spec.SetField(repository.FieldMergesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MilestonesURL(); ok {
		_spec.SetField(repository.FieldMilestonesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.NotificationsURL(); ok {
		_spec.SetField(repository.FieldNotificationsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PullsURL(); ok {
		_spec.SetField(repository.FieldPullsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ReleasesURL(); ok {
		_spec.SetField(repository.FieldReleasesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SSHURL(); ok {
		_spec.SetField(repository.FieldSSHURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.StargazersURL(); ok {
		_spec.SetField(repository.FieldStargazersURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.StatusesURL(); ok {
		_spec.SetField(repository.FieldStatusesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SubscribersURL(); ok {
		_spec.SetField(repository.FieldSubscribersURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SubscriptionURL(); ok {
		_spec.SetField(repository.FieldSubscriptionURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TagsURL(); ok {
		_spec.SetField(repository.FieldTagsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TeamsURL(); ok {
		_spec.SetField(repository.FieldTeamsURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TreesURL(); ok {
		_spec.SetField(repository.FieldTreesURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CloneURL(); ok {
		_spec.SetField(repository.FieldCloneURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MirrorURL(); ok {
		_spec.SetField(repository.FieldMirrorURL, field.TypeString, value)
	}
	if ruo.mutation.MirrorURLCleared() {
		_spec.ClearField(repository.FieldMirrorURL, field.TypeString)
	}
	if value, ok := ruo.mutation.HooksURL(); ok {
		_spec.SetField(repository.FieldHooksURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SvnURL(); ok {
		_spec.SetField(repository.FieldSvnURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Homepage(); ok {
		_spec.SetField(repository.FieldHomepage, field.TypeString, value)
	}
	if ruo.mutation.HomepageCleared() {
		_spec.ClearField(repository.FieldHomepage, field.TypeString)
	}
	if value, ok := ruo.mutation.Language(); ok {
		_spec.SetField(repository.FieldLanguage, field.TypeString, value)
	}
	if ruo.mutation.LanguageCleared() {
		_spec.ClearField(repository.FieldLanguage, field.TypeString)
	}
	if value, ok := ruo.mutation.ForksCount(); ok {
		_spec.SetField(repository.FieldForksCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedForksCount(); ok {
		_spec.AddField(repository.FieldForksCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.StargazersCount(); ok {
		_spec.SetField(repository.FieldStargazersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedStargazersCount(); ok {
		_spec.AddField(repository.FieldStargazersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.WatchersCount(); ok {
		_spec.SetField(repository.FieldWatchersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedWatchersCount(); ok {
		_spec.AddField(repository.FieldWatchersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Size(); ok {
		_spec.SetField(repository.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedSize(); ok {
		_spec.AddField(repository.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := ruo.mutation.OpenIssuesCount(); ok {
		_spec.SetField(repository.FieldOpenIssuesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedOpenIssuesCount(); ok {
		_spec.AddField(repository.FieldOpenIssuesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.IsTemplate(); ok {
		_spec.SetField(repository.FieldIsTemplate, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Topics(); ok {
		_spec.SetField(repository.FieldTopics, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedTopics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, repository.FieldTopics, value)
		})
	}
	if value, ok := ruo.mutation.HasIssuesEnabled(); ok {
		_spec.SetField(repository.FieldHasIssuesEnabled, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HasProjects(); ok {
		_spec.SetField(repository.FieldHasProjects, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HasWiki(); ok {
		_spec.SetField(repository.FieldHasWiki, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HasPages(); ok {
		_spec.SetField(repository.FieldHasPages, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HasDownloads(); ok {
		_spec.SetField(repository.FieldHasDownloads, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.HasDiscussions(); ok {
		_spec.SetField(repository.FieldHasDiscussions, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Archived(); ok {
		_spec.SetField(repository.FieldArchived, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Disabled(); ok {
		_spec.SetField(repository.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Visibility(); ok {
		_spec.SetField(repository.FieldVisibility, field.TypeEnum, value)
	}
	if ruo.mutation.VisibilityCleared() {
		_spec.ClearField(repository.FieldVisibility, field.TypeEnum)
	}
	if value, ok := ruo.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.SubscribersCount(); ok {
		_spec.SetField(repository.FieldSubscribersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedSubscribersCount(); ok {
		_spec.AddField(repository.FieldSubscribersCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.NetworkCount(); ok {
		_spec.SetField(repository.FieldNetworkCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedNetworkCount(); ok {
		_spec.AddField(repository.FieldNetworkCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Forks(); ok {
		_spec.SetField(repository.FieldForks, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedForks(); ok {
		_spec.AddField(repository.FieldForks, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.OpenIssues(); ok {
		_spec.SetField(repository.FieldOpenIssues, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedOpenIssues(); ok {
		_spec.AddField(repository.FieldOpenIssues, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Watchers(); ok {
		_spec.SetField(repository.FieldWatchers, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedWatchers(); ok {
		_spec.AddField(repository.FieldWatchers, field.TypeInt64, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.OwnerTable,
			Columns: []string{repository.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedIssuesIDs(); len(nodes) > 0 && !ruo.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
