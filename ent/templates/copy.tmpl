{{ define "copy" }}

{{/* Add the base header for the generated file */}}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

{{ range $n := $.Nodes }}
    {{ $builder := $n.CreateName }}
    {{ $receiver := receiver $builder }}

	// Copy{{ $n.Name }} allows to create a new {{ $n.Name }} copying the existing
	// values of input.
    func ({{ $receiver }} *{{ $builder }}) Copy{{ $n.Name }}(input *{{ $n.Name }}) *{{ $builder }} {
	{{ $receiver }}.{{ print "Set" $n.ID.StructField }}(input.{{ $n.ID.StructField }})

        {{- range $f := $n.Fields }}
            {{- $setter := print "Set" $f.StructField }}
			{{- if $f.Nillable }}
				if input.{{ $f.StructField }} != nil {
					{{ $receiver }}.{{ $setter }}(*input.{{ $f.StructField }})
				}
			{{- else }}
				{{ $receiver }}.{{ $setter }}(input.{{ $f.StructField }})
			{{- end }}
        {{- end }}
        return {{ $receiver }}
    }

    {{ $builder := $n.UpdateOneName }}
    {{ $receiver := receiver $builder }}
	// Copy{{ $n.Name }} allows to update a {{ $n.Name }} copying the existing
	// values of input.
    func ({{ $receiver }} *{{ $builder }}) Copy{{ $n.Name }}(input *{{ $n.Name }}) *{{ $builder }} {
        {{- range $f := $n.Fields }}
            {{- $setter := print "Set" $f.StructField }}
			{{- if $f.Nillable }}
				if input.{{ $f.StructField }} != nil {
					{{ $receiver }}.{{ $setter }}(*input.{{ $f.StructField }})
				}
			{{- else }}
				{{ $receiver }}.{{ $setter }}(input.{{ $f.StructField }})
			{{- end }}
        {{- end }}
        return {{ $receiver }}
    }
{{ end }}

{{ end }}
