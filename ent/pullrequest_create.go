// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/pullrequest"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
	"github.com/gnolang/gh-sql/pkg/model"
)

// PullRequestCreate is the builder for creating a PullRequest entity.
type PullRequestCreate struct {
	config
	mutation *PullRequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetURL sets the "url" field.
func (prc *PullRequestCreate) SetURL(s string) *PullRequestCreate {
	prc.mutation.SetURL(s)
	return prc
}

// SetNodeID sets the "node_id" field.
func (prc *PullRequestCreate) SetNodeID(s string) *PullRequestCreate {
	prc.mutation.SetNodeID(s)
	return prc
}

// SetHTMLURL sets the "html_url" field.
func (prc *PullRequestCreate) SetHTMLURL(s string) *PullRequestCreate {
	prc.mutation.SetHTMLURL(s)
	return prc
}

// SetDiffURL sets the "diff_url" field.
func (prc *PullRequestCreate) SetDiffURL(s string) *PullRequestCreate {
	prc.mutation.SetDiffURL(s)
	return prc
}

// SetPatchURL sets the "patch_url" field.
func (prc *PullRequestCreate) SetPatchURL(s string) *PullRequestCreate {
	prc.mutation.SetPatchURL(s)
	return prc
}

// SetIssueURL sets the "issue_url" field.
func (prc *PullRequestCreate) SetIssueURL(s string) *PullRequestCreate {
	prc.mutation.SetIssueURL(s)
	return prc
}

// SetCommitsURL sets the "commits_url" field.
func (prc *PullRequestCreate) SetCommitsURL(s string) *PullRequestCreate {
	prc.mutation.SetCommitsURL(s)
	return prc
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (prc *PullRequestCreate) SetReviewCommentsURL(s string) *PullRequestCreate {
	prc.mutation.SetReviewCommentsURL(s)
	return prc
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (prc *PullRequestCreate) SetReviewCommentURL(s string) *PullRequestCreate {
	prc.mutation.SetReviewCommentURL(s)
	return prc
}

// SetCommentsURL sets the "comments_url" field.
func (prc *PullRequestCreate) SetCommentsURL(s string) *PullRequestCreate {
	prc.mutation.SetCommentsURL(s)
	return prc
}

// SetStatusesURL sets the "statuses_url" field.
func (prc *PullRequestCreate) SetStatusesURL(s string) *PullRequestCreate {
	prc.mutation.SetStatusesURL(s)
	return prc
}

// SetNumber sets the "number" field.
func (prc *PullRequestCreate) SetNumber(i int64) *PullRequestCreate {
	prc.mutation.SetNumber(i)
	return prc
}

// SetState sets the "state" field.
func (prc *PullRequestCreate) SetState(pu pullrequest.State) *PullRequestCreate {
	prc.mutation.SetState(pu)
	return prc
}

// SetLocked sets the "locked" field.
func (prc *PullRequestCreate) SetLocked(b bool) *PullRequestCreate {
	prc.mutation.SetLocked(b)
	return prc
}

// SetTitle sets the "title" field.
func (prc *PullRequestCreate) SetTitle(s string) *PullRequestCreate {
	prc.mutation.SetTitle(s)
	return prc
}

// SetBody sets the "body" field.
func (prc *PullRequestCreate) SetBody(s string) *PullRequestCreate {
	prc.mutation.SetBody(s)
	return prc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (prc *PullRequestCreate) SetNillableBody(s *string) *PullRequestCreate {
	if s != nil {
		prc.SetBody(*s)
	}
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PullRequestCreate) SetCreatedAt(t time.Time) *PullRequestCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PullRequestCreate) SetUpdatedAt(t time.Time) *PullRequestCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetClosedAt sets the "closed_at" field.
func (prc *PullRequestCreate) SetClosedAt(t time.Time) *PullRequestCreate {
	prc.mutation.SetClosedAt(t)
	return prc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (prc *PullRequestCreate) SetNillableClosedAt(t *time.Time) *PullRequestCreate {
	if t != nil {
		prc.SetClosedAt(*t)
	}
	return prc
}

// SetMergedAt sets the "merged_at" field.
func (prc *PullRequestCreate) SetMergedAt(t time.Time) *PullRequestCreate {
	prc.mutation.SetMergedAt(t)
	return prc
}

// SetNillableMergedAt sets the "merged_at" field if the given value is not nil.
func (prc *PullRequestCreate) SetNillableMergedAt(t *time.Time) *PullRequestCreate {
	if t != nil {
		prc.SetMergedAt(*t)
	}
	return prc
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (prc *PullRequestCreate) SetMergeCommitSha(s string) *PullRequestCreate {
	prc.mutation.SetMergeCommitSha(s)
	return prc
}

// SetNillableMergeCommitSha sets the "merge_commit_sha" field if the given value is not nil.
func (prc *PullRequestCreate) SetNillableMergeCommitSha(s *string) *PullRequestCreate {
	if s != nil {
		prc.SetMergeCommitSha(*s)
	}
	return prc
}

// SetHead sets the "head" field.
func (prc *PullRequestCreate) SetHead(mb model.PRBranch) *PullRequestCreate {
	prc.mutation.SetHead(mb)
	return prc
}

// SetBase sets the "base" field.
func (prc *PullRequestCreate) SetBase(mb model.PRBranch) *PullRequestCreate {
	prc.mutation.SetBase(mb)
	return prc
}

// SetDraft sets the "draft" field.
func (prc *PullRequestCreate) SetDraft(b bool) *PullRequestCreate {
	prc.mutation.SetDraft(b)
	return prc
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (prc *PullRequestCreate) SetNillableDraft(b *bool) *PullRequestCreate {
	if b != nil {
		prc.SetDraft(*b)
	}
	return prc
}

// SetAuthorAssociation sets the "author_association" field.
func (prc *PullRequestCreate) SetAuthorAssociation(ma model.AuthorAssociation) *PullRequestCreate {
	prc.mutation.SetAuthorAssociation(ma)
	return prc
}

// SetID sets the "id" field.
func (prc *PullRequestCreate) SetID(i int64) *PullRequestCreate {
	prc.mutation.SetID(i)
	return prc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (prc *PullRequestCreate) SetRepositoryID(id int64) *PullRequestCreate {
	prc.mutation.SetRepositoryID(id)
	return prc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (prc *PullRequestCreate) SetRepository(r *Repository) *PullRequestCreate {
	return prc.SetRepositoryID(r.ID)
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (prc *PullRequestCreate) SetIssueID(id int64) *PullRequestCreate {
	prc.mutation.SetIssueID(id)
	return prc
}

// SetIssue sets the "issue" edge to the Issue entity.
func (prc *PullRequestCreate) SetIssue(i *Issue) *PullRequestCreate {
	return prc.SetIssueID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (prc *PullRequestCreate) SetUserID(id int64) *PullRequestCreate {
	prc.mutation.SetUserID(id)
	return prc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (prc *PullRequestCreate) SetNillableUserID(id *int64) *PullRequestCreate {
	if id != nil {
		prc = prc.SetUserID(*id)
	}
	return prc
}

// SetUser sets the "user" edge to the User entity.
func (prc *PullRequestCreate) SetUser(u *User) *PullRequestCreate {
	return prc.SetUserID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (prc *PullRequestCreate) AddAssigneeIDs(ids ...int64) *PullRequestCreate {
	prc.mutation.AddAssigneeIDs(ids...)
	return prc
}

// AddAssignees adds the "assignees" edges to the User entity.
func (prc *PullRequestCreate) AddAssignees(u ...*User) *PullRequestCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return prc.AddAssigneeIDs(ids...)
}

// AddRequestedReviewerIDs adds the "requested_reviewers" edge to the User entity by IDs.
func (prc *PullRequestCreate) AddRequestedReviewerIDs(ids ...int64) *PullRequestCreate {
	prc.mutation.AddRequestedReviewerIDs(ids...)
	return prc
}

// AddRequestedReviewers adds the "requested_reviewers" edges to the User entity.
func (prc *PullRequestCreate) AddRequestedReviewers(u ...*User) *PullRequestCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return prc.AddRequestedReviewerIDs(ids...)
}

// Mutation returns the PullRequestMutation object of the builder.
func (prc *PullRequestCreate) Mutation() *PullRequestMutation {
	return prc.mutation
}

// Save creates the PullRequest in the database.
func (prc *PullRequestCreate) Save(ctx context.Context) (*PullRequest, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PullRequestCreate) SaveX(ctx context.Context) *PullRequest {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PullRequestCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PullRequestCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PullRequestCreate) check() error {
	if _, ok := prc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "PullRequest.url"`)}
	}
	if _, ok := prc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "PullRequest.node_id"`)}
	}
	if _, ok := prc.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "PullRequest.html_url"`)}
	}
	if _, ok := prc.mutation.DiffURL(); !ok {
		return &ValidationError{Name: "diff_url", err: errors.New(`ent: missing required field "PullRequest.diff_url"`)}
	}
	if _, ok := prc.mutation.PatchURL(); !ok {
		return &ValidationError{Name: "patch_url", err: errors.New(`ent: missing required field "PullRequest.patch_url"`)}
	}
	if _, ok := prc.mutation.IssueURL(); !ok {
		return &ValidationError{Name: "issue_url", err: errors.New(`ent: missing required field "PullRequest.issue_url"`)}
	}
	if _, ok := prc.mutation.CommitsURL(); !ok {
		return &ValidationError{Name: "commits_url", err: errors.New(`ent: missing required field "PullRequest.commits_url"`)}
	}
	if _, ok := prc.mutation.ReviewCommentsURL(); !ok {
		return &ValidationError{Name: "review_comments_url", err: errors.New(`ent: missing required field "PullRequest.review_comments_url"`)}
	}
	if _, ok := prc.mutation.ReviewCommentURL(); !ok {
		return &ValidationError{Name: "review_comment_url", err: errors.New(`ent: missing required field "PullRequest.review_comment_url"`)}
	}
	if _, ok := prc.mutation.CommentsURL(); !ok {
		return &ValidationError{Name: "comments_url", err: errors.New(`ent: missing required field "PullRequest.comments_url"`)}
	}
	if _, ok := prc.mutation.StatusesURL(); !ok {
		return &ValidationError{Name: "statuses_url", err: errors.New(`ent: missing required field "PullRequest.statuses_url"`)}
	}
	if _, ok := prc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "PullRequest.number"`)}
	}
	if _, ok := prc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "PullRequest.state"`)}
	}
	if v, ok := prc.mutation.State(); ok {
		if err := pullrequest.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PullRequest.state": %w`, err)}
		}
	}
	if _, ok := prc.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "PullRequest.locked"`)}
	}
	if _, ok := prc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PullRequest.title"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PullRequest.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PullRequest.updated_at"`)}
	}
	if _, ok := prc.mutation.Head(); !ok {
		return &ValidationError{Name: "head", err: errors.New(`ent: missing required field "PullRequest.head"`)}
	}
	if _, ok := prc.mutation.Base(); !ok {
		return &ValidationError{Name: "base", err: errors.New(`ent: missing required field "PullRequest.base"`)}
	}
	if _, ok := prc.mutation.AuthorAssociation(); !ok {
		return &ValidationError{Name: "author_association", err: errors.New(`ent: missing required field "PullRequest.author_association"`)}
	}
	if v, ok := prc.mutation.AuthorAssociation(); ok {
		if err := pullrequest.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "PullRequest.author_association": %w`, err)}
		}
	}
	if _, ok := prc.mutation.RepositoryID(); !ok {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "PullRequest.repository"`)}
	}
	if _, ok := prc.mutation.IssueID(); !ok {
		return &ValidationError{Name: "issue", err: errors.New(`ent: missing required edge "PullRequest.issue"`)}
	}
	return nil
}

func (prc *PullRequestCreate) sqlSave(ctx context.Context) (*PullRequest, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PullRequestCreate) createSpec() (*PullRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &PullRequest{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(pullrequest.Table, sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = prc.conflict
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.URL(); ok {
		_spec.SetField(pullrequest.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := prc.mutation.NodeID(); ok {
		_spec.SetField(pullrequest.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := prc.mutation.HTMLURL(); ok {
		_spec.SetField(pullrequest.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := prc.mutation.DiffURL(); ok {
		_spec.SetField(pullrequest.FieldDiffURL, field.TypeString, value)
		_node.DiffURL = value
	}
	if value, ok := prc.mutation.PatchURL(); ok {
		_spec.SetField(pullrequest.FieldPatchURL, field.TypeString, value)
		_node.PatchURL = value
	}
	if value, ok := prc.mutation.IssueURL(); ok {
		_spec.SetField(pullrequest.FieldIssueURL, field.TypeString, value)
		_node.IssueURL = value
	}
	if value, ok := prc.mutation.CommitsURL(); ok {
		_spec.SetField(pullrequest.FieldCommitsURL, field.TypeString, value)
		_node.CommitsURL = value
	}
	if value, ok := prc.mutation.ReviewCommentsURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentsURL, field.TypeString, value)
		_node.ReviewCommentsURL = value
	}
	if value, ok := prc.mutation.ReviewCommentURL(); ok {
		_spec.SetField(pullrequest.FieldReviewCommentURL, field.TypeString, value)
		_node.ReviewCommentURL = value
	}
	if value, ok := prc.mutation.CommentsURL(); ok {
		_spec.SetField(pullrequest.FieldCommentsURL, field.TypeString, value)
		_node.CommentsURL = value
	}
	if value, ok := prc.mutation.StatusesURL(); ok {
		_spec.SetField(pullrequest.FieldStatusesURL, field.TypeString, value)
		_node.StatusesURL = value
	}
	if value, ok := prc.mutation.Number(); ok {
		_spec.SetField(pullrequest.FieldNumber, field.TypeInt64, value)
		_node.Number = value
	}
	if value, ok := prc.mutation.State(); ok {
		_spec.SetField(pullrequest.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := prc.mutation.Locked(); ok {
		_spec.SetField(pullrequest.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := prc.mutation.Title(); ok {
		_spec.SetField(pullrequest.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := prc.mutation.Body(); ok {
		_spec.SetField(pullrequest.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(pullrequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequest.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := prc.mutation.MergedAt(); ok {
		_spec.SetField(pullrequest.FieldMergedAt, field.TypeTime, value)
		_node.MergedAt = value
	}
	if value, ok := prc.mutation.MergeCommitSha(); ok {
		_spec.SetField(pullrequest.FieldMergeCommitSha, field.TypeString, value)
		_node.MergeCommitSha = value
	}
	if value, ok := prc.mutation.Head(); ok {
		_spec.SetField(pullrequest.FieldHead, field.TypeJSON, value)
		_node.Head = value
	}
	if value, ok := prc.mutation.Base(); ok {
		_spec.SetField(pullrequest.FieldBase, field.TypeJSON, value)
		_node.Base = value
	}
	if value, ok := prc.mutation.Draft(); ok {
		_spec.SetField(pullrequest.FieldDraft, field.TypeBool, value)
		_node.Draft = &value
	}
	if value, ok := prc.mutation.AuthorAssociation(); ok {
		_spec.SetField(pullrequest.FieldAuthorAssociation, field.TypeEnum, value)
		_node.AuthorAssociation = value
	}
	if nodes := prc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_pull_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pullrequest.IssueTable,
			Columns: []string{pullrequest.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.issue_pull_request = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.UserTable,
			Columns: []string{pullrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_prs_created = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.AssigneesTable,
			Columns: pullrequest.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.RequestedReviewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pullrequest.RequestedReviewersTable,
			Columns: pullrequest.RequestedReviewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PullRequest.Create().
//		SetURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PullRequestUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (prc *PullRequestCreate) OnConflict(opts ...sql.ConflictOption) *PullRequestUpsertOne {
	prc.conflict = opts
	return &PullRequestUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prc *PullRequestCreate) OnConflictColumns(columns ...string) *PullRequestUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PullRequestUpsertOne{
		create: prc,
	}
}

type (
	// PullRequestUpsertOne is the builder for "upsert"-ing
	//  one PullRequest node.
	PullRequestUpsertOne struct {
		create *PullRequestCreate
	}

	// PullRequestUpsert is the "OnConflict" setter.
	PullRequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetURL sets the "url" field.
func (u *PullRequestUpsert) SetURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldURL)
	return u
}

// SetNodeID sets the "node_id" field.
func (u *PullRequestUpsert) SetNodeID(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateNodeID() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldNodeID)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *PullRequestUpsert) SetHTMLURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateHTMLURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldHTMLURL)
	return u
}

// SetDiffURL sets the "diff_url" field.
func (u *PullRequestUpsert) SetDiffURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldDiffURL, v)
	return u
}

// UpdateDiffURL sets the "diff_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateDiffURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldDiffURL)
	return u
}

// SetPatchURL sets the "patch_url" field.
func (u *PullRequestUpsert) SetPatchURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldPatchURL, v)
	return u
}

// UpdatePatchURL sets the "patch_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdatePatchURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldPatchURL)
	return u
}

// SetIssueURL sets the "issue_url" field.
func (u *PullRequestUpsert) SetIssueURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldIssueURL, v)
	return u
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateIssueURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldIssueURL)
	return u
}

// SetCommitsURL sets the "commits_url" field.
func (u *PullRequestUpsert) SetCommitsURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldCommitsURL, v)
	return u
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateCommitsURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldCommitsURL)
	return u
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (u *PullRequestUpsert) SetReviewCommentsURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldReviewCommentsURL, v)
	return u
}

// UpdateReviewCommentsURL sets the "review_comments_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateReviewCommentsURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldReviewCommentsURL)
	return u
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (u *PullRequestUpsert) SetReviewCommentURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldReviewCommentURL, v)
	return u
}

// UpdateReviewCommentURL sets the "review_comment_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateReviewCommentURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldReviewCommentURL)
	return u
}

// SetCommentsURL sets the "comments_url" field.
func (u *PullRequestUpsert) SetCommentsURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldCommentsURL, v)
	return u
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateCommentsURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldCommentsURL)
	return u
}

// SetStatusesURL sets the "statuses_url" field.
func (u *PullRequestUpsert) SetStatusesURL(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldStatusesURL, v)
	return u
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateStatusesURL() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldStatusesURL)
	return u
}

// SetNumber sets the "number" field.
func (u *PullRequestUpsert) SetNumber(v int64) *PullRequestUpsert {
	u.Set(pullrequest.FieldNumber, v)
	return u
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateNumber() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldNumber)
	return u
}

// AddNumber adds v to the "number" field.
func (u *PullRequestUpsert) AddNumber(v int64) *PullRequestUpsert {
	u.Add(pullrequest.FieldNumber, v)
	return u
}

// SetState sets the "state" field.
func (u *PullRequestUpsert) SetState(v pullrequest.State) *PullRequestUpsert {
	u.Set(pullrequest.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateState() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldState)
	return u
}

// SetLocked sets the "locked" field.
func (u *PullRequestUpsert) SetLocked(v bool) *PullRequestUpsert {
	u.Set(pullrequest.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateLocked() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldLocked)
	return u
}

// SetTitle sets the "title" field.
func (u *PullRequestUpsert) SetTitle(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateTitle() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldTitle)
	return u
}

// SetBody sets the "body" field.
func (u *PullRequestUpsert) SetBody(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateBody() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *PullRequestUpsert) ClearBody() *PullRequestUpsert {
	u.SetNull(pullrequest.FieldBody)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PullRequestUpsert) SetCreatedAt(v time.Time) *PullRequestUpsert {
	u.Set(pullrequest.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateCreatedAt() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PullRequestUpsert) SetUpdatedAt(v time.Time) *PullRequestUpsert {
	u.Set(pullrequest.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateUpdatedAt() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldUpdatedAt)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *PullRequestUpsert) SetClosedAt(v time.Time) *PullRequestUpsert {
	u.Set(pullrequest.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateClosedAt() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *PullRequestUpsert) ClearClosedAt() *PullRequestUpsert {
	u.SetNull(pullrequest.FieldClosedAt)
	return u
}

// SetMergedAt sets the "merged_at" field.
func (u *PullRequestUpsert) SetMergedAt(v time.Time) *PullRequestUpsert {
	u.Set(pullrequest.FieldMergedAt, v)
	return u
}

// UpdateMergedAt sets the "merged_at" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateMergedAt() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldMergedAt)
	return u
}

// ClearMergedAt clears the value of the "merged_at" field.
func (u *PullRequestUpsert) ClearMergedAt() *PullRequestUpsert {
	u.SetNull(pullrequest.FieldMergedAt)
	return u
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (u *PullRequestUpsert) SetMergeCommitSha(v string) *PullRequestUpsert {
	u.Set(pullrequest.FieldMergeCommitSha, v)
	return u
}

// UpdateMergeCommitSha sets the "merge_commit_sha" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateMergeCommitSha() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldMergeCommitSha)
	return u
}

// ClearMergeCommitSha clears the value of the "merge_commit_sha" field.
func (u *PullRequestUpsert) ClearMergeCommitSha() *PullRequestUpsert {
	u.SetNull(pullrequest.FieldMergeCommitSha)
	return u
}

// SetHead sets the "head" field.
func (u *PullRequestUpsert) SetHead(v model.PRBranch) *PullRequestUpsert {
	u.Set(pullrequest.FieldHead, v)
	return u
}

// UpdateHead sets the "head" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateHead() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldHead)
	return u
}

// SetBase sets the "base" field.
func (u *PullRequestUpsert) SetBase(v model.PRBranch) *PullRequestUpsert {
	u.Set(pullrequest.FieldBase, v)
	return u
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateBase() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldBase)
	return u
}

// SetDraft sets the "draft" field.
func (u *PullRequestUpsert) SetDraft(v bool) *PullRequestUpsert {
	u.Set(pullrequest.FieldDraft, v)
	return u
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateDraft() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldDraft)
	return u
}

// ClearDraft clears the value of the "draft" field.
func (u *PullRequestUpsert) ClearDraft() *PullRequestUpsert {
	u.SetNull(pullrequest.FieldDraft)
	return u
}

// SetAuthorAssociation sets the "author_association" field.
func (u *PullRequestUpsert) SetAuthorAssociation(v model.AuthorAssociation) *PullRequestUpsert {
	u.Set(pullrequest.FieldAuthorAssociation, v)
	return u
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *PullRequestUpsert) UpdateAuthorAssociation() *PullRequestUpsert {
	u.SetExcluded(pullrequest.FieldAuthorAssociation)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pullrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PullRequestUpsertOne) UpdateNewValues() *PullRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pullrequest.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PullRequestUpsertOne) Ignore() *PullRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PullRequestUpsertOne) DoNothing() *PullRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PullRequestCreate.OnConflict
// documentation for more info.
func (u *PullRequestUpsertOne) Update(set func(*PullRequestUpsert)) *PullRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PullRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *PullRequestUpsertOne) SetURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateURL()
	})
}

// SetNodeID sets the "node_id" field.
func (u *PullRequestUpsertOne) SetNodeID(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateNodeID() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateNodeID()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *PullRequestUpsertOne) SetHTMLURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateHTMLURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDiffURL sets the "diff_url" field.
func (u *PullRequestUpsertOne) SetDiffURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetDiffURL(v)
	})
}

// UpdateDiffURL sets the "diff_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateDiffURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateDiffURL()
	})
}

// SetPatchURL sets the "patch_url" field.
func (u *PullRequestUpsertOne) SetPatchURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetPatchURL(v)
	})
}

// UpdatePatchURL sets the "patch_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdatePatchURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdatePatchURL()
	})
}

// SetIssueURL sets the "issue_url" field.
func (u *PullRequestUpsertOne) SetIssueURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetIssueURL(v)
	})
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateIssueURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateIssueURL()
	})
}

// SetCommitsURL sets the "commits_url" field.
func (u *PullRequestUpsertOne) SetCommitsURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCommitsURL(v)
	})
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateCommitsURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCommitsURL()
	})
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (u *PullRequestUpsertOne) SetReviewCommentsURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetReviewCommentsURL(v)
	})
}

// UpdateReviewCommentsURL sets the "review_comments_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateReviewCommentsURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateReviewCommentsURL()
	})
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (u *PullRequestUpsertOne) SetReviewCommentURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetReviewCommentURL(v)
	})
}

// UpdateReviewCommentURL sets the "review_comment_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateReviewCommentURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateReviewCommentURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *PullRequestUpsertOne) SetCommentsURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateCommentsURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetStatusesURL sets the "statuses_url" field.
func (u *PullRequestUpsertOne) SetStatusesURL(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetStatusesURL(v)
	})
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateStatusesURL() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateStatusesURL()
	})
}

// SetNumber sets the "number" field.
func (u *PullRequestUpsertOne) SetNumber(v int64) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetNumber(v)
	})
}

// AddNumber adds v to the "number" field.
func (u *PullRequestUpsertOne) AddNumber(v int64) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.AddNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateNumber() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateNumber()
	})
}

// SetState sets the "state" field.
func (u *PullRequestUpsertOne) SetState(v pullrequest.State) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateState() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateState()
	})
}

// SetLocked sets the "locked" field.
func (u *PullRequestUpsertOne) SetLocked(v bool) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateLocked() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateLocked()
	})
}

// SetTitle sets the "title" field.
func (u *PullRequestUpsertOne) SetTitle(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateTitle() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *PullRequestUpsertOne) SetBody(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateBody() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *PullRequestUpsertOne) ClearBody() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearBody()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PullRequestUpsertOne) SetCreatedAt(v time.Time) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateCreatedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PullRequestUpsertOne) SetUpdatedAt(v time.Time) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateUpdatedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *PullRequestUpsertOne) SetClosedAt(v time.Time) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateClosedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *PullRequestUpsertOne) ClearClosedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearClosedAt()
	})
}

// SetMergedAt sets the "merged_at" field.
func (u *PullRequestUpsertOne) SetMergedAt(v time.Time) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetMergedAt(v)
	})
}

// UpdateMergedAt sets the "merged_at" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateMergedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateMergedAt()
	})
}

// ClearMergedAt clears the value of the "merged_at" field.
func (u *PullRequestUpsertOne) ClearMergedAt() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearMergedAt()
	})
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (u *PullRequestUpsertOne) SetMergeCommitSha(v string) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetMergeCommitSha(v)
	})
}

// UpdateMergeCommitSha sets the "merge_commit_sha" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateMergeCommitSha() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateMergeCommitSha()
	})
}

// ClearMergeCommitSha clears the value of the "merge_commit_sha" field.
func (u *PullRequestUpsertOne) ClearMergeCommitSha() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearMergeCommitSha()
	})
}

// SetHead sets the "head" field.
func (u *PullRequestUpsertOne) SetHead(v model.PRBranch) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetHead(v)
	})
}

// UpdateHead sets the "head" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateHead() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateHead()
	})
}

// SetBase sets the "base" field.
func (u *PullRequestUpsertOne) SetBase(v model.PRBranch) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateBase() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateBase()
	})
}

// SetDraft sets the "draft" field.
func (u *PullRequestUpsertOne) SetDraft(v bool) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateDraft() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PullRequestUpsertOne) ClearDraft() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearDraft()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *PullRequestUpsertOne) SetAuthorAssociation(v model.AuthorAssociation) *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *PullRequestUpsertOne) UpdateAuthorAssociation() *PullRequestUpsertOne {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// Exec executes the query.
func (u *PullRequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PullRequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PullRequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PullRequestUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PullRequestUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PullRequestCreateBulk is the builder for creating many PullRequest entities in bulk.
type PullRequestCreateBulk struct {
	config
	err      error
	builders []*PullRequestCreate
	conflict []sql.ConflictOption
}

// Save creates the PullRequest entities in the database.
func (prcb *PullRequestCreateBulk) Save(ctx context.Context) ([]*PullRequest, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PullRequest, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PullRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PullRequestCreateBulk) SaveX(ctx context.Context) []*PullRequest {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PullRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PullRequestCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PullRequest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PullRequestUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (prcb *PullRequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *PullRequestUpsertBulk {
	prcb.conflict = opts
	return &PullRequestUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prcb *PullRequestCreateBulk) OnConflictColumns(columns ...string) *PullRequestUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PullRequestUpsertBulk{
		create: prcb,
	}
}

// PullRequestUpsertBulk is the builder for "upsert"-ing
// a bulk of PullRequest nodes.
type PullRequestUpsertBulk struct {
	create *PullRequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pullrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PullRequestUpsertBulk) UpdateNewValues() *PullRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pullrequest.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PullRequest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PullRequestUpsertBulk) Ignore() *PullRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PullRequestUpsertBulk) DoNothing() *PullRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PullRequestCreateBulk.OnConflict
// documentation for more info.
func (u *PullRequestUpsertBulk) Update(set func(*PullRequestUpsert)) *PullRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PullRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *PullRequestUpsertBulk) SetURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateURL()
	})
}

// SetNodeID sets the "node_id" field.
func (u *PullRequestUpsertBulk) SetNodeID(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateNodeID() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateNodeID()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *PullRequestUpsertBulk) SetHTMLURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateHTMLURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDiffURL sets the "diff_url" field.
func (u *PullRequestUpsertBulk) SetDiffURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetDiffURL(v)
	})
}

// UpdateDiffURL sets the "diff_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateDiffURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateDiffURL()
	})
}

// SetPatchURL sets the "patch_url" field.
func (u *PullRequestUpsertBulk) SetPatchURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetPatchURL(v)
	})
}

// UpdatePatchURL sets the "patch_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdatePatchURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdatePatchURL()
	})
}

// SetIssueURL sets the "issue_url" field.
func (u *PullRequestUpsertBulk) SetIssueURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetIssueURL(v)
	})
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateIssueURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateIssueURL()
	})
}

// SetCommitsURL sets the "commits_url" field.
func (u *PullRequestUpsertBulk) SetCommitsURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCommitsURL(v)
	})
}

// UpdateCommitsURL sets the "commits_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateCommitsURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCommitsURL()
	})
}

// SetReviewCommentsURL sets the "review_comments_url" field.
func (u *PullRequestUpsertBulk) SetReviewCommentsURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetReviewCommentsURL(v)
	})
}

// UpdateReviewCommentsURL sets the "review_comments_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateReviewCommentsURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateReviewCommentsURL()
	})
}

// SetReviewCommentURL sets the "review_comment_url" field.
func (u *PullRequestUpsertBulk) SetReviewCommentURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetReviewCommentURL(v)
	})
}

// UpdateReviewCommentURL sets the "review_comment_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateReviewCommentURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateReviewCommentURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *PullRequestUpsertBulk) SetCommentsURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateCommentsURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetStatusesURL sets the "statuses_url" field.
func (u *PullRequestUpsertBulk) SetStatusesURL(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetStatusesURL(v)
	})
}

// UpdateStatusesURL sets the "statuses_url" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateStatusesURL() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateStatusesURL()
	})
}

// SetNumber sets the "number" field.
func (u *PullRequestUpsertBulk) SetNumber(v int64) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetNumber(v)
	})
}

// AddNumber adds v to the "number" field.
func (u *PullRequestUpsertBulk) AddNumber(v int64) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.AddNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateNumber() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateNumber()
	})
}

// SetState sets the "state" field.
func (u *PullRequestUpsertBulk) SetState(v pullrequest.State) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateState() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateState()
	})
}

// SetLocked sets the "locked" field.
func (u *PullRequestUpsertBulk) SetLocked(v bool) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateLocked() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateLocked()
	})
}

// SetTitle sets the "title" field.
func (u *PullRequestUpsertBulk) SetTitle(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateTitle() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *PullRequestUpsertBulk) SetBody(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateBody() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *PullRequestUpsertBulk) ClearBody() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearBody()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PullRequestUpsertBulk) SetCreatedAt(v time.Time) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateCreatedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PullRequestUpsertBulk) SetUpdatedAt(v time.Time) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateUpdatedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *PullRequestUpsertBulk) SetClosedAt(v time.Time) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateClosedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *PullRequestUpsertBulk) ClearClosedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearClosedAt()
	})
}

// SetMergedAt sets the "merged_at" field.
func (u *PullRequestUpsertBulk) SetMergedAt(v time.Time) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetMergedAt(v)
	})
}

// UpdateMergedAt sets the "merged_at" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateMergedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateMergedAt()
	})
}

// ClearMergedAt clears the value of the "merged_at" field.
func (u *PullRequestUpsertBulk) ClearMergedAt() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearMergedAt()
	})
}

// SetMergeCommitSha sets the "merge_commit_sha" field.
func (u *PullRequestUpsertBulk) SetMergeCommitSha(v string) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetMergeCommitSha(v)
	})
}

// UpdateMergeCommitSha sets the "merge_commit_sha" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateMergeCommitSha() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateMergeCommitSha()
	})
}

// ClearMergeCommitSha clears the value of the "merge_commit_sha" field.
func (u *PullRequestUpsertBulk) ClearMergeCommitSha() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearMergeCommitSha()
	})
}

// SetHead sets the "head" field.
func (u *PullRequestUpsertBulk) SetHead(v model.PRBranch) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetHead(v)
	})
}

// UpdateHead sets the "head" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateHead() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateHead()
	})
}

// SetBase sets the "base" field.
func (u *PullRequestUpsertBulk) SetBase(v model.PRBranch) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateBase() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateBase()
	})
}

// SetDraft sets the "draft" field.
func (u *PullRequestUpsertBulk) SetDraft(v bool) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateDraft() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PullRequestUpsertBulk) ClearDraft() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.ClearDraft()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *PullRequestUpsertBulk) SetAuthorAssociation(v model.AuthorAssociation) *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *PullRequestUpsertBulk) UpdateAuthorAssociation() *PullRequestUpsertBulk {
	return u.Update(func(s *PullRequestUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// Exec executes the query.
func (u *PullRequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PullRequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PullRequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PullRequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
