// Code generated by ent, DO NOT EDIT.

package repository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnolang/gh-sql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNodeID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldFullName, v))
}

// Private applies equality check predicate on the "private" field. It's identical to PrivateEQ.
func Private(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPrivate, v))
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHTMLURL, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// Fork applies equality check predicate on the "fork" field. It's identical to ForkEQ.
func Fork(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldFork, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// ArchiveURL applies equality check predicate on the "archive_url" field. It's identical to ArchiveURLEQ.
func ArchiveURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArchiveURL, v))
}

// AssigneesURL applies equality check predicate on the "assignees_url" field. It's identical to AssigneesURLEQ.
func AssigneesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldAssigneesURL, v))
}

// BlobsURL applies equality check predicate on the "blobs_url" field. It's identical to BlobsURLEQ.
func BlobsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldBlobsURL, v))
}

// BranchesURL applies equality check predicate on the "branches_url" field. It's identical to BranchesURLEQ.
func BranchesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldBranchesURL, v))
}

// CollaboratorsURL applies equality check predicate on the "collaborators_url" field. It's identical to CollaboratorsURLEQ.
func CollaboratorsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCollaboratorsURL, v))
}

// CommentsURL applies equality check predicate on the "comments_url" field. It's identical to CommentsURLEQ.
func CommentsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCommentsURL, v))
}

// CommitsURL applies equality check predicate on the "commits_url" field. It's identical to CommitsURLEQ.
func CommitsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCommitsURL, v))
}

// CompareURL applies equality check predicate on the "compare_url" field. It's identical to CompareURLEQ.
func CompareURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCompareURL, v))
}

// ContentsURL applies equality check predicate on the "contents_url" field. It's identical to ContentsURLEQ.
func ContentsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldContentsURL, v))
}

// ContributorsURL applies equality check predicate on the "contributors_url" field. It's identical to ContributorsURLEQ.
func ContributorsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldContributorsURL, v))
}

// DeploymentsURL applies equality check predicate on the "deployments_url" field. It's identical to DeploymentsURLEQ.
func DeploymentsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDeploymentsURL, v))
}

// DownloadsURL applies equality check predicate on the "downloads_url" field. It's identical to DownloadsURLEQ.
func DownloadsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDownloadsURL, v))
}

// EventsURL applies equality check predicate on the "events_url" field. It's identical to EventsURLEQ.
func EventsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldEventsURL, v))
}

// ForksURL applies equality check predicate on the "forks_url" field. It's identical to ForksURLEQ.
func ForksURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksURL, v))
}

// GitCommitsURL applies equality check predicate on the "git_commits_url" field. It's identical to GitCommitsURLEQ.
func GitCommitsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitCommitsURL, v))
}

// GitRefsURL applies equality check predicate on the "git_refs_url" field. It's identical to GitRefsURLEQ.
func GitRefsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitRefsURL, v))
}

// GitTagsURL applies equality check predicate on the "git_tags_url" field. It's identical to GitTagsURLEQ.
func GitTagsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitTagsURL, v))
}

// GitURL applies equality check predicate on the "git_url" field. It's identical to GitURLEQ.
func GitURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitURL, v))
}

// IssueCommentURL applies equality check predicate on the "issue_comment_url" field. It's identical to IssueCommentURLEQ.
func IssueCommentURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssueCommentURL, v))
}

// IssueEventsURL applies equality check predicate on the "issue_events_url" field. It's identical to IssueEventsURLEQ.
func IssueEventsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssueEventsURL, v))
}

// IssuesURL applies equality check predicate on the "issues_url" field. It's identical to IssuesURLEQ.
func IssuesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssuesURL, v))
}

// KeysURL applies equality check predicate on the "keys_url" field. It's identical to KeysURLEQ.
func KeysURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldKeysURL, v))
}

// LabelsURL applies equality check predicate on the "labels_url" field. It's identical to LabelsURLEQ.
func LabelsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLabelsURL, v))
}

// LanguagesURL applies equality check predicate on the "languages_url" field. It's identical to LanguagesURLEQ.
func LanguagesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguagesURL, v))
}

// MergesURL applies equality check predicate on the "merges_url" field. It's identical to MergesURLEQ.
func MergesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMergesURL, v))
}

// MilestonesURL applies equality check predicate on the "milestones_url" field. It's identical to MilestonesURLEQ.
func MilestonesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMilestonesURL, v))
}

// NotificationsURL applies equality check predicate on the "notifications_url" field. It's identical to NotificationsURLEQ.
func NotificationsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNotificationsURL, v))
}

// PullsURL applies equality check predicate on the "pulls_url" field. It's identical to PullsURLEQ.
func PullsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPullsURL, v))
}

// ReleasesURL applies equality check predicate on the "releases_url" field. It's identical to ReleasesURLEQ.
func ReleasesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldReleasesURL, v))
}

// SSHURL applies equality check predicate on the "ssh_url" field. It's identical to SSHURLEQ.
func SSHURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSSHURL, v))
}

// StargazersURL applies equality check predicate on the "stargazers_url" field. It's identical to StargazersURLEQ.
func StargazersURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStargazersURL, v))
}

// StatusesURL applies equality check predicate on the "statuses_url" field. It's identical to StatusesURLEQ.
func StatusesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatusesURL, v))
}

// SubscribersURL applies equality check predicate on the "subscribers_url" field. It's identical to SubscribersURLEQ.
func SubscribersURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscribersURL, v))
}

// SubscriptionURL applies equality check predicate on the "subscription_url" field. It's identical to SubscriptionURLEQ.
func SubscriptionURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscriptionURL, v))
}

// TagsURL applies equality check predicate on the "tags_url" field. It's identical to TagsURLEQ.
func TagsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTagsURL, v))
}

// TeamsURL applies equality check predicate on the "teams_url" field. It's identical to TeamsURLEQ.
func TeamsURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTeamsURL, v))
}

// TreesURL applies equality check predicate on the "trees_url" field. It's identical to TreesURLEQ.
func TreesURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTreesURL, v))
}

// CloneURL applies equality check predicate on the "clone_url" field. It's identical to CloneURLEQ.
func CloneURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCloneURL, v))
}

// MirrorURL applies equality check predicate on the "mirror_url" field. It's identical to MirrorURLEQ.
func MirrorURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMirrorURL, v))
}

// HooksURL applies equality check predicate on the "hooks_url" field. It's identical to HooksURLEQ.
func HooksURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHooksURL, v))
}

// SvnURL applies equality check predicate on the "svn_url" field. It's identical to SvnURLEQ.
func SvnURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSvnURL, v))
}

// Homepage applies equality check predicate on the "homepage" field. It's identical to HomepageEQ.
func Homepage(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHomepage, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguage, v))
}

// ForksCount applies equality check predicate on the "forks_count" field. It's identical to ForksCountEQ.
func ForksCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksCount, v))
}

// StargazersCount applies equality check predicate on the "stargazers_count" field. It's identical to StargazersCountEQ.
func StargazersCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStargazersCount, v))
}

// WatchersCount applies equality check predicate on the "watchers_count" field. It's identical to WatchersCountEQ.
func WatchersCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchersCount, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSize, v))
}

// DefaultBranch applies equality check predicate on the "default_branch" field. It's identical to DefaultBranchEQ.
func DefaultBranch(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDefaultBranch, v))
}

// OpenIssuesCount applies equality check predicate on the "open_issues_count" field. It's identical to OpenIssuesCountEQ.
func OpenIssuesCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssuesCount, v))
}

// IsTemplate applies equality check predicate on the "is_template" field. It's identical to IsTemplateEQ.
func IsTemplate(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIsTemplate, v))
}

// HasIssuesEnabled applies equality check predicate on the "has_issues_enabled" field. It's identical to HasIssuesEnabledEQ.
func HasIssuesEnabled(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasIssuesEnabled, v))
}

// HasProjects applies equality check predicate on the "has_projects" field. It's identical to HasProjectsEQ.
func HasProjects(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasProjects, v))
}

// HasWiki applies equality check predicate on the "has_wiki" field. It's identical to HasWikiEQ.
func HasWiki(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasWiki, v))
}

// HasPages applies equality check predicate on the "has_pages" field. It's identical to HasPagesEQ.
func HasPages(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasPages, v))
}

// HasDownloads applies equality check predicate on the "has_downloads" field. It's identical to HasDownloadsEQ.
func HasDownloads(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasDownloads, v))
}

// HasDiscussions applies equality check predicate on the "has_discussions" field. It's identical to HasDiscussionsEQ.
func HasDiscussions(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasDiscussions, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArchived, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDisabled, v))
}

// PushedAt applies equality check predicate on the "pushed_at" field. It's identical to PushedAtEQ.
func PushedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPushedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// SubscribersCount applies equality check predicate on the "subscribers_count" field. It's identical to SubscribersCountEQ.
func SubscribersCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscribersCount, v))
}

// NetworkCount applies equality check predicate on the "network_count" field. It's identical to NetworkCountEQ.
func NetworkCount(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNetworkCount, v))
}

// Forks applies equality check predicate on the "forks" field. It's identical to ForksEQ.
func Forks(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForks, v))
}

// OpenIssues applies equality check predicate on the "open_issues" field. It's identical to OpenIssuesEQ.
func OpenIssues(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssues, v))
}

// Watchers applies equality check predicate on the "watchers" field. It's identical to WatchersEQ.
func Watchers(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchers, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldNodeID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldName, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldFullName, v))
}

// PrivateEQ applies the EQ predicate on the "private" field.
func PrivateEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPrivate, v))
}

// PrivateNEQ applies the NEQ predicate on the "private" field.
func PrivateNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldPrivate, v))
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHTMLURL, v))
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHTMLURL, v))
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldHTMLURL, vs...))
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldHTMLURL, vs...))
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldHTMLURL, v))
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldHTMLURL, v))
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldHTMLURL, v))
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldHTMLURL, v))
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldHTMLURL, v))
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldHTMLURL, v))
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldHTMLURL, v))
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldHTMLURL, v))
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldHTMLURL, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDescription, v))
}

// ForkEQ applies the EQ predicate on the "fork" field.
func ForkEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldFork, v))
}

// ForkNEQ applies the NEQ predicate on the "fork" field.
func ForkNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldFork, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldURL, v))
}

// ArchiveURLEQ applies the EQ predicate on the "archive_url" field.
func ArchiveURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArchiveURL, v))
}

// ArchiveURLNEQ applies the NEQ predicate on the "archive_url" field.
func ArchiveURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldArchiveURL, v))
}

// ArchiveURLIn applies the In predicate on the "archive_url" field.
func ArchiveURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldArchiveURL, vs...))
}

// ArchiveURLNotIn applies the NotIn predicate on the "archive_url" field.
func ArchiveURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldArchiveURL, vs...))
}

// ArchiveURLGT applies the GT predicate on the "archive_url" field.
func ArchiveURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldArchiveURL, v))
}

// ArchiveURLGTE applies the GTE predicate on the "archive_url" field.
func ArchiveURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldArchiveURL, v))
}

// ArchiveURLLT applies the LT predicate on the "archive_url" field.
func ArchiveURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldArchiveURL, v))
}

// ArchiveURLLTE applies the LTE predicate on the "archive_url" field.
func ArchiveURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldArchiveURL, v))
}

// ArchiveURLContains applies the Contains predicate on the "archive_url" field.
func ArchiveURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldArchiveURL, v))
}

// ArchiveURLHasPrefix applies the HasPrefix predicate on the "archive_url" field.
func ArchiveURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldArchiveURL, v))
}

// ArchiveURLHasSuffix applies the HasSuffix predicate on the "archive_url" field.
func ArchiveURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldArchiveURL, v))
}

// ArchiveURLEqualFold applies the EqualFold predicate on the "archive_url" field.
func ArchiveURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldArchiveURL, v))
}

// ArchiveURLContainsFold applies the ContainsFold predicate on the "archive_url" field.
func ArchiveURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldArchiveURL, v))
}

// AssigneesURLEQ applies the EQ predicate on the "assignees_url" field.
func AssigneesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldAssigneesURL, v))
}

// AssigneesURLNEQ applies the NEQ predicate on the "assignees_url" field.
func AssigneesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldAssigneesURL, v))
}

// AssigneesURLIn applies the In predicate on the "assignees_url" field.
func AssigneesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldAssigneesURL, vs...))
}

// AssigneesURLNotIn applies the NotIn predicate on the "assignees_url" field.
func AssigneesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldAssigneesURL, vs...))
}

// AssigneesURLGT applies the GT predicate on the "assignees_url" field.
func AssigneesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldAssigneesURL, v))
}

// AssigneesURLGTE applies the GTE predicate on the "assignees_url" field.
func AssigneesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldAssigneesURL, v))
}

// AssigneesURLLT applies the LT predicate on the "assignees_url" field.
func AssigneesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldAssigneesURL, v))
}

// AssigneesURLLTE applies the LTE predicate on the "assignees_url" field.
func AssigneesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldAssigneesURL, v))
}

// AssigneesURLContains applies the Contains predicate on the "assignees_url" field.
func AssigneesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldAssigneesURL, v))
}

// AssigneesURLHasPrefix applies the HasPrefix predicate on the "assignees_url" field.
func AssigneesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldAssigneesURL, v))
}

// AssigneesURLHasSuffix applies the HasSuffix predicate on the "assignees_url" field.
func AssigneesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldAssigneesURL, v))
}

// AssigneesURLEqualFold applies the EqualFold predicate on the "assignees_url" field.
func AssigneesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldAssigneesURL, v))
}

// AssigneesURLContainsFold applies the ContainsFold predicate on the "assignees_url" field.
func AssigneesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldAssigneesURL, v))
}

// BlobsURLEQ applies the EQ predicate on the "blobs_url" field.
func BlobsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldBlobsURL, v))
}

// BlobsURLNEQ applies the NEQ predicate on the "blobs_url" field.
func BlobsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldBlobsURL, v))
}

// BlobsURLIn applies the In predicate on the "blobs_url" field.
func BlobsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldBlobsURL, vs...))
}

// BlobsURLNotIn applies the NotIn predicate on the "blobs_url" field.
func BlobsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldBlobsURL, vs...))
}

// BlobsURLGT applies the GT predicate on the "blobs_url" field.
func BlobsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldBlobsURL, v))
}

// BlobsURLGTE applies the GTE predicate on the "blobs_url" field.
func BlobsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldBlobsURL, v))
}

// BlobsURLLT applies the LT predicate on the "blobs_url" field.
func BlobsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldBlobsURL, v))
}

// BlobsURLLTE applies the LTE predicate on the "blobs_url" field.
func BlobsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldBlobsURL, v))
}

// BlobsURLContains applies the Contains predicate on the "blobs_url" field.
func BlobsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldBlobsURL, v))
}

// BlobsURLHasPrefix applies the HasPrefix predicate on the "blobs_url" field.
func BlobsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldBlobsURL, v))
}

// BlobsURLHasSuffix applies the HasSuffix predicate on the "blobs_url" field.
func BlobsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldBlobsURL, v))
}

// BlobsURLEqualFold applies the EqualFold predicate on the "blobs_url" field.
func BlobsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldBlobsURL, v))
}

// BlobsURLContainsFold applies the ContainsFold predicate on the "blobs_url" field.
func BlobsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldBlobsURL, v))
}

// BranchesURLEQ applies the EQ predicate on the "branches_url" field.
func BranchesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldBranchesURL, v))
}

// BranchesURLNEQ applies the NEQ predicate on the "branches_url" field.
func BranchesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldBranchesURL, v))
}

// BranchesURLIn applies the In predicate on the "branches_url" field.
func BranchesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldBranchesURL, vs...))
}

// BranchesURLNotIn applies the NotIn predicate on the "branches_url" field.
func BranchesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldBranchesURL, vs...))
}

// BranchesURLGT applies the GT predicate on the "branches_url" field.
func BranchesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldBranchesURL, v))
}

// BranchesURLGTE applies the GTE predicate on the "branches_url" field.
func BranchesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldBranchesURL, v))
}

// BranchesURLLT applies the LT predicate on the "branches_url" field.
func BranchesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldBranchesURL, v))
}

// BranchesURLLTE applies the LTE predicate on the "branches_url" field.
func BranchesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldBranchesURL, v))
}

// BranchesURLContains applies the Contains predicate on the "branches_url" field.
func BranchesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldBranchesURL, v))
}

// BranchesURLHasPrefix applies the HasPrefix predicate on the "branches_url" field.
func BranchesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldBranchesURL, v))
}

// BranchesURLHasSuffix applies the HasSuffix predicate on the "branches_url" field.
func BranchesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldBranchesURL, v))
}

// BranchesURLEqualFold applies the EqualFold predicate on the "branches_url" field.
func BranchesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldBranchesURL, v))
}

// BranchesURLContainsFold applies the ContainsFold predicate on the "branches_url" field.
func BranchesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldBranchesURL, v))
}

// CollaboratorsURLEQ applies the EQ predicate on the "collaborators_url" field.
func CollaboratorsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCollaboratorsURL, v))
}

// CollaboratorsURLNEQ applies the NEQ predicate on the "collaborators_url" field.
func CollaboratorsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCollaboratorsURL, v))
}

// CollaboratorsURLIn applies the In predicate on the "collaborators_url" field.
func CollaboratorsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCollaboratorsURL, vs...))
}

// CollaboratorsURLNotIn applies the NotIn predicate on the "collaborators_url" field.
func CollaboratorsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCollaboratorsURL, vs...))
}

// CollaboratorsURLGT applies the GT predicate on the "collaborators_url" field.
func CollaboratorsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCollaboratorsURL, v))
}

// CollaboratorsURLGTE applies the GTE predicate on the "collaborators_url" field.
func CollaboratorsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCollaboratorsURL, v))
}

// CollaboratorsURLLT applies the LT predicate on the "collaborators_url" field.
func CollaboratorsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCollaboratorsURL, v))
}

// CollaboratorsURLLTE applies the LTE predicate on the "collaborators_url" field.
func CollaboratorsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCollaboratorsURL, v))
}

// CollaboratorsURLContains applies the Contains predicate on the "collaborators_url" field.
func CollaboratorsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldCollaboratorsURL, v))
}

// CollaboratorsURLHasPrefix applies the HasPrefix predicate on the "collaborators_url" field.
func CollaboratorsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldCollaboratorsURL, v))
}

// CollaboratorsURLHasSuffix applies the HasSuffix predicate on the "collaborators_url" field.
func CollaboratorsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldCollaboratorsURL, v))
}

// CollaboratorsURLEqualFold applies the EqualFold predicate on the "collaborators_url" field.
func CollaboratorsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldCollaboratorsURL, v))
}

// CollaboratorsURLContainsFold applies the ContainsFold predicate on the "collaborators_url" field.
func CollaboratorsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldCollaboratorsURL, v))
}

// CommentsURLEQ applies the EQ predicate on the "comments_url" field.
func CommentsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCommentsURL, v))
}

// CommentsURLNEQ applies the NEQ predicate on the "comments_url" field.
func CommentsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCommentsURL, v))
}

// CommentsURLIn applies the In predicate on the "comments_url" field.
func CommentsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCommentsURL, vs...))
}

// CommentsURLNotIn applies the NotIn predicate on the "comments_url" field.
func CommentsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCommentsURL, vs...))
}

// CommentsURLGT applies the GT predicate on the "comments_url" field.
func CommentsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCommentsURL, v))
}

// CommentsURLGTE applies the GTE predicate on the "comments_url" field.
func CommentsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCommentsURL, v))
}

// CommentsURLLT applies the LT predicate on the "comments_url" field.
func CommentsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCommentsURL, v))
}

// CommentsURLLTE applies the LTE predicate on the "comments_url" field.
func CommentsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCommentsURL, v))
}

// CommentsURLContains applies the Contains predicate on the "comments_url" field.
func CommentsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldCommentsURL, v))
}

// CommentsURLHasPrefix applies the HasPrefix predicate on the "comments_url" field.
func CommentsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldCommentsURL, v))
}

// CommentsURLHasSuffix applies the HasSuffix predicate on the "comments_url" field.
func CommentsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldCommentsURL, v))
}

// CommentsURLEqualFold applies the EqualFold predicate on the "comments_url" field.
func CommentsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldCommentsURL, v))
}

// CommentsURLContainsFold applies the ContainsFold predicate on the "comments_url" field.
func CommentsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldCommentsURL, v))
}

// CommitsURLEQ applies the EQ predicate on the "commits_url" field.
func CommitsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCommitsURL, v))
}

// CommitsURLNEQ applies the NEQ predicate on the "commits_url" field.
func CommitsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCommitsURL, v))
}

// CommitsURLIn applies the In predicate on the "commits_url" field.
func CommitsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCommitsURL, vs...))
}

// CommitsURLNotIn applies the NotIn predicate on the "commits_url" field.
func CommitsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCommitsURL, vs...))
}

// CommitsURLGT applies the GT predicate on the "commits_url" field.
func CommitsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCommitsURL, v))
}

// CommitsURLGTE applies the GTE predicate on the "commits_url" field.
func CommitsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCommitsURL, v))
}

// CommitsURLLT applies the LT predicate on the "commits_url" field.
func CommitsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCommitsURL, v))
}

// CommitsURLLTE applies the LTE predicate on the "commits_url" field.
func CommitsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCommitsURL, v))
}

// CommitsURLContains applies the Contains predicate on the "commits_url" field.
func CommitsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldCommitsURL, v))
}

// CommitsURLHasPrefix applies the HasPrefix predicate on the "commits_url" field.
func CommitsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldCommitsURL, v))
}

// CommitsURLHasSuffix applies the HasSuffix predicate on the "commits_url" field.
func CommitsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldCommitsURL, v))
}

// CommitsURLEqualFold applies the EqualFold predicate on the "commits_url" field.
func CommitsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldCommitsURL, v))
}

// CommitsURLContainsFold applies the ContainsFold predicate on the "commits_url" field.
func CommitsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldCommitsURL, v))
}

// CompareURLEQ applies the EQ predicate on the "compare_url" field.
func CompareURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCompareURL, v))
}

// CompareURLNEQ applies the NEQ predicate on the "compare_url" field.
func CompareURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCompareURL, v))
}

// CompareURLIn applies the In predicate on the "compare_url" field.
func CompareURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCompareURL, vs...))
}

// CompareURLNotIn applies the NotIn predicate on the "compare_url" field.
func CompareURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCompareURL, vs...))
}

// CompareURLGT applies the GT predicate on the "compare_url" field.
func CompareURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCompareURL, v))
}

// CompareURLGTE applies the GTE predicate on the "compare_url" field.
func CompareURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCompareURL, v))
}

// CompareURLLT applies the LT predicate on the "compare_url" field.
func CompareURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCompareURL, v))
}

// CompareURLLTE applies the LTE predicate on the "compare_url" field.
func CompareURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCompareURL, v))
}

// CompareURLContains applies the Contains predicate on the "compare_url" field.
func CompareURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldCompareURL, v))
}

// CompareURLHasPrefix applies the HasPrefix predicate on the "compare_url" field.
func CompareURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldCompareURL, v))
}

// CompareURLHasSuffix applies the HasSuffix predicate on the "compare_url" field.
func CompareURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldCompareURL, v))
}

// CompareURLEqualFold applies the EqualFold predicate on the "compare_url" field.
func CompareURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldCompareURL, v))
}

// CompareURLContainsFold applies the ContainsFold predicate on the "compare_url" field.
func CompareURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldCompareURL, v))
}

// ContentsURLEQ applies the EQ predicate on the "contents_url" field.
func ContentsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldContentsURL, v))
}

// ContentsURLNEQ applies the NEQ predicate on the "contents_url" field.
func ContentsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldContentsURL, v))
}

// ContentsURLIn applies the In predicate on the "contents_url" field.
func ContentsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldContentsURL, vs...))
}

// ContentsURLNotIn applies the NotIn predicate on the "contents_url" field.
func ContentsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldContentsURL, vs...))
}

// ContentsURLGT applies the GT predicate on the "contents_url" field.
func ContentsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldContentsURL, v))
}

// ContentsURLGTE applies the GTE predicate on the "contents_url" field.
func ContentsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldContentsURL, v))
}

// ContentsURLLT applies the LT predicate on the "contents_url" field.
func ContentsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldContentsURL, v))
}

// ContentsURLLTE applies the LTE predicate on the "contents_url" field.
func ContentsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldContentsURL, v))
}

// ContentsURLContains applies the Contains predicate on the "contents_url" field.
func ContentsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldContentsURL, v))
}

// ContentsURLHasPrefix applies the HasPrefix predicate on the "contents_url" field.
func ContentsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldContentsURL, v))
}

// ContentsURLHasSuffix applies the HasSuffix predicate on the "contents_url" field.
func ContentsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldContentsURL, v))
}

// ContentsURLEqualFold applies the EqualFold predicate on the "contents_url" field.
func ContentsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldContentsURL, v))
}

// ContentsURLContainsFold applies the ContainsFold predicate on the "contents_url" field.
func ContentsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldContentsURL, v))
}

// ContributorsURLEQ applies the EQ predicate on the "contributors_url" field.
func ContributorsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldContributorsURL, v))
}

// ContributorsURLNEQ applies the NEQ predicate on the "contributors_url" field.
func ContributorsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldContributorsURL, v))
}

// ContributorsURLIn applies the In predicate on the "contributors_url" field.
func ContributorsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldContributorsURL, vs...))
}

// ContributorsURLNotIn applies the NotIn predicate on the "contributors_url" field.
func ContributorsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldContributorsURL, vs...))
}

// ContributorsURLGT applies the GT predicate on the "contributors_url" field.
func ContributorsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldContributorsURL, v))
}

// ContributorsURLGTE applies the GTE predicate on the "contributors_url" field.
func ContributorsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldContributorsURL, v))
}

// ContributorsURLLT applies the LT predicate on the "contributors_url" field.
func ContributorsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldContributorsURL, v))
}

// ContributorsURLLTE applies the LTE predicate on the "contributors_url" field.
func ContributorsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldContributorsURL, v))
}

// ContributorsURLContains applies the Contains predicate on the "contributors_url" field.
func ContributorsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldContributorsURL, v))
}

// ContributorsURLHasPrefix applies the HasPrefix predicate on the "contributors_url" field.
func ContributorsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldContributorsURL, v))
}

// ContributorsURLHasSuffix applies the HasSuffix predicate on the "contributors_url" field.
func ContributorsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldContributorsURL, v))
}

// ContributorsURLEqualFold applies the EqualFold predicate on the "contributors_url" field.
func ContributorsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldContributorsURL, v))
}

// ContributorsURLContainsFold applies the ContainsFold predicate on the "contributors_url" field.
func ContributorsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldContributorsURL, v))
}

// DeploymentsURLEQ applies the EQ predicate on the "deployments_url" field.
func DeploymentsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDeploymentsURL, v))
}

// DeploymentsURLNEQ applies the NEQ predicate on the "deployments_url" field.
func DeploymentsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDeploymentsURL, v))
}

// DeploymentsURLIn applies the In predicate on the "deployments_url" field.
func DeploymentsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDeploymentsURL, vs...))
}

// DeploymentsURLNotIn applies the NotIn predicate on the "deployments_url" field.
func DeploymentsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDeploymentsURL, vs...))
}

// DeploymentsURLGT applies the GT predicate on the "deployments_url" field.
func DeploymentsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDeploymentsURL, v))
}

// DeploymentsURLGTE applies the GTE predicate on the "deployments_url" field.
func DeploymentsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDeploymentsURL, v))
}

// DeploymentsURLLT applies the LT predicate on the "deployments_url" field.
func DeploymentsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDeploymentsURL, v))
}

// DeploymentsURLLTE applies the LTE predicate on the "deployments_url" field.
func DeploymentsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDeploymentsURL, v))
}

// DeploymentsURLContains applies the Contains predicate on the "deployments_url" field.
func DeploymentsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDeploymentsURL, v))
}

// DeploymentsURLHasPrefix applies the HasPrefix predicate on the "deployments_url" field.
func DeploymentsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDeploymentsURL, v))
}

// DeploymentsURLHasSuffix applies the HasSuffix predicate on the "deployments_url" field.
func DeploymentsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDeploymentsURL, v))
}

// DeploymentsURLEqualFold applies the EqualFold predicate on the "deployments_url" field.
func DeploymentsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDeploymentsURL, v))
}

// DeploymentsURLContainsFold applies the ContainsFold predicate on the "deployments_url" field.
func DeploymentsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDeploymentsURL, v))
}

// DownloadsURLEQ applies the EQ predicate on the "downloads_url" field.
func DownloadsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDownloadsURL, v))
}

// DownloadsURLNEQ applies the NEQ predicate on the "downloads_url" field.
func DownloadsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDownloadsURL, v))
}

// DownloadsURLIn applies the In predicate on the "downloads_url" field.
func DownloadsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDownloadsURL, vs...))
}

// DownloadsURLNotIn applies the NotIn predicate on the "downloads_url" field.
func DownloadsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDownloadsURL, vs...))
}

// DownloadsURLGT applies the GT predicate on the "downloads_url" field.
func DownloadsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDownloadsURL, v))
}

// DownloadsURLGTE applies the GTE predicate on the "downloads_url" field.
func DownloadsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDownloadsURL, v))
}

// DownloadsURLLT applies the LT predicate on the "downloads_url" field.
func DownloadsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDownloadsURL, v))
}

// DownloadsURLLTE applies the LTE predicate on the "downloads_url" field.
func DownloadsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDownloadsURL, v))
}

// DownloadsURLContains applies the Contains predicate on the "downloads_url" field.
func DownloadsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDownloadsURL, v))
}

// DownloadsURLHasPrefix applies the HasPrefix predicate on the "downloads_url" field.
func DownloadsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDownloadsURL, v))
}

// DownloadsURLHasSuffix applies the HasSuffix predicate on the "downloads_url" field.
func DownloadsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDownloadsURL, v))
}

// DownloadsURLEqualFold applies the EqualFold predicate on the "downloads_url" field.
func DownloadsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDownloadsURL, v))
}

// DownloadsURLContainsFold applies the ContainsFold predicate on the "downloads_url" field.
func DownloadsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDownloadsURL, v))
}

// EventsURLEQ applies the EQ predicate on the "events_url" field.
func EventsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldEventsURL, v))
}

// EventsURLNEQ applies the NEQ predicate on the "events_url" field.
func EventsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldEventsURL, v))
}

// EventsURLIn applies the In predicate on the "events_url" field.
func EventsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldEventsURL, vs...))
}

// EventsURLNotIn applies the NotIn predicate on the "events_url" field.
func EventsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldEventsURL, vs...))
}

// EventsURLGT applies the GT predicate on the "events_url" field.
func EventsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldEventsURL, v))
}

// EventsURLGTE applies the GTE predicate on the "events_url" field.
func EventsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldEventsURL, v))
}

// EventsURLLT applies the LT predicate on the "events_url" field.
func EventsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldEventsURL, v))
}

// EventsURLLTE applies the LTE predicate on the "events_url" field.
func EventsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldEventsURL, v))
}

// EventsURLContains applies the Contains predicate on the "events_url" field.
func EventsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldEventsURL, v))
}

// EventsURLHasPrefix applies the HasPrefix predicate on the "events_url" field.
func EventsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldEventsURL, v))
}

// EventsURLHasSuffix applies the HasSuffix predicate on the "events_url" field.
func EventsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldEventsURL, v))
}

// EventsURLEqualFold applies the EqualFold predicate on the "events_url" field.
func EventsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldEventsURL, v))
}

// EventsURLContainsFold applies the ContainsFold predicate on the "events_url" field.
func EventsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldEventsURL, v))
}

// ForksURLEQ applies the EQ predicate on the "forks_url" field.
func ForksURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksURL, v))
}

// ForksURLNEQ applies the NEQ predicate on the "forks_url" field.
func ForksURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldForksURL, v))
}

// ForksURLIn applies the In predicate on the "forks_url" field.
func ForksURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldForksURL, vs...))
}

// ForksURLNotIn applies the NotIn predicate on the "forks_url" field.
func ForksURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldForksURL, vs...))
}

// ForksURLGT applies the GT predicate on the "forks_url" field.
func ForksURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldForksURL, v))
}

// ForksURLGTE applies the GTE predicate on the "forks_url" field.
func ForksURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldForksURL, v))
}

// ForksURLLT applies the LT predicate on the "forks_url" field.
func ForksURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldForksURL, v))
}

// ForksURLLTE applies the LTE predicate on the "forks_url" field.
func ForksURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldForksURL, v))
}

// ForksURLContains applies the Contains predicate on the "forks_url" field.
func ForksURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldForksURL, v))
}

// ForksURLHasPrefix applies the HasPrefix predicate on the "forks_url" field.
func ForksURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldForksURL, v))
}

// ForksURLHasSuffix applies the HasSuffix predicate on the "forks_url" field.
func ForksURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldForksURL, v))
}

// ForksURLEqualFold applies the EqualFold predicate on the "forks_url" field.
func ForksURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldForksURL, v))
}

// ForksURLContainsFold applies the ContainsFold predicate on the "forks_url" field.
func ForksURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldForksURL, v))
}

// GitCommitsURLEQ applies the EQ predicate on the "git_commits_url" field.
func GitCommitsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitCommitsURL, v))
}

// GitCommitsURLNEQ applies the NEQ predicate on the "git_commits_url" field.
func GitCommitsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGitCommitsURL, v))
}

// GitCommitsURLIn applies the In predicate on the "git_commits_url" field.
func GitCommitsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldGitCommitsURL, vs...))
}

// GitCommitsURLNotIn applies the NotIn predicate on the "git_commits_url" field.
func GitCommitsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldGitCommitsURL, vs...))
}

// GitCommitsURLGT applies the GT predicate on the "git_commits_url" field.
func GitCommitsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldGitCommitsURL, v))
}

// GitCommitsURLGTE applies the GTE predicate on the "git_commits_url" field.
func GitCommitsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldGitCommitsURL, v))
}

// GitCommitsURLLT applies the LT predicate on the "git_commits_url" field.
func GitCommitsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldGitCommitsURL, v))
}

// GitCommitsURLLTE applies the LTE predicate on the "git_commits_url" field.
func GitCommitsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldGitCommitsURL, v))
}

// GitCommitsURLContains applies the Contains predicate on the "git_commits_url" field.
func GitCommitsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldGitCommitsURL, v))
}

// GitCommitsURLHasPrefix applies the HasPrefix predicate on the "git_commits_url" field.
func GitCommitsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldGitCommitsURL, v))
}

// GitCommitsURLHasSuffix applies the HasSuffix predicate on the "git_commits_url" field.
func GitCommitsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldGitCommitsURL, v))
}

// GitCommitsURLEqualFold applies the EqualFold predicate on the "git_commits_url" field.
func GitCommitsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldGitCommitsURL, v))
}

// GitCommitsURLContainsFold applies the ContainsFold predicate on the "git_commits_url" field.
func GitCommitsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldGitCommitsURL, v))
}

// GitRefsURLEQ applies the EQ predicate on the "git_refs_url" field.
func GitRefsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitRefsURL, v))
}

// GitRefsURLNEQ applies the NEQ predicate on the "git_refs_url" field.
func GitRefsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGitRefsURL, v))
}

// GitRefsURLIn applies the In predicate on the "git_refs_url" field.
func GitRefsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldGitRefsURL, vs...))
}

// GitRefsURLNotIn applies the NotIn predicate on the "git_refs_url" field.
func GitRefsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldGitRefsURL, vs...))
}

// GitRefsURLGT applies the GT predicate on the "git_refs_url" field.
func GitRefsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldGitRefsURL, v))
}

// GitRefsURLGTE applies the GTE predicate on the "git_refs_url" field.
func GitRefsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldGitRefsURL, v))
}

// GitRefsURLLT applies the LT predicate on the "git_refs_url" field.
func GitRefsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldGitRefsURL, v))
}

// GitRefsURLLTE applies the LTE predicate on the "git_refs_url" field.
func GitRefsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldGitRefsURL, v))
}

// GitRefsURLContains applies the Contains predicate on the "git_refs_url" field.
func GitRefsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldGitRefsURL, v))
}

// GitRefsURLHasPrefix applies the HasPrefix predicate on the "git_refs_url" field.
func GitRefsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldGitRefsURL, v))
}

// GitRefsURLHasSuffix applies the HasSuffix predicate on the "git_refs_url" field.
func GitRefsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldGitRefsURL, v))
}

// GitRefsURLEqualFold applies the EqualFold predicate on the "git_refs_url" field.
func GitRefsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldGitRefsURL, v))
}

// GitRefsURLContainsFold applies the ContainsFold predicate on the "git_refs_url" field.
func GitRefsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldGitRefsURL, v))
}

// GitTagsURLEQ applies the EQ predicate on the "git_tags_url" field.
func GitTagsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitTagsURL, v))
}

// GitTagsURLNEQ applies the NEQ predicate on the "git_tags_url" field.
func GitTagsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGitTagsURL, v))
}

// GitTagsURLIn applies the In predicate on the "git_tags_url" field.
func GitTagsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldGitTagsURL, vs...))
}

// GitTagsURLNotIn applies the NotIn predicate on the "git_tags_url" field.
func GitTagsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldGitTagsURL, vs...))
}

// GitTagsURLGT applies the GT predicate on the "git_tags_url" field.
func GitTagsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldGitTagsURL, v))
}

// GitTagsURLGTE applies the GTE predicate on the "git_tags_url" field.
func GitTagsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldGitTagsURL, v))
}

// GitTagsURLLT applies the LT predicate on the "git_tags_url" field.
func GitTagsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldGitTagsURL, v))
}

// GitTagsURLLTE applies the LTE predicate on the "git_tags_url" field.
func GitTagsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldGitTagsURL, v))
}

// GitTagsURLContains applies the Contains predicate on the "git_tags_url" field.
func GitTagsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldGitTagsURL, v))
}

// GitTagsURLHasPrefix applies the HasPrefix predicate on the "git_tags_url" field.
func GitTagsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldGitTagsURL, v))
}

// GitTagsURLHasSuffix applies the HasSuffix predicate on the "git_tags_url" field.
func GitTagsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldGitTagsURL, v))
}

// GitTagsURLEqualFold applies the EqualFold predicate on the "git_tags_url" field.
func GitTagsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldGitTagsURL, v))
}

// GitTagsURLContainsFold applies the ContainsFold predicate on the "git_tags_url" field.
func GitTagsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldGitTagsURL, v))
}

// GitURLEQ applies the EQ predicate on the "git_url" field.
func GitURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGitURL, v))
}

// GitURLNEQ applies the NEQ predicate on the "git_url" field.
func GitURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGitURL, v))
}

// GitURLIn applies the In predicate on the "git_url" field.
func GitURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldGitURL, vs...))
}

// GitURLNotIn applies the NotIn predicate on the "git_url" field.
func GitURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldGitURL, vs...))
}

// GitURLGT applies the GT predicate on the "git_url" field.
func GitURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldGitURL, v))
}

// GitURLGTE applies the GTE predicate on the "git_url" field.
func GitURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldGitURL, v))
}

// GitURLLT applies the LT predicate on the "git_url" field.
func GitURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldGitURL, v))
}

// GitURLLTE applies the LTE predicate on the "git_url" field.
func GitURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldGitURL, v))
}

// GitURLContains applies the Contains predicate on the "git_url" field.
func GitURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldGitURL, v))
}

// GitURLHasPrefix applies the HasPrefix predicate on the "git_url" field.
func GitURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldGitURL, v))
}

// GitURLHasSuffix applies the HasSuffix predicate on the "git_url" field.
func GitURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldGitURL, v))
}

// GitURLEqualFold applies the EqualFold predicate on the "git_url" field.
func GitURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldGitURL, v))
}

// GitURLContainsFold applies the ContainsFold predicate on the "git_url" field.
func GitURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldGitURL, v))
}

// IssueCommentURLEQ applies the EQ predicate on the "issue_comment_url" field.
func IssueCommentURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssueCommentURL, v))
}

// IssueCommentURLNEQ applies the NEQ predicate on the "issue_comment_url" field.
func IssueCommentURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldIssueCommentURL, v))
}

// IssueCommentURLIn applies the In predicate on the "issue_comment_url" field.
func IssueCommentURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldIssueCommentURL, vs...))
}

// IssueCommentURLNotIn applies the NotIn predicate on the "issue_comment_url" field.
func IssueCommentURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldIssueCommentURL, vs...))
}

// IssueCommentURLGT applies the GT predicate on the "issue_comment_url" field.
func IssueCommentURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldIssueCommentURL, v))
}

// IssueCommentURLGTE applies the GTE predicate on the "issue_comment_url" field.
func IssueCommentURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldIssueCommentURL, v))
}

// IssueCommentURLLT applies the LT predicate on the "issue_comment_url" field.
func IssueCommentURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldIssueCommentURL, v))
}

// IssueCommentURLLTE applies the LTE predicate on the "issue_comment_url" field.
func IssueCommentURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldIssueCommentURL, v))
}

// IssueCommentURLContains applies the Contains predicate on the "issue_comment_url" field.
func IssueCommentURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldIssueCommentURL, v))
}

// IssueCommentURLHasPrefix applies the HasPrefix predicate on the "issue_comment_url" field.
func IssueCommentURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldIssueCommentURL, v))
}

// IssueCommentURLHasSuffix applies the HasSuffix predicate on the "issue_comment_url" field.
func IssueCommentURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldIssueCommentURL, v))
}

// IssueCommentURLEqualFold applies the EqualFold predicate on the "issue_comment_url" field.
func IssueCommentURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldIssueCommentURL, v))
}

// IssueCommentURLContainsFold applies the ContainsFold predicate on the "issue_comment_url" field.
func IssueCommentURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldIssueCommentURL, v))
}

// IssueEventsURLEQ applies the EQ predicate on the "issue_events_url" field.
func IssueEventsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssueEventsURL, v))
}

// IssueEventsURLNEQ applies the NEQ predicate on the "issue_events_url" field.
func IssueEventsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldIssueEventsURL, v))
}

// IssueEventsURLIn applies the In predicate on the "issue_events_url" field.
func IssueEventsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldIssueEventsURL, vs...))
}

// IssueEventsURLNotIn applies the NotIn predicate on the "issue_events_url" field.
func IssueEventsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldIssueEventsURL, vs...))
}

// IssueEventsURLGT applies the GT predicate on the "issue_events_url" field.
func IssueEventsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldIssueEventsURL, v))
}

// IssueEventsURLGTE applies the GTE predicate on the "issue_events_url" field.
func IssueEventsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldIssueEventsURL, v))
}

// IssueEventsURLLT applies the LT predicate on the "issue_events_url" field.
func IssueEventsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldIssueEventsURL, v))
}

// IssueEventsURLLTE applies the LTE predicate on the "issue_events_url" field.
func IssueEventsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldIssueEventsURL, v))
}

// IssueEventsURLContains applies the Contains predicate on the "issue_events_url" field.
func IssueEventsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldIssueEventsURL, v))
}

// IssueEventsURLHasPrefix applies the HasPrefix predicate on the "issue_events_url" field.
func IssueEventsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldIssueEventsURL, v))
}

// IssueEventsURLHasSuffix applies the HasSuffix predicate on the "issue_events_url" field.
func IssueEventsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldIssueEventsURL, v))
}

// IssueEventsURLEqualFold applies the EqualFold predicate on the "issue_events_url" field.
func IssueEventsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldIssueEventsURL, v))
}

// IssueEventsURLContainsFold applies the ContainsFold predicate on the "issue_events_url" field.
func IssueEventsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldIssueEventsURL, v))
}

// IssuesURLEQ applies the EQ predicate on the "issues_url" field.
func IssuesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIssuesURL, v))
}

// IssuesURLNEQ applies the NEQ predicate on the "issues_url" field.
func IssuesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldIssuesURL, v))
}

// IssuesURLIn applies the In predicate on the "issues_url" field.
func IssuesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldIssuesURL, vs...))
}

// IssuesURLNotIn applies the NotIn predicate on the "issues_url" field.
func IssuesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldIssuesURL, vs...))
}

// IssuesURLGT applies the GT predicate on the "issues_url" field.
func IssuesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldIssuesURL, v))
}

// IssuesURLGTE applies the GTE predicate on the "issues_url" field.
func IssuesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldIssuesURL, v))
}

// IssuesURLLT applies the LT predicate on the "issues_url" field.
func IssuesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldIssuesURL, v))
}

// IssuesURLLTE applies the LTE predicate on the "issues_url" field.
func IssuesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldIssuesURL, v))
}

// IssuesURLContains applies the Contains predicate on the "issues_url" field.
func IssuesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldIssuesURL, v))
}

// IssuesURLHasPrefix applies the HasPrefix predicate on the "issues_url" field.
func IssuesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldIssuesURL, v))
}

// IssuesURLHasSuffix applies the HasSuffix predicate on the "issues_url" field.
func IssuesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldIssuesURL, v))
}

// IssuesURLEqualFold applies the EqualFold predicate on the "issues_url" field.
func IssuesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldIssuesURL, v))
}

// IssuesURLContainsFold applies the ContainsFold predicate on the "issues_url" field.
func IssuesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldIssuesURL, v))
}

// KeysURLEQ applies the EQ predicate on the "keys_url" field.
func KeysURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldKeysURL, v))
}

// KeysURLNEQ applies the NEQ predicate on the "keys_url" field.
func KeysURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldKeysURL, v))
}

// KeysURLIn applies the In predicate on the "keys_url" field.
func KeysURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldKeysURL, vs...))
}

// KeysURLNotIn applies the NotIn predicate on the "keys_url" field.
func KeysURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldKeysURL, vs...))
}

// KeysURLGT applies the GT predicate on the "keys_url" field.
func KeysURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldKeysURL, v))
}

// KeysURLGTE applies the GTE predicate on the "keys_url" field.
func KeysURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldKeysURL, v))
}

// KeysURLLT applies the LT predicate on the "keys_url" field.
func KeysURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldKeysURL, v))
}

// KeysURLLTE applies the LTE predicate on the "keys_url" field.
func KeysURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldKeysURL, v))
}

// KeysURLContains applies the Contains predicate on the "keys_url" field.
func KeysURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldKeysURL, v))
}

// KeysURLHasPrefix applies the HasPrefix predicate on the "keys_url" field.
func KeysURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldKeysURL, v))
}

// KeysURLHasSuffix applies the HasSuffix predicate on the "keys_url" field.
func KeysURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldKeysURL, v))
}

// KeysURLEqualFold applies the EqualFold predicate on the "keys_url" field.
func KeysURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldKeysURL, v))
}

// KeysURLContainsFold applies the ContainsFold predicate on the "keys_url" field.
func KeysURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldKeysURL, v))
}

// LabelsURLEQ applies the EQ predicate on the "labels_url" field.
func LabelsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLabelsURL, v))
}

// LabelsURLNEQ applies the NEQ predicate on the "labels_url" field.
func LabelsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLabelsURL, v))
}

// LabelsURLIn applies the In predicate on the "labels_url" field.
func LabelsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLabelsURL, vs...))
}

// LabelsURLNotIn applies the NotIn predicate on the "labels_url" field.
func LabelsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLabelsURL, vs...))
}

// LabelsURLGT applies the GT predicate on the "labels_url" field.
func LabelsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLabelsURL, v))
}

// LabelsURLGTE applies the GTE predicate on the "labels_url" field.
func LabelsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLabelsURL, v))
}

// LabelsURLLT applies the LT predicate on the "labels_url" field.
func LabelsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLabelsURL, v))
}

// LabelsURLLTE applies the LTE predicate on the "labels_url" field.
func LabelsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLabelsURL, v))
}

// LabelsURLContains applies the Contains predicate on the "labels_url" field.
func LabelsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldLabelsURL, v))
}

// LabelsURLHasPrefix applies the HasPrefix predicate on the "labels_url" field.
func LabelsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldLabelsURL, v))
}

// LabelsURLHasSuffix applies the HasSuffix predicate on the "labels_url" field.
func LabelsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldLabelsURL, v))
}

// LabelsURLEqualFold applies the EqualFold predicate on the "labels_url" field.
func LabelsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldLabelsURL, v))
}

// LabelsURLContainsFold applies the ContainsFold predicate on the "labels_url" field.
func LabelsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldLabelsURL, v))
}

// LanguagesURLEQ applies the EQ predicate on the "languages_url" field.
func LanguagesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguagesURL, v))
}

// LanguagesURLNEQ applies the NEQ predicate on the "languages_url" field.
func LanguagesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLanguagesURL, v))
}

// LanguagesURLIn applies the In predicate on the "languages_url" field.
func LanguagesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLanguagesURL, vs...))
}

// LanguagesURLNotIn applies the NotIn predicate on the "languages_url" field.
func LanguagesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLanguagesURL, vs...))
}

// LanguagesURLGT applies the GT predicate on the "languages_url" field.
func LanguagesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLanguagesURL, v))
}

// LanguagesURLGTE applies the GTE predicate on the "languages_url" field.
func LanguagesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLanguagesURL, v))
}

// LanguagesURLLT applies the LT predicate on the "languages_url" field.
func LanguagesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLanguagesURL, v))
}

// LanguagesURLLTE applies the LTE predicate on the "languages_url" field.
func LanguagesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLanguagesURL, v))
}

// LanguagesURLContains applies the Contains predicate on the "languages_url" field.
func LanguagesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldLanguagesURL, v))
}

// LanguagesURLHasPrefix applies the HasPrefix predicate on the "languages_url" field.
func LanguagesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldLanguagesURL, v))
}

// LanguagesURLHasSuffix applies the HasSuffix predicate on the "languages_url" field.
func LanguagesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldLanguagesURL, v))
}

// LanguagesURLEqualFold applies the EqualFold predicate on the "languages_url" field.
func LanguagesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldLanguagesURL, v))
}

// LanguagesURLContainsFold applies the ContainsFold predicate on the "languages_url" field.
func LanguagesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldLanguagesURL, v))
}

// MergesURLEQ applies the EQ predicate on the "merges_url" field.
func MergesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMergesURL, v))
}

// MergesURLNEQ applies the NEQ predicate on the "merges_url" field.
func MergesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldMergesURL, v))
}

// MergesURLIn applies the In predicate on the "merges_url" field.
func MergesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldMergesURL, vs...))
}

// MergesURLNotIn applies the NotIn predicate on the "merges_url" field.
func MergesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldMergesURL, vs...))
}

// MergesURLGT applies the GT predicate on the "merges_url" field.
func MergesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldMergesURL, v))
}

// MergesURLGTE applies the GTE predicate on the "merges_url" field.
func MergesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldMergesURL, v))
}

// MergesURLLT applies the LT predicate on the "merges_url" field.
func MergesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldMergesURL, v))
}

// MergesURLLTE applies the LTE predicate on the "merges_url" field.
func MergesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldMergesURL, v))
}

// MergesURLContains applies the Contains predicate on the "merges_url" field.
func MergesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldMergesURL, v))
}

// MergesURLHasPrefix applies the HasPrefix predicate on the "merges_url" field.
func MergesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldMergesURL, v))
}

// MergesURLHasSuffix applies the HasSuffix predicate on the "merges_url" field.
func MergesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldMergesURL, v))
}

// MergesURLEqualFold applies the EqualFold predicate on the "merges_url" field.
func MergesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldMergesURL, v))
}

// MergesURLContainsFold applies the ContainsFold predicate on the "merges_url" field.
func MergesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldMergesURL, v))
}

// MilestonesURLEQ applies the EQ predicate on the "milestones_url" field.
func MilestonesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMilestonesURL, v))
}

// MilestonesURLNEQ applies the NEQ predicate on the "milestones_url" field.
func MilestonesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldMilestonesURL, v))
}

// MilestonesURLIn applies the In predicate on the "milestones_url" field.
func MilestonesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldMilestonesURL, vs...))
}

// MilestonesURLNotIn applies the NotIn predicate on the "milestones_url" field.
func MilestonesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldMilestonesURL, vs...))
}

// MilestonesURLGT applies the GT predicate on the "milestones_url" field.
func MilestonesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldMilestonesURL, v))
}

// MilestonesURLGTE applies the GTE predicate on the "milestones_url" field.
func MilestonesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldMilestonesURL, v))
}

// MilestonesURLLT applies the LT predicate on the "milestones_url" field.
func MilestonesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldMilestonesURL, v))
}

// MilestonesURLLTE applies the LTE predicate on the "milestones_url" field.
func MilestonesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldMilestonesURL, v))
}

// MilestonesURLContains applies the Contains predicate on the "milestones_url" field.
func MilestonesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldMilestonesURL, v))
}

// MilestonesURLHasPrefix applies the HasPrefix predicate on the "milestones_url" field.
func MilestonesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldMilestonesURL, v))
}

// MilestonesURLHasSuffix applies the HasSuffix predicate on the "milestones_url" field.
func MilestonesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldMilestonesURL, v))
}

// MilestonesURLEqualFold applies the EqualFold predicate on the "milestones_url" field.
func MilestonesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldMilestonesURL, v))
}

// MilestonesURLContainsFold applies the ContainsFold predicate on the "milestones_url" field.
func MilestonesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldMilestonesURL, v))
}

// NotificationsURLEQ applies the EQ predicate on the "notifications_url" field.
func NotificationsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNotificationsURL, v))
}

// NotificationsURLNEQ applies the NEQ predicate on the "notifications_url" field.
func NotificationsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldNotificationsURL, v))
}

// NotificationsURLIn applies the In predicate on the "notifications_url" field.
func NotificationsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldNotificationsURL, vs...))
}

// NotificationsURLNotIn applies the NotIn predicate on the "notifications_url" field.
func NotificationsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldNotificationsURL, vs...))
}

// NotificationsURLGT applies the GT predicate on the "notifications_url" field.
func NotificationsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldNotificationsURL, v))
}

// NotificationsURLGTE applies the GTE predicate on the "notifications_url" field.
func NotificationsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldNotificationsURL, v))
}

// NotificationsURLLT applies the LT predicate on the "notifications_url" field.
func NotificationsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldNotificationsURL, v))
}

// NotificationsURLLTE applies the LTE predicate on the "notifications_url" field.
func NotificationsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldNotificationsURL, v))
}

// NotificationsURLContains applies the Contains predicate on the "notifications_url" field.
func NotificationsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldNotificationsURL, v))
}

// NotificationsURLHasPrefix applies the HasPrefix predicate on the "notifications_url" field.
func NotificationsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldNotificationsURL, v))
}

// NotificationsURLHasSuffix applies the HasSuffix predicate on the "notifications_url" field.
func NotificationsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldNotificationsURL, v))
}

// NotificationsURLEqualFold applies the EqualFold predicate on the "notifications_url" field.
func NotificationsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldNotificationsURL, v))
}

// NotificationsURLContainsFold applies the ContainsFold predicate on the "notifications_url" field.
func NotificationsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldNotificationsURL, v))
}

// PullsURLEQ applies the EQ predicate on the "pulls_url" field.
func PullsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPullsURL, v))
}

// PullsURLNEQ applies the NEQ predicate on the "pulls_url" field.
func PullsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldPullsURL, v))
}

// PullsURLIn applies the In predicate on the "pulls_url" field.
func PullsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldPullsURL, vs...))
}

// PullsURLNotIn applies the NotIn predicate on the "pulls_url" field.
func PullsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldPullsURL, vs...))
}

// PullsURLGT applies the GT predicate on the "pulls_url" field.
func PullsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldPullsURL, v))
}

// PullsURLGTE applies the GTE predicate on the "pulls_url" field.
func PullsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldPullsURL, v))
}

// PullsURLLT applies the LT predicate on the "pulls_url" field.
func PullsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldPullsURL, v))
}

// PullsURLLTE applies the LTE predicate on the "pulls_url" field.
func PullsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldPullsURL, v))
}

// PullsURLContains applies the Contains predicate on the "pulls_url" field.
func PullsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldPullsURL, v))
}

// PullsURLHasPrefix applies the HasPrefix predicate on the "pulls_url" field.
func PullsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldPullsURL, v))
}

// PullsURLHasSuffix applies the HasSuffix predicate on the "pulls_url" field.
func PullsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldPullsURL, v))
}

// PullsURLEqualFold applies the EqualFold predicate on the "pulls_url" field.
func PullsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldPullsURL, v))
}

// PullsURLContainsFold applies the ContainsFold predicate on the "pulls_url" field.
func PullsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldPullsURL, v))
}

// ReleasesURLEQ applies the EQ predicate on the "releases_url" field.
func ReleasesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldReleasesURL, v))
}

// ReleasesURLNEQ applies the NEQ predicate on the "releases_url" field.
func ReleasesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldReleasesURL, v))
}

// ReleasesURLIn applies the In predicate on the "releases_url" field.
func ReleasesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldReleasesURL, vs...))
}

// ReleasesURLNotIn applies the NotIn predicate on the "releases_url" field.
func ReleasesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldReleasesURL, vs...))
}

// ReleasesURLGT applies the GT predicate on the "releases_url" field.
func ReleasesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldReleasesURL, v))
}

// ReleasesURLGTE applies the GTE predicate on the "releases_url" field.
func ReleasesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldReleasesURL, v))
}

// ReleasesURLLT applies the LT predicate on the "releases_url" field.
func ReleasesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldReleasesURL, v))
}

// ReleasesURLLTE applies the LTE predicate on the "releases_url" field.
func ReleasesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldReleasesURL, v))
}

// ReleasesURLContains applies the Contains predicate on the "releases_url" field.
func ReleasesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldReleasesURL, v))
}

// ReleasesURLHasPrefix applies the HasPrefix predicate on the "releases_url" field.
func ReleasesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldReleasesURL, v))
}

// ReleasesURLHasSuffix applies the HasSuffix predicate on the "releases_url" field.
func ReleasesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldReleasesURL, v))
}

// ReleasesURLEqualFold applies the EqualFold predicate on the "releases_url" field.
func ReleasesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldReleasesURL, v))
}

// ReleasesURLContainsFold applies the ContainsFold predicate on the "releases_url" field.
func ReleasesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldReleasesURL, v))
}

// SSHURLEQ applies the EQ predicate on the "ssh_url" field.
func SSHURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSSHURL, v))
}

// SSHURLNEQ applies the NEQ predicate on the "ssh_url" field.
func SSHURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSSHURL, v))
}

// SSHURLIn applies the In predicate on the "ssh_url" field.
func SSHURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSSHURL, vs...))
}

// SSHURLNotIn applies the NotIn predicate on the "ssh_url" field.
func SSHURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSSHURL, vs...))
}

// SSHURLGT applies the GT predicate on the "ssh_url" field.
func SSHURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSSHURL, v))
}

// SSHURLGTE applies the GTE predicate on the "ssh_url" field.
func SSHURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSSHURL, v))
}

// SSHURLLT applies the LT predicate on the "ssh_url" field.
func SSHURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSSHURL, v))
}

// SSHURLLTE applies the LTE predicate on the "ssh_url" field.
func SSHURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSSHURL, v))
}

// SSHURLContains applies the Contains predicate on the "ssh_url" field.
func SSHURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldSSHURL, v))
}

// SSHURLHasPrefix applies the HasPrefix predicate on the "ssh_url" field.
func SSHURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldSSHURL, v))
}

// SSHURLHasSuffix applies the HasSuffix predicate on the "ssh_url" field.
func SSHURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldSSHURL, v))
}

// SSHURLEqualFold applies the EqualFold predicate on the "ssh_url" field.
func SSHURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldSSHURL, v))
}

// SSHURLContainsFold applies the ContainsFold predicate on the "ssh_url" field.
func SSHURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldSSHURL, v))
}

// StargazersURLEQ applies the EQ predicate on the "stargazers_url" field.
func StargazersURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStargazersURL, v))
}

// StargazersURLNEQ applies the NEQ predicate on the "stargazers_url" field.
func StargazersURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStargazersURL, v))
}

// StargazersURLIn applies the In predicate on the "stargazers_url" field.
func StargazersURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStargazersURL, vs...))
}

// StargazersURLNotIn applies the NotIn predicate on the "stargazers_url" field.
func StargazersURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStargazersURL, vs...))
}

// StargazersURLGT applies the GT predicate on the "stargazers_url" field.
func StargazersURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStargazersURL, v))
}

// StargazersURLGTE applies the GTE predicate on the "stargazers_url" field.
func StargazersURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStargazersURL, v))
}

// StargazersURLLT applies the LT predicate on the "stargazers_url" field.
func StargazersURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStargazersURL, v))
}

// StargazersURLLTE applies the LTE predicate on the "stargazers_url" field.
func StargazersURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStargazersURL, v))
}

// StargazersURLContains applies the Contains predicate on the "stargazers_url" field.
func StargazersURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldStargazersURL, v))
}

// StargazersURLHasPrefix applies the HasPrefix predicate on the "stargazers_url" field.
func StargazersURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldStargazersURL, v))
}

// StargazersURLHasSuffix applies the HasSuffix predicate on the "stargazers_url" field.
func StargazersURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldStargazersURL, v))
}

// StargazersURLEqualFold applies the EqualFold predicate on the "stargazers_url" field.
func StargazersURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldStargazersURL, v))
}

// StargazersURLContainsFold applies the ContainsFold predicate on the "stargazers_url" field.
func StargazersURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldStargazersURL, v))
}

// StatusesURLEQ applies the EQ predicate on the "statuses_url" field.
func StatusesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStatusesURL, v))
}

// StatusesURLNEQ applies the NEQ predicate on the "statuses_url" field.
func StatusesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStatusesURL, v))
}

// StatusesURLIn applies the In predicate on the "statuses_url" field.
func StatusesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStatusesURL, vs...))
}

// StatusesURLNotIn applies the NotIn predicate on the "statuses_url" field.
func StatusesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStatusesURL, vs...))
}

// StatusesURLGT applies the GT predicate on the "statuses_url" field.
func StatusesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStatusesURL, v))
}

// StatusesURLGTE applies the GTE predicate on the "statuses_url" field.
func StatusesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStatusesURL, v))
}

// StatusesURLLT applies the LT predicate on the "statuses_url" field.
func StatusesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStatusesURL, v))
}

// StatusesURLLTE applies the LTE predicate on the "statuses_url" field.
func StatusesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStatusesURL, v))
}

// StatusesURLContains applies the Contains predicate on the "statuses_url" field.
func StatusesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldStatusesURL, v))
}

// StatusesURLHasPrefix applies the HasPrefix predicate on the "statuses_url" field.
func StatusesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldStatusesURL, v))
}

// StatusesURLHasSuffix applies the HasSuffix predicate on the "statuses_url" field.
func StatusesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldStatusesURL, v))
}

// StatusesURLEqualFold applies the EqualFold predicate on the "statuses_url" field.
func StatusesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldStatusesURL, v))
}

// StatusesURLContainsFold applies the ContainsFold predicate on the "statuses_url" field.
func StatusesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldStatusesURL, v))
}

// SubscribersURLEQ applies the EQ predicate on the "subscribers_url" field.
func SubscribersURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscribersURL, v))
}

// SubscribersURLNEQ applies the NEQ predicate on the "subscribers_url" field.
func SubscribersURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSubscribersURL, v))
}

// SubscribersURLIn applies the In predicate on the "subscribers_url" field.
func SubscribersURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSubscribersURL, vs...))
}

// SubscribersURLNotIn applies the NotIn predicate on the "subscribers_url" field.
func SubscribersURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSubscribersURL, vs...))
}

// SubscribersURLGT applies the GT predicate on the "subscribers_url" field.
func SubscribersURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSubscribersURL, v))
}

// SubscribersURLGTE applies the GTE predicate on the "subscribers_url" field.
func SubscribersURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSubscribersURL, v))
}

// SubscribersURLLT applies the LT predicate on the "subscribers_url" field.
func SubscribersURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSubscribersURL, v))
}

// SubscribersURLLTE applies the LTE predicate on the "subscribers_url" field.
func SubscribersURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSubscribersURL, v))
}

// SubscribersURLContains applies the Contains predicate on the "subscribers_url" field.
func SubscribersURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldSubscribersURL, v))
}

// SubscribersURLHasPrefix applies the HasPrefix predicate on the "subscribers_url" field.
func SubscribersURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldSubscribersURL, v))
}

// SubscribersURLHasSuffix applies the HasSuffix predicate on the "subscribers_url" field.
func SubscribersURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldSubscribersURL, v))
}

// SubscribersURLEqualFold applies the EqualFold predicate on the "subscribers_url" field.
func SubscribersURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldSubscribersURL, v))
}

// SubscribersURLContainsFold applies the ContainsFold predicate on the "subscribers_url" field.
func SubscribersURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldSubscribersURL, v))
}

// SubscriptionURLEQ applies the EQ predicate on the "subscription_url" field.
func SubscriptionURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscriptionURL, v))
}

// SubscriptionURLNEQ applies the NEQ predicate on the "subscription_url" field.
func SubscriptionURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSubscriptionURL, v))
}

// SubscriptionURLIn applies the In predicate on the "subscription_url" field.
func SubscriptionURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSubscriptionURL, vs...))
}

// SubscriptionURLNotIn applies the NotIn predicate on the "subscription_url" field.
func SubscriptionURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSubscriptionURL, vs...))
}

// SubscriptionURLGT applies the GT predicate on the "subscription_url" field.
func SubscriptionURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSubscriptionURL, v))
}

// SubscriptionURLGTE applies the GTE predicate on the "subscription_url" field.
func SubscriptionURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSubscriptionURL, v))
}

// SubscriptionURLLT applies the LT predicate on the "subscription_url" field.
func SubscriptionURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSubscriptionURL, v))
}

// SubscriptionURLLTE applies the LTE predicate on the "subscription_url" field.
func SubscriptionURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSubscriptionURL, v))
}

// SubscriptionURLContains applies the Contains predicate on the "subscription_url" field.
func SubscriptionURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldSubscriptionURL, v))
}

// SubscriptionURLHasPrefix applies the HasPrefix predicate on the "subscription_url" field.
func SubscriptionURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldSubscriptionURL, v))
}

// SubscriptionURLHasSuffix applies the HasSuffix predicate on the "subscription_url" field.
func SubscriptionURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldSubscriptionURL, v))
}

// SubscriptionURLEqualFold applies the EqualFold predicate on the "subscription_url" field.
func SubscriptionURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldSubscriptionURL, v))
}

// SubscriptionURLContainsFold applies the ContainsFold predicate on the "subscription_url" field.
func SubscriptionURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldSubscriptionURL, v))
}

// TagsURLEQ applies the EQ predicate on the "tags_url" field.
func TagsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTagsURL, v))
}

// TagsURLNEQ applies the NEQ predicate on the "tags_url" field.
func TagsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldTagsURL, v))
}

// TagsURLIn applies the In predicate on the "tags_url" field.
func TagsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldTagsURL, vs...))
}

// TagsURLNotIn applies the NotIn predicate on the "tags_url" field.
func TagsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldTagsURL, vs...))
}

// TagsURLGT applies the GT predicate on the "tags_url" field.
func TagsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldTagsURL, v))
}

// TagsURLGTE applies the GTE predicate on the "tags_url" field.
func TagsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldTagsURL, v))
}

// TagsURLLT applies the LT predicate on the "tags_url" field.
func TagsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldTagsURL, v))
}

// TagsURLLTE applies the LTE predicate on the "tags_url" field.
func TagsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldTagsURL, v))
}

// TagsURLContains applies the Contains predicate on the "tags_url" field.
func TagsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldTagsURL, v))
}

// TagsURLHasPrefix applies the HasPrefix predicate on the "tags_url" field.
func TagsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldTagsURL, v))
}

// TagsURLHasSuffix applies the HasSuffix predicate on the "tags_url" field.
func TagsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldTagsURL, v))
}

// TagsURLEqualFold applies the EqualFold predicate on the "tags_url" field.
func TagsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldTagsURL, v))
}

// TagsURLContainsFold applies the ContainsFold predicate on the "tags_url" field.
func TagsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldTagsURL, v))
}

// TeamsURLEQ applies the EQ predicate on the "teams_url" field.
func TeamsURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTeamsURL, v))
}

// TeamsURLNEQ applies the NEQ predicate on the "teams_url" field.
func TeamsURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldTeamsURL, v))
}

// TeamsURLIn applies the In predicate on the "teams_url" field.
func TeamsURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldTeamsURL, vs...))
}

// TeamsURLNotIn applies the NotIn predicate on the "teams_url" field.
func TeamsURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldTeamsURL, vs...))
}

// TeamsURLGT applies the GT predicate on the "teams_url" field.
func TeamsURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldTeamsURL, v))
}

// TeamsURLGTE applies the GTE predicate on the "teams_url" field.
func TeamsURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldTeamsURL, v))
}

// TeamsURLLT applies the LT predicate on the "teams_url" field.
func TeamsURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldTeamsURL, v))
}

// TeamsURLLTE applies the LTE predicate on the "teams_url" field.
func TeamsURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldTeamsURL, v))
}

// TeamsURLContains applies the Contains predicate on the "teams_url" field.
func TeamsURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldTeamsURL, v))
}

// TeamsURLHasPrefix applies the HasPrefix predicate on the "teams_url" field.
func TeamsURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldTeamsURL, v))
}

// TeamsURLHasSuffix applies the HasSuffix predicate on the "teams_url" field.
func TeamsURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldTeamsURL, v))
}

// TeamsURLEqualFold applies the EqualFold predicate on the "teams_url" field.
func TeamsURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldTeamsURL, v))
}

// TeamsURLContainsFold applies the ContainsFold predicate on the "teams_url" field.
func TeamsURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldTeamsURL, v))
}

// TreesURLEQ applies the EQ predicate on the "trees_url" field.
func TreesURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTreesURL, v))
}

// TreesURLNEQ applies the NEQ predicate on the "trees_url" field.
func TreesURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldTreesURL, v))
}

// TreesURLIn applies the In predicate on the "trees_url" field.
func TreesURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldTreesURL, vs...))
}

// TreesURLNotIn applies the NotIn predicate on the "trees_url" field.
func TreesURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldTreesURL, vs...))
}

// TreesURLGT applies the GT predicate on the "trees_url" field.
func TreesURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldTreesURL, v))
}

// TreesURLGTE applies the GTE predicate on the "trees_url" field.
func TreesURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldTreesURL, v))
}

// TreesURLLT applies the LT predicate on the "trees_url" field.
func TreesURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldTreesURL, v))
}

// TreesURLLTE applies the LTE predicate on the "trees_url" field.
func TreesURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldTreesURL, v))
}

// TreesURLContains applies the Contains predicate on the "trees_url" field.
func TreesURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldTreesURL, v))
}

// TreesURLHasPrefix applies the HasPrefix predicate on the "trees_url" field.
func TreesURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldTreesURL, v))
}

// TreesURLHasSuffix applies the HasSuffix predicate on the "trees_url" field.
func TreesURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldTreesURL, v))
}

// TreesURLEqualFold applies the EqualFold predicate on the "trees_url" field.
func TreesURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldTreesURL, v))
}

// TreesURLContainsFold applies the ContainsFold predicate on the "trees_url" field.
func TreesURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldTreesURL, v))
}

// CloneURLEQ applies the EQ predicate on the "clone_url" field.
func CloneURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCloneURL, v))
}

// CloneURLNEQ applies the NEQ predicate on the "clone_url" field.
func CloneURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCloneURL, v))
}

// CloneURLIn applies the In predicate on the "clone_url" field.
func CloneURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCloneURL, vs...))
}

// CloneURLNotIn applies the NotIn predicate on the "clone_url" field.
func CloneURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCloneURL, vs...))
}

// CloneURLGT applies the GT predicate on the "clone_url" field.
func CloneURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCloneURL, v))
}

// CloneURLGTE applies the GTE predicate on the "clone_url" field.
func CloneURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCloneURL, v))
}

// CloneURLLT applies the LT predicate on the "clone_url" field.
func CloneURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCloneURL, v))
}

// CloneURLLTE applies the LTE predicate on the "clone_url" field.
func CloneURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCloneURL, v))
}

// CloneURLContains applies the Contains predicate on the "clone_url" field.
func CloneURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldCloneURL, v))
}

// CloneURLHasPrefix applies the HasPrefix predicate on the "clone_url" field.
func CloneURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldCloneURL, v))
}

// CloneURLHasSuffix applies the HasSuffix predicate on the "clone_url" field.
func CloneURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldCloneURL, v))
}

// CloneURLEqualFold applies the EqualFold predicate on the "clone_url" field.
func CloneURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldCloneURL, v))
}

// CloneURLContainsFold applies the ContainsFold predicate on the "clone_url" field.
func CloneURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldCloneURL, v))
}

// MirrorURLEQ applies the EQ predicate on the "mirror_url" field.
func MirrorURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldMirrorURL, v))
}

// MirrorURLNEQ applies the NEQ predicate on the "mirror_url" field.
func MirrorURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldMirrorURL, v))
}

// MirrorURLIn applies the In predicate on the "mirror_url" field.
func MirrorURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldMirrorURL, vs...))
}

// MirrorURLNotIn applies the NotIn predicate on the "mirror_url" field.
func MirrorURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldMirrorURL, vs...))
}

// MirrorURLGT applies the GT predicate on the "mirror_url" field.
func MirrorURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldMirrorURL, v))
}

// MirrorURLGTE applies the GTE predicate on the "mirror_url" field.
func MirrorURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldMirrorURL, v))
}

// MirrorURLLT applies the LT predicate on the "mirror_url" field.
func MirrorURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldMirrorURL, v))
}

// MirrorURLLTE applies the LTE predicate on the "mirror_url" field.
func MirrorURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldMirrorURL, v))
}

// MirrorURLContains applies the Contains predicate on the "mirror_url" field.
func MirrorURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldMirrorURL, v))
}

// MirrorURLHasPrefix applies the HasPrefix predicate on the "mirror_url" field.
func MirrorURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldMirrorURL, v))
}

// MirrorURLHasSuffix applies the HasSuffix predicate on the "mirror_url" field.
func MirrorURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldMirrorURL, v))
}

// MirrorURLIsNil applies the IsNil predicate on the "mirror_url" field.
func MirrorURLIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldMirrorURL))
}

// MirrorURLNotNil applies the NotNil predicate on the "mirror_url" field.
func MirrorURLNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldMirrorURL))
}

// MirrorURLEqualFold applies the EqualFold predicate on the "mirror_url" field.
func MirrorURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldMirrorURL, v))
}

// MirrorURLContainsFold applies the ContainsFold predicate on the "mirror_url" field.
func MirrorURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldMirrorURL, v))
}

// HooksURLEQ applies the EQ predicate on the "hooks_url" field.
func HooksURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHooksURL, v))
}

// HooksURLNEQ applies the NEQ predicate on the "hooks_url" field.
func HooksURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHooksURL, v))
}

// HooksURLIn applies the In predicate on the "hooks_url" field.
func HooksURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldHooksURL, vs...))
}

// HooksURLNotIn applies the NotIn predicate on the "hooks_url" field.
func HooksURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldHooksURL, vs...))
}

// HooksURLGT applies the GT predicate on the "hooks_url" field.
func HooksURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldHooksURL, v))
}

// HooksURLGTE applies the GTE predicate on the "hooks_url" field.
func HooksURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldHooksURL, v))
}

// HooksURLLT applies the LT predicate on the "hooks_url" field.
func HooksURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldHooksURL, v))
}

// HooksURLLTE applies the LTE predicate on the "hooks_url" field.
func HooksURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldHooksURL, v))
}

// HooksURLContains applies the Contains predicate on the "hooks_url" field.
func HooksURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldHooksURL, v))
}

// HooksURLHasPrefix applies the HasPrefix predicate on the "hooks_url" field.
func HooksURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldHooksURL, v))
}

// HooksURLHasSuffix applies the HasSuffix predicate on the "hooks_url" field.
func HooksURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldHooksURL, v))
}

// HooksURLEqualFold applies the EqualFold predicate on the "hooks_url" field.
func HooksURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldHooksURL, v))
}

// HooksURLContainsFold applies the ContainsFold predicate on the "hooks_url" field.
func HooksURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldHooksURL, v))
}

// SvnURLEQ applies the EQ predicate on the "svn_url" field.
func SvnURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSvnURL, v))
}

// SvnURLNEQ applies the NEQ predicate on the "svn_url" field.
func SvnURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSvnURL, v))
}

// SvnURLIn applies the In predicate on the "svn_url" field.
func SvnURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSvnURL, vs...))
}

// SvnURLNotIn applies the NotIn predicate on the "svn_url" field.
func SvnURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSvnURL, vs...))
}

// SvnURLGT applies the GT predicate on the "svn_url" field.
func SvnURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSvnURL, v))
}

// SvnURLGTE applies the GTE predicate on the "svn_url" field.
func SvnURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSvnURL, v))
}

// SvnURLLT applies the LT predicate on the "svn_url" field.
func SvnURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSvnURL, v))
}

// SvnURLLTE applies the LTE predicate on the "svn_url" field.
func SvnURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSvnURL, v))
}

// SvnURLContains applies the Contains predicate on the "svn_url" field.
func SvnURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldSvnURL, v))
}

// SvnURLHasPrefix applies the HasPrefix predicate on the "svn_url" field.
func SvnURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldSvnURL, v))
}

// SvnURLHasSuffix applies the HasSuffix predicate on the "svn_url" field.
func SvnURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldSvnURL, v))
}

// SvnURLEqualFold applies the EqualFold predicate on the "svn_url" field.
func SvnURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldSvnURL, v))
}

// SvnURLContainsFold applies the ContainsFold predicate on the "svn_url" field.
func SvnURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldSvnURL, v))
}

// HomepageEQ applies the EQ predicate on the "homepage" field.
func HomepageEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHomepage, v))
}

// HomepageNEQ applies the NEQ predicate on the "homepage" field.
func HomepageNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHomepage, v))
}

// HomepageIn applies the In predicate on the "homepage" field.
func HomepageIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldHomepage, vs...))
}

// HomepageNotIn applies the NotIn predicate on the "homepage" field.
func HomepageNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldHomepage, vs...))
}

// HomepageGT applies the GT predicate on the "homepage" field.
func HomepageGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldHomepage, v))
}

// HomepageGTE applies the GTE predicate on the "homepage" field.
func HomepageGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldHomepage, v))
}

// HomepageLT applies the LT predicate on the "homepage" field.
func HomepageLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldHomepage, v))
}

// HomepageLTE applies the LTE predicate on the "homepage" field.
func HomepageLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldHomepage, v))
}

// HomepageContains applies the Contains predicate on the "homepage" field.
func HomepageContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldHomepage, v))
}

// HomepageHasPrefix applies the HasPrefix predicate on the "homepage" field.
func HomepageHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldHomepage, v))
}

// HomepageHasSuffix applies the HasSuffix predicate on the "homepage" field.
func HomepageHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldHomepage, v))
}

// HomepageIsNil applies the IsNil predicate on the "homepage" field.
func HomepageIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldHomepage))
}

// HomepageNotNil applies the NotNil predicate on the "homepage" field.
func HomepageNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldHomepage))
}

// HomepageEqualFold applies the EqualFold predicate on the "homepage" field.
func HomepageEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldHomepage, v))
}

// HomepageContainsFold applies the ContainsFold predicate on the "homepage" field.
func HomepageContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldHomepage, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldLanguage, v))
}

// ForksCountEQ applies the EQ predicate on the "forks_count" field.
func ForksCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksCount, v))
}

// ForksCountNEQ applies the NEQ predicate on the "forks_count" field.
func ForksCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldForksCount, v))
}

// ForksCountIn applies the In predicate on the "forks_count" field.
func ForksCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldForksCount, vs...))
}

// ForksCountNotIn applies the NotIn predicate on the "forks_count" field.
func ForksCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldForksCount, vs...))
}

// ForksCountGT applies the GT predicate on the "forks_count" field.
func ForksCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldForksCount, v))
}

// ForksCountGTE applies the GTE predicate on the "forks_count" field.
func ForksCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldForksCount, v))
}

// ForksCountLT applies the LT predicate on the "forks_count" field.
func ForksCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldForksCount, v))
}

// ForksCountLTE applies the LTE predicate on the "forks_count" field.
func ForksCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldForksCount, v))
}

// StargazersCountEQ applies the EQ predicate on the "stargazers_count" field.
func StargazersCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStargazersCount, v))
}

// StargazersCountNEQ applies the NEQ predicate on the "stargazers_count" field.
func StargazersCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStargazersCount, v))
}

// StargazersCountIn applies the In predicate on the "stargazers_count" field.
func StargazersCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStargazersCount, vs...))
}

// StargazersCountNotIn applies the NotIn predicate on the "stargazers_count" field.
func StargazersCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStargazersCount, vs...))
}

// StargazersCountGT applies the GT predicate on the "stargazers_count" field.
func StargazersCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStargazersCount, v))
}

// StargazersCountGTE applies the GTE predicate on the "stargazers_count" field.
func StargazersCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStargazersCount, v))
}

// StargazersCountLT applies the LT predicate on the "stargazers_count" field.
func StargazersCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStargazersCount, v))
}

// StargazersCountLTE applies the LTE predicate on the "stargazers_count" field.
func StargazersCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStargazersCount, v))
}

// WatchersCountEQ applies the EQ predicate on the "watchers_count" field.
func WatchersCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchersCount, v))
}

// WatchersCountNEQ applies the NEQ predicate on the "watchers_count" field.
func WatchersCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldWatchersCount, v))
}

// WatchersCountIn applies the In predicate on the "watchers_count" field.
func WatchersCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldWatchersCount, vs...))
}

// WatchersCountNotIn applies the NotIn predicate on the "watchers_count" field.
func WatchersCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldWatchersCount, vs...))
}

// WatchersCountGT applies the GT predicate on the "watchers_count" field.
func WatchersCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldWatchersCount, v))
}

// WatchersCountGTE applies the GTE predicate on the "watchers_count" field.
func WatchersCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldWatchersCount, v))
}

// WatchersCountLT applies the LT predicate on the "watchers_count" field.
func WatchersCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldWatchersCount, v))
}

// WatchersCountLTE applies the LTE predicate on the "watchers_count" field.
func WatchersCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldWatchersCount, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSize, v))
}

// DefaultBranchEQ applies the EQ predicate on the "default_branch" field.
func DefaultBranchEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDefaultBranch, v))
}

// DefaultBranchNEQ applies the NEQ predicate on the "default_branch" field.
func DefaultBranchNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDefaultBranch, v))
}

// DefaultBranchIn applies the In predicate on the "default_branch" field.
func DefaultBranchIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDefaultBranch, vs...))
}

// DefaultBranchNotIn applies the NotIn predicate on the "default_branch" field.
func DefaultBranchNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDefaultBranch, vs...))
}

// DefaultBranchGT applies the GT predicate on the "default_branch" field.
func DefaultBranchGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDefaultBranch, v))
}

// DefaultBranchGTE applies the GTE predicate on the "default_branch" field.
func DefaultBranchGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDefaultBranch, v))
}

// DefaultBranchLT applies the LT predicate on the "default_branch" field.
func DefaultBranchLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDefaultBranch, v))
}

// DefaultBranchLTE applies the LTE predicate on the "default_branch" field.
func DefaultBranchLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDefaultBranch, v))
}

// DefaultBranchContains applies the Contains predicate on the "default_branch" field.
func DefaultBranchContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDefaultBranch, v))
}

// DefaultBranchHasPrefix applies the HasPrefix predicate on the "default_branch" field.
func DefaultBranchHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDefaultBranch, v))
}

// DefaultBranchHasSuffix applies the HasSuffix predicate on the "default_branch" field.
func DefaultBranchHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDefaultBranch, v))
}

// DefaultBranchEqualFold applies the EqualFold predicate on the "default_branch" field.
func DefaultBranchEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDefaultBranch, v))
}

// DefaultBranchContainsFold applies the ContainsFold predicate on the "default_branch" field.
func DefaultBranchContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDefaultBranch, v))
}

// OpenIssuesCountEQ applies the EQ predicate on the "open_issues_count" field.
func OpenIssuesCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssuesCount, v))
}

// OpenIssuesCountNEQ applies the NEQ predicate on the "open_issues_count" field.
func OpenIssuesCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldOpenIssuesCount, v))
}

// OpenIssuesCountIn applies the In predicate on the "open_issues_count" field.
func OpenIssuesCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldOpenIssuesCount, vs...))
}

// OpenIssuesCountNotIn applies the NotIn predicate on the "open_issues_count" field.
func OpenIssuesCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldOpenIssuesCount, vs...))
}

// OpenIssuesCountGT applies the GT predicate on the "open_issues_count" field.
func OpenIssuesCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldOpenIssuesCount, v))
}

// OpenIssuesCountGTE applies the GTE predicate on the "open_issues_count" field.
func OpenIssuesCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldOpenIssuesCount, v))
}

// OpenIssuesCountLT applies the LT predicate on the "open_issues_count" field.
func OpenIssuesCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldOpenIssuesCount, v))
}

// OpenIssuesCountLTE applies the LTE predicate on the "open_issues_count" field.
func OpenIssuesCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldOpenIssuesCount, v))
}

// IsTemplateEQ applies the EQ predicate on the "is_template" field.
func IsTemplateEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIsTemplate, v))
}

// IsTemplateNEQ applies the NEQ predicate on the "is_template" field.
func IsTemplateNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldIsTemplate, v))
}

// HasIssuesEnabledEQ applies the EQ predicate on the "has_issues_enabled" field.
func HasIssuesEnabledEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasIssuesEnabled, v))
}

// HasIssuesEnabledNEQ applies the NEQ predicate on the "has_issues_enabled" field.
func HasIssuesEnabledNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasIssuesEnabled, v))
}

// HasProjectsEQ applies the EQ predicate on the "has_projects" field.
func HasProjectsEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasProjects, v))
}

// HasProjectsNEQ applies the NEQ predicate on the "has_projects" field.
func HasProjectsNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasProjects, v))
}

// HasWikiEQ applies the EQ predicate on the "has_wiki" field.
func HasWikiEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasWiki, v))
}

// HasWikiNEQ applies the NEQ predicate on the "has_wiki" field.
func HasWikiNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasWiki, v))
}

// HasPagesEQ applies the EQ predicate on the "has_pages" field.
func HasPagesEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasPages, v))
}

// HasPagesNEQ applies the NEQ predicate on the "has_pages" field.
func HasPagesNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasPages, v))
}

// HasDownloadsEQ applies the EQ predicate on the "has_downloads" field.
func HasDownloadsEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasDownloads, v))
}

// HasDownloadsNEQ applies the NEQ predicate on the "has_downloads" field.
func HasDownloadsNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasDownloads, v))
}

// HasDiscussionsEQ applies the EQ predicate on the "has_discussions" field.
func HasDiscussionsEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasDiscussions, v))
}

// HasDiscussionsNEQ applies the NEQ predicate on the "has_discussions" field.
func HasDiscussionsNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasDiscussions, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldArchived, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDisabled, v))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldVisibility, vs...))
}

// VisibilityIsNil applies the IsNil predicate on the "visibility" field.
func VisibilityIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldVisibility))
}

// VisibilityNotNil applies the NotNil predicate on the "visibility" field.
func VisibilityNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldVisibility))
}

// PushedAtEQ applies the EQ predicate on the "pushed_at" field.
func PushedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPushedAt, v))
}

// PushedAtNEQ applies the NEQ predicate on the "pushed_at" field.
func PushedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldPushedAt, v))
}

// PushedAtIn applies the In predicate on the "pushed_at" field.
func PushedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldPushedAt, vs...))
}

// PushedAtNotIn applies the NotIn predicate on the "pushed_at" field.
func PushedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldPushedAt, vs...))
}

// PushedAtGT applies the GT predicate on the "pushed_at" field.
func PushedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldPushedAt, v))
}

// PushedAtGTE applies the GTE predicate on the "pushed_at" field.
func PushedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldPushedAt, v))
}

// PushedAtLT applies the LT predicate on the "pushed_at" field.
func PushedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldPushedAt, v))
}

// PushedAtLTE applies the LTE predicate on the "pushed_at" field.
func PushedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldPushedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// SubscribersCountEQ applies the EQ predicate on the "subscribers_count" field.
func SubscribersCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSubscribersCount, v))
}

// SubscribersCountNEQ applies the NEQ predicate on the "subscribers_count" field.
func SubscribersCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSubscribersCount, v))
}

// SubscribersCountIn applies the In predicate on the "subscribers_count" field.
func SubscribersCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSubscribersCount, vs...))
}

// SubscribersCountNotIn applies the NotIn predicate on the "subscribers_count" field.
func SubscribersCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSubscribersCount, vs...))
}

// SubscribersCountGT applies the GT predicate on the "subscribers_count" field.
func SubscribersCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldSubscribersCount, v))
}

// SubscribersCountGTE applies the GTE predicate on the "subscribers_count" field.
func SubscribersCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldSubscribersCount, v))
}

// SubscribersCountLT applies the LT predicate on the "subscribers_count" field.
func SubscribersCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldSubscribersCount, v))
}

// SubscribersCountLTE applies the LTE predicate on the "subscribers_count" field.
func SubscribersCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldSubscribersCount, v))
}

// NetworkCountEQ applies the EQ predicate on the "network_count" field.
func NetworkCountEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldNetworkCount, v))
}

// NetworkCountNEQ applies the NEQ predicate on the "network_count" field.
func NetworkCountNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldNetworkCount, v))
}

// NetworkCountIn applies the In predicate on the "network_count" field.
func NetworkCountIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldNetworkCount, vs...))
}

// NetworkCountNotIn applies the NotIn predicate on the "network_count" field.
func NetworkCountNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldNetworkCount, vs...))
}

// NetworkCountGT applies the GT predicate on the "network_count" field.
func NetworkCountGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldNetworkCount, v))
}

// NetworkCountGTE applies the GTE predicate on the "network_count" field.
func NetworkCountGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldNetworkCount, v))
}

// NetworkCountLT applies the LT predicate on the "network_count" field.
func NetworkCountLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldNetworkCount, v))
}

// NetworkCountLTE applies the LTE predicate on the "network_count" field.
func NetworkCountLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldNetworkCount, v))
}

// ForksEQ applies the EQ predicate on the "forks" field.
func ForksEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForks, v))
}

// ForksNEQ applies the NEQ predicate on the "forks" field.
func ForksNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldForks, v))
}

// ForksIn applies the In predicate on the "forks" field.
func ForksIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldForks, vs...))
}

// ForksNotIn applies the NotIn predicate on the "forks" field.
func ForksNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldForks, vs...))
}

// ForksGT applies the GT predicate on the "forks" field.
func ForksGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldForks, v))
}

// ForksGTE applies the GTE predicate on the "forks" field.
func ForksGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldForks, v))
}

// ForksLT applies the LT predicate on the "forks" field.
func ForksLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldForks, v))
}

// ForksLTE applies the LTE predicate on the "forks" field.
func ForksLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldForks, v))
}

// OpenIssuesEQ applies the EQ predicate on the "open_issues" field.
func OpenIssuesEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssues, v))
}

// OpenIssuesNEQ applies the NEQ predicate on the "open_issues" field.
func OpenIssuesNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldOpenIssues, v))
}

// OpenIssuesIn applies the In predicate on the "open_issues" field.
func OpenIssuesIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldOpenIssues, vs...))
}

// OpenIssuesNotIn applies the NotIn predicate on the "open_issues" field.
func OpenIssuesNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldOpenIssues, vs...))
}

// OpenIssuesGT applies the GT predicate on the "open_issues" field.
func OpenIssuesGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldOpenIssues, v))
}

// OpenIssuesGTE applies the GTE predicate on the "open_issues" field.
func OpenIssuesGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldOpenIssues, v))
}

// OpenIssuesLT applies the LT predicate on the "open_issues" field.
func OpenIssuesLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldOpenIssues, v))
}

// OpenIssuesLTE applies the LTE predicate on the "open_issues" field.
func OpenIssuesLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldOpenIssues, v))
}

// WatchersEQ applies the EQ predicate on the "watchers" field.
func WatchersEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchers, v))
}

// WatchersNEQ applies the NEQ predicate on the "watchers" field.
func WatchersNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldWatchers, v))
}

// WatchersIn applies the In predicate on the "watchers" field.
func WatchersIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldWatchers, vs...))
}

// WatchersNotIn applies the NotIn predicate on the "watchers" field.
func WatchersNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldWatchers, vs...))
}

// WatchersGT applies the GT predicate on the "watchers" field.
func WatchersGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldWatchers, v))
}

// WatchersGTE applies the GTE predicate on the "watchers" field.
func WatchersGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldWatchers, v))
}

// WatchersLT applies the LT predicate on the "watchers" field.
func WatchersLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldWatchers, v))
}

// WatchersLTE applies the LTE predicate on the "watchers" field.
func WatchersLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldWatchers, v))
}

// LicenseIsNil applies the IsNil predicate on the "license" field.
func LicenseIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldLicense))
}

// LicenseNotNil applies the NotNil predicate on the "license" field.
func LicenseNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldLicense))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssues applies the HasEdge predicate on the "issues" edge.
func HasIssues() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssuesTable, IssuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuesWith applies the HasEdge predicate on the "issues" edge with a given conditions (other predicates).
func HasIssuesWith(preds ...predicate.Issue) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newIssuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.NotPredicates(p))
}
