// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/user"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Fork holds the value of the "fork" field.
	Fork bool `json:"fork,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// ArchiveURL holds the value of the "archive_url" field.
	ArchiveURL string `json:"archive_url,omitempty"`
	// AssigneesURL holds the value of the "assignees_url" field.
	AssigneesURL string `json:"assignees_url,omitempty"`
	// BlobsURL holds the value of the "blobs_url" field.
	BlobsURL string `json:"blobs_url,omitempty"`
	// BranchesURL holds the value of the "branches_url" field.
	BranchesURL string `json:"branches_url,omitempty"`
	// CollaboratorsURL holds the value of the "collaborators_url" field.
	CollaboratorsURL string `json:"collaborators_url,omitempty"`
	// CommentsURL holds the value of the "comments_url" field.
	CommentsURL string `json:"comments_url,omitempty"`
	// CommitsURL holds the value of the "commits_url" field.
	CommitsURL string `json:"commits_url,omitempty"`
	// CompareURL holds the value of the "compare_url" field.
	CompareURL string `json:"compare_url,omitempty"`
	// ContentsURL holds the value of the "contents_url" field.
	ContentsURL string `json:"contents_url,omitempty"`
	// ContributorsURL holds the value of the "contributors_url" field.
	ContributorsURL string `json:"contributors_url,omitempty"`
	// DeploymentsURL holds the value of the "deployments_url" field.
	DeploymentsURL string `json:"deployments_url,omitempty"`
	// DownloadsURL holds the value of the "downloads_url" field.
	DownloadsURL string `json:"downloads_url,omitempty"`
	// EventsURL holds the value of the "events_url" field.
	EventsURL string `json:"events_url,omitempty"`
	// ForksURL holds the value of the "forks_url" field.
	ForksURL string `json:"forks_url,omitempty"`
	// GitCommitsURL holds the value of the "git_commits_url" field.
	GitCommitsURL string `json:"git_commits_url,omitempty"`
	// GitRefsURL holds the value of the "git_refs_url" field.
	GitRefsURL string `json:"git_refs_url,omitempty"`
	// GitTagsURL holds the value of the "git_tags_url" field.
	GitTagsURL string `json:"git_tags_url,omitempty"`
	// GitURL holds the value of the "git_url" field.
	GitURL string `json:"git_url,omitempty"`
	// IssueCommentURL holds the value of the "issue_comment_url" field.
	IssueCommentURL string `json:"issue_comment_url,omitempty"`
	// IssueEventsURL holds the value of the "issue_events_url" field.
	IssueEventsURL string `json:"issue_events_url,omitempty"`
	// IssuesURL holds the value of the "issues_url" field.
	IssuesURL string `json:"issues_url,omitempty"`
	// KeysURL holds the value of the "keys_url" field.
	KeysURL string `json:"keys_url,omitempty"`
	// LabelsURL holds the value of the "labels_url" field.
	LabelsURL string `json:"labels_url,omitempty"`
	// LanguagesURL holds the value of the "languages_url" field.
	LanguagesURL string `json:"languages_url,omitempty"`
	// MergesURL holds the value of the "merges_url" field.
	MergesURL string `json:"merges_url,omitempty"`
	// MilestonesURL holds the value of the "milestones_url" field.
	MilestonesURL string `json:"milestones_url,omitempty"`
	// NotificationsURL holds the value of the "notifications_url" field.
	NotificationsURL string `json:"notifications_url,omitempty"`
	// PullsURL holds the value of the "pulls_url" field.
	PullsURL string `json:"pulls_url,omitempty"`
	// ReleasesURL holds the value of the "releases_url" field.
	ReleasesURL string `json:"releases_url,omitempty"`
	// SSHURL holds the value of the "ssh_url" field.
	SSHURL string `json:"ssh_url,omitempty"`
	// StargazersURL holds the value of the "stargazers_url" field.
	StargazersURL string `json:"stargazers_url,omitempty"`
	// StatusesURL holds the value of the "statuses_url" field.
	StatusesURL string `json:"statuses_url,omitempty"`
	// SubscribersURL holds the value of the "subscribers_url" field.
	SubscribersURL string `json:"subscribers_url,omitempty"`
	// SubscriptionURL holds the value of the "subscription_url" field.
	SubscriptionURL string `json:"subscription_url,omitempty"`
	// TagsURL holds the value of the "tags_url" field.
	TagsURL string `json:"tags_url,omitempty"`
	// TeamsURL holds the value of the "teams_url" field.
	TeamsURL string `json:"teams_url,omitempty"`
	// TreesURL holds the value of the "trees_url" field.
	TreesURL string `json:"trees_url,omitempty"`
	// CloneURL holds the value of the "clone_url" field.
	CloneURL string `json:"clone_url,omitempty"`
	// MirrorURL holds the value of the "mirror_url" field.
	MirrorURL string `json:"mirror_url,omitempty"`
	// HooksURL holds the value of the "hooks_url" field.
	HooksURL string `json:"hooks_url,omitempty"`
	// SvnURL holds the value of the "svn_url" field.
	SvnURL string `json:"svn_url,omitempty"`
	// Homepage holds the value of the "homepage" field.
	Homepage string `json:"homepage,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// ForksCount holds the value of the "forks_count" field.
	ForksCount int `json:"forks_count,omitempty"`
	// StargazersCount holds the value of the "stargazers_count" field.
	StargazersCount int `json:"stargazers_count,omitempty"`
	// WatchersCount holds the value of the "watchers_count" field.
	WatchersCount int `json:"watchers_count,omitempty"`
	// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size int `json:"size,omitempty"`
	// DefaultBranch holds the value of the "default_branch" field.
	DefaultBranch string `json:"default_branch,omitempty"`
	// OpenIssuesCount holds the value of the "open_issues_count" field.
	OpenIssuesCount int `json:"open_issues_count,omitempty"`
	// IsTemplate holds the value of the "is_template" field.
	IsTemplate bool `json:"is_template,omitempty"`
	// Topics holds the value of the "topics" field.
	Topics []string `json:"topics,omitempty"`
	// HasIssues holds the value of the "has_issues" field.
	HasIssues bool `json:"has_issues,omitempty"`
	// HasProjects holds the value of the "has_projects" field.
	HasProjects bool `json:"has_projects,omitempty"`
	// HasWiki holds the value of the "has_wiki" field.
	HasWiki bool `json:"has_wiki,omitempty"`
	// HasPages holds the value of the "has_pages" field.
	HasPages bool `json:"has_pages,omitempty"`
	// HasDownloads holds the value of the "has_downloads" field.
	HasDownloads bool `json:"has_downloads,omitempty"`
	// HasDiscussions holds the value of the "has_discussions" field.
	HasDiscussions bool `json:"has_discussions,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility repository.Visibility `json:"visibility,omitempty"`
	// PushedAt holds the value of the "pushed_at" field.
	PushedAt time.Time `json:"pushed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SubscribersCount holds the value of the "subscribers_count" field.
	SubscribersCount int `json:"subscribers_count,omitempty"`
	// NetworkCount holds the value of the "network_count" field.
	NetworkCount int `json:"network_count,omitempty"`
	// Forks holds the value of the "forks" field.
	Forks int `json:"forks,omitempty"`
	// OpenIssues holds the value of the "open_issues" field.
	OpenIssues int `json:"open_issues,omitempty"`
	// Watchers holds the value of the "watchers" field.
	Watchers int `json:"watchers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges        RepositoryEdges `json:"edges"`
	user_repos   *int
	selectValues sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepositoryEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldTopics:
			values[i] = new([]byte)
		case repository.FieldPrivate, repository.FieldFork, repository.FieldIsTemplate, repository.FieldHasIssues, repository.FieldHasProjects, repository.FieldHasWiki, repository.FieldHasPages, repository.FieldHasDownloads, repository.FieldHasDiscussions, repository.FieldArchived, repository.FieldDisabled:
			values[i] = new(sql.NullBool)
		case repository.FieldID, repository.FieldForksCount, repository.FieldStargazersCount, repository.FieldWatchersCount, repository.FieldSize, repository.FieldOpenIssuesCount, repository.FieldSubscribersCount, repository.FieldNetworkCount, repository.FieldForks, repository.FieldOpenIssues, repository.FieldWatchers:
			values[i] = new(sql.NullInt64)
		case repository.FieldNodeID, repository.FieldName, repository.FieldFullName, repository.FieldHTMLURL, repository.FieldDescription, repository.FieldURL, repository.FieldArchiveURL, repository.FieldAssigneesURL, repository.FieldBlobsURL, repository.FieldBranchesURL, repository.FieldCollaboratorsURL, repository.FieldCommentsURL, repository.FieldCommitsURL, repository.FieldCompareURL, repository.FieldContentsURL, repository.FieldContributorsURL, repository.FieldDeploymentsURL, repository.FieldDownloadsURL, repository.FieldEventsURL, repository.FieldForksURL, repository.FieldGitCommitsURL, repository.FieldGitRefsURL, repository.FieldGitTagsURL, repository.FieldGitURL, repository.FieldIssueCommentURL, repository.FieldIssueEventsURL, repository.FieldIssuesURL, repository.FieldKeysURL, repository.FieldLabelsURL, repository.FieldLanguagesURL, repository.FieldMergesURL, repository.FieldMilestonesURL, repository.FieldNotificationsURL, repository.FieldPullsURL, repository.FieldReleasesURL, repository.FieldSSHURL, repository.FieldStargazersURL, repository.FieldStatusesURL, repository.FieldSubscribersURL, repository.FieldSubscriptionURL, repository.FieldTagsURL, repository.FieldTeamsURL, repository.FieldTreesURL, repository.FieldCloneURL, repository.FieldMirrorURL, repository.FieldHooksURL, repository.FieldSvnURL, repository.FieldHomepage, repository.FieldLanguage, repository.FieldDefaultBranch, repository.FieldVisibility:
			values[i] = new(sql.NullString)
		case repository.FieldPushedAt, repository.FieldCreatedAt, repository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case repository.ForeignKeys[0]: // user_repos
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case repository.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				r.NodeID = value.String
			}
		case repository.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case repository.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				r.FullName = value.String
			}
		case repository.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				r.Private = value.Bool
			}
		case repository.FieldHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[i])
			} else if value.Valid {
				r.HTMLURL = value.String
			}
		case repository.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case repository.FieldFork:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fork", values[i])
			} else if value.Valid {
				r.Fork = value.Bool
			}
		case repository.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case repository.FieldArchiveURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field archive_url", values[i])
			} else if value.Valid {
				r.ArchiveURL = value.String
			}
		case repository.FieldAssigneesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignees_url", values[i])
			} else if value.Valid {
				r.AssigneesURL = value.String
			}
		case repository.FieldBlobsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blobs_url", values[i])
			} else if value.Valid {
				r.BlobsURL = value.String
			}
		case repository.FieldBranchesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branches_url", values[i])
			} else if value.Valid {
				r.BranchesURL = value.String
			}
		case repository.FieldCollaboratorsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collaborators_url", values[i])
			} else if value.Valid {
				r.CollaboratorsURL = value.String
			}
		case repository.FieldCommentsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments_url", values[i])
			} else if value.Valid {
				r.CommentsURL = value.String
			}
		case repository.FieldCommitsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commits_url", values[i])
			} else if value.Valid {
				r.CommitsURL = value.String
			}
		case repository.FieldCompareURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field compare_url", values[i])
			} else if value.Valid {
				r.CompareURL = value.String
			}
		case repository.FieldContentsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contents_url", values[i])
			} else if value.Valid {
				r.ContentsURL = value.String
			}
		case repository.FieldContributorsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contributors_url", values[i])
			} else if value.Valid {
				r.ContributorsURL = value.String
			}
		case repository.FieldDeploymentsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployments_url", values[i])
			} else if value.Valid {
				r.DeploymentsURL = value.String
			}
		case repository.FieldDownloadsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field downloads_url", values[i])
			} else if value.Valid {
				r.DownloadsURL = value.String
			}
		case repository.FieldEventsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field events_url", values[i])
			} else if value.Valid {
				r.EventsURL = value.String
			}
		case repository.FieldForksURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forks_url", values[i])
			} else if value.Valid {
				r.ForksURL = value.String
			}
		case repository.FieldGitCommitsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commits_url", values[i])
			} else if value.Valid {
				r.GitCommitsURL = value.String
			}
		case repository.FieldGitRefsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_refs_url", values[i])
			} else if value.Valid {
				r.GitRefsURL = value.String
			}
		case repository.FieldGitTagsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_tags_url", values[i])
			} else if value.Valid {
				r.GitTagsURL = value.String
			}
		case repository.FieldGitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_url", values[i])
			} else if value.Valid {
				r.GitURL = value.String
			}
		case repository.FieldIssueCommentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issue_comment_url", values[i])
			} else if value.Valid {
				r.IssueCommentURL = value.String
			}
		case repository.FieldIssueEventsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issue_events_url", values[i])
			} else if value.Valid {
				r.IssueEventsURL = value.String
			}
		case repository.FieldIssuesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issues_url", values[i])
			} else if value.Valid {
				r.IssuesURL = value.String
			}
		case repository.FieldKeysURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keys_url", values[i])
			} else if value.Valid {
				r.KeysURL = value.String
			}
		case repository.FieldLabelsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field labels_url", values[i])
			} else if value.Valid {
				r.LabelsURL = value.String
			}
		case repository.FieldLanguagesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field languages_url", values[i])
			} else if value.Valid {
				r.LanguagesURL = value.String
			}
		case repository.FieldMergesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merges_url", values[i])
			} else if value.Valid {
				r.MergesURL = value.String
			}
		case repository.FieldMilestonesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field milestones_url", values[i])
			} else if value.Valid {
				r.MilestonesURL = value.String
			}
		case repository.FieldNotificationsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notifications_url", values[i])
			} else if value.Valid {
				r.NotificationsURL = value.String
			}
		case repository.FieldPullsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pulls_url", values[i])
			} else if value.Valid {
				r.PullsURL = value.String
			}
		case repository.FieldReleasesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field releases_url", values[i])
			} else if value.Valid {
				r.ReleasesURL = value.String
			}
		case repository.FieldSSHURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ssh_url", values[i])
			} else if value.Valid {
				r.SSHURL = value.String
			}
		case repository.FieldStargazersURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stargazers_url", values[i])
			} else if value.Valid {
				r.StargazersURL = value.String
			}
		case repository.FieldStatusesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statuses_url", values[i])
			} else if value.Valid {
				r.StatusesURL = value.String
			}
		case repository.FieldSubscribersURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscribers_url", values[i])
			} else if value.Valid {
				r.SubscribersURL = value.String
			}
		case repository.FieldSubscriptionURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_url", values[i])
			} else if value.Valid {
				r.SubscriptionURL = value.String
			}
		case repository.FieldTagsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags_url", values[i])
			} else if value.Valid {
				r.TagsURL = value.String
			}
		case repository.FieldTeamsURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teams_url", values[i])
			} else if value.Valid {
				r.TeamsURL = value.String
			}
		case repository.FieldTreesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trees_url", values[i])
			} else if value.Valid {
				r.TreesURL = value.String
			}
		case repository.FieldCloneURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clone_url", values[i])
			} else if value.Valid {
				r.CloneURL = value.String
			}
		case repository.FieldMirrorURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mirror_url", values[i])
			} else if value.Valid {
				r.MirrorURL = value.String
			}
		case repository.FieldHooksURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hooks_url", values[i])
			} else if value.Valid {
				r.HooksURL = value.String
			}
		case repository.FieldSvnURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field svn_url", values[i])
			} else if value.Valid {
				r.SvnURL = value.String
			}
		case repository.FieldHomepage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage", values[i])
			} else if value.Valid {
				r.Homepage = value.String
			}
		case repository.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				r.Language = value.String
			}
		case repository.FieldForksCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forks_count", values[i])
			} else if value.Valid {
				r.ForksCount = int(value.Int64)
			}
		case repository.FieldStargazersCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stargazers_count", values[i])
			} else if value.Valid {
				r.StargazersCount = int(value.Int64)
			}
		case repository.FieldWatchersCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watchers_count", values[i])
			} else if value.Valid {
				r.WatchersCount = int(value.Int64)
			}
		case repository.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				r.Size = int(value.Int64)
			}
		case repository.FieldDefaultBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_branch", values[i])
			} else if value.Valid {
				r.DefaultBranch = value.String
			}
		case repository.FieldOpenIssuesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field open_issues_count", values[i])
			} else if value.Valid {
				r.OpenIssuesCount = int(value.Int64)
			}
		case repository.FieldIsTemplate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_template", values[i])
			} else if value.Valid {
				r.IsTemplate = value.Bool
			}
		case repository.FieldTopics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field topics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Topics); err != nil {
					return fmt.Errorf("unmarshal field topics: %w", err)
				}
			}
		case repository.FieldHasIssues:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_issues", values[i])
			} else if value.Valid {
				r.HasIssues = value.Bool
			}
		case repository.FieldHasProjects:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_projects", values[i])
			} else if value.Valid {
				r.HasProjects = value.Bool
			}
		case repository.FieldHasWiki:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_wiki", values[i])
			} else if value.Valid {
				r.HasWiki = value.Bool
			}
		case repository.FieldHasPages:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_pages", values[i])
			} else if value.Valid {
				r.HasPages = value.Bool
			}
		case repository.FieldHasDownloads:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_downloads", values[i])
			} else if value.Valid {
				r.HasDownloads = value.Bool
			}
		case repository.FieldHasDiscussions:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_discussions", values[i])
			} else if value.Valid {
				r.HasDiscussions = value.Bool
			}
		case repository.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				r.Archived = value.Bool
			}
		case repository.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				r.Disabled = value.Bool
			}
		case repository.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				r.Visibility = repository.Visibility(value.String)
			}
		case repository.FieldPushedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pushed_at", values[i])
			} else if value.Valid {
				r.PushedAt = value.Time
			}
		case repository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case repository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case repository.FieldSubscribersCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribers_count", values[i])
			} else if value.Valid {
				r.SubscribersCount = int(value.Int64)
			}
		case repository.FieldNetworkCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field network_count", values[i])
			} else if value.Valid {
				r.NetworkCount = int(value.Int64)
			}
		case repository.FieldForks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forks", values[i])
			} else if value.Valid {
				r.Forks = int(value.Int64)
			}
		case repository.FieldOpenIssues:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field open_issues", values[i])
			} else if value.Valid {
				r.OpenIssues = int(value.Int64)
			}
		case repository.FieldWatchers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watchers", values[i])
			} else if value.Valid {
				r.Watchers = int(value.Int64)
			}
		case repository.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_repos", value)
			} else if value.Valid {
				r.user_repos = new(int)
				*r.user_repos = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Repository entity.
func (r *Repository) QueryOwner() *UserQuery {
	return NewRepositoryClient(r.config).QueryOwner(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("node_id=")
	builder.WriteString(r.NodeID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(r.FullName)
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", r.Private))
	builder.WriteString(", ")
	builder.WriteString("html_url=")
	builder.WriteString(r.HTMLURL)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("fork=")
	builder.WriteString(fmt.Sprintf("%v", r.Fork))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("archive_url=")
	builder.WriteString(r.ArchiveURL)
	builder.WriteString(", ")
	builder.WriteString("assignees_url=")
	builder.WriteString(r.AssigneesURL)
	builder.WriteString(", ")
	builder.WriteString("blobs_url=")
	builder.WriteString(r.BlobsURL)
	builder.WriteString(", ")
	builder.WriteString("branches_url=")
	builder.WriteString(r.BranchesURL)
	builder.WriteString(", ")
	builder.WriteString("collaborators_url=")
	builder.WriteString(r.CollaboratorsURL)
	builder.WriteString(", ")
	builder.WriteString("comments_url=")
	builder.WriteString(r.CommentsURL)
	builder.WriteString(", ")
	builder.WriteString("commits_url=")
	builder.WriteString(r.CommitsURL)
	builder.WriteString(", ")
	builder.WriteString("compare_url=")
	builder.WriteString(r.CompareURL)
	builder.WriteString(", ")
	builder.WriteString("contents_url=")
	builder.WriteString(r.ContentsURL)
	builder.WriteString(", ")
	builder.WriteString("contributors_url=")
	builder.WriteString(r.ContributorsURL)
	builder.WriteString(", ")
	builder.WriteString("deployments_url=")
	builder.WriteString(r.DeploymentsURL)
	builder.WriteString(", ")
	builder.WriteString("downloads_url=")
	builder.WriteString(r.DownloadsURL)
	builder.WriteString(", ")
	builder.WriteString("events_url=")
	builder.WriteString(r.EventsURL)
	builder.WriteString(", ")
	builder.WriteString("forks_url=")
	builder.WriteString(r.ForksURL)
	builder.WriteString(", ")
	builder.WriteString("git_commits_url=")
	builder.WriteString(r.GitCommitsURL)
	builder.WriteString(", ")
	builder.WriteString("git_refs_url=")
	builder.WriteString(r.GitRefsURL)
	builder.WriteString(", ")
	builder.WriteString("git_tags_url=")
	builder.WriteString(r.GitTagsURL)
	builder.WriteString(", ")
	builder.WriteString("git_url=")
	builder.WriteString(r.GitURL)
	builder.WriteString(", ")
	builder.WriteString("issue_comment_url=")
	builder.WriteString(r.IssueCommentURL)
	builder.WriteString(", ")
	builder.WriteString("issue_events_url=")
	builder.WriteString(r.IssueEventsURL)
	builder.WriteString(", ")
	builder.WriteString("issues_url=")
	builder.WriteString(r.IssuesURL)
	builder.WriteString(", ")
	builder.WriteString("keys_url=")
	builder.WriteString(r.KeysURL)
	builder.WriteString(", ")
	builder.WriteString("labels_url=")
	builder.WriteString(r.LabelsURL)
	builder.WriteString(", ")
	builder.WriteString("languages_url=")
	builder.WriteString(r.LanguagesURL)
	builder.WriteString(", ")
	builder.WriteString("merges_url=")
	builder.WriteString(r.MergesURL)
	builder.WriteString(", ")
	builder.WriteString("milestones_url=")
	builder.WriteString(r.MilestonesURL)
	builder.WriteString(", ")
	builder.WriteString("notifications_url=")
	builder.WriteString(r.NotificationsURL)
	builder.WriteString(", ")
	builder.WriteString("pulls_url=")
	builder.WriteString(r.PullsURL)
	builder.WriteString(", ")
	builder.WriteString("releases_url=")
	builder.WriteString(r.ReleasesURL)
	builder.WriteString(", ")
	builder.WriteString("ssh_url=")
	builder.WriteString(r.SSHURL)
	builder.WriteString(", ")
	builder.WriteString("stargazers_url=")
	builder.WriteString(r.StargazersURL)
	builder.WriteString(", ")
	builder.WriteString("statuses_url=")
	builder.WriteString(r.StatusesURL)
	builder.WriteString(", ")
	builder.WriteString("subscribers_url=")
	builder.WriteString(r.SubscribersURL)
	builder.WriteString(", ")
	builder.WriteString("subscription_url=")
	builder.WriteString(r.SubscriptionURL)
	builder.WriteString(", ")
	builder.WriteString("tags_url=")
	builder.WriteString(r.TagsURL)
	builder.WriteString(", ")
	builder.WriteString("teams_url=")
	builder.WriteString(r.TeamsURL)
	builder.WriteString(", ")
	builder.WriteString("trees_url=")
	builder.WriteString(r.TreesURL)
	builder.WriteString(", ")
	builder.WriteString("clone_url=")
	builder.WriteString(r.CloneURL)
	builder.WriteString(", ")
	builder.WriteString("mirror_url=")
	builder.WriteString(r.MirrorURL)
	builder.WriteString(", ")
	builder.WriteString("hooks_url=")
	builder.WriteString(r.HooksURL)
	builder.WriteString(", ")
	builder.WriteString("svn_url=")
	builder.WriteString(r.SvnURL)
	builder.WriteString(", ")
	builder.WriteString("homepage=")
	builder.WriteString(r.Homepage)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(r.Language)
	builder.WriteString(", ")
	builder.WriteString("forks_count=")
	builder.WriteString(fmt.Sprintf("%v", r.ForksCount))
	builder.WriteString(", ")
	builder.WriteString("stargazers_count=")
	builder.WriteString(fmt.Sprintf("%v", r.StargazersCount))
	builder.WriteString(", ")
	builder.WriteString("watchers_count=")
	builder.WriteString(fmt.Sprintf("%v", r.WatchersCount))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", r.Size))
	builder.WriteString(", ")
	builder.WriteString("default_branch=")
	builder.WriteString(r.DefaultBranch)
	builder.WriteString(", ")
	builder.WriteString("open_issues_count=")
	builder.WriteString(fmt.Sprintf("%v", r.OpenIssuesCount))
	builder.WriteString(", ")
	builder.WriteString("is_template=")
	builder.WriteString(fmt.Sprintf("%v", r.IsTemplate))
	builder.WriteString(", ")
	builder.WriteString("topics=")
	builder.WriteString(fmt.Sprintf("%v", r.Topics))
	builder.WriteString(", ")
	builder.WriteString("has_issues=")
	builder.WriteString(fmt.Sprintf("%v", r.HasIssues))
	builder.WriteString(", ")
	builder.WriteString("has_projects=")
	builder.WriteString(fmt.Sprintf("%v", r.HasProjects))
	builder.WriteString(", ")
	builder.WriteString("has_wiki=")
	builder.WriteString(fmt.Sprintf("%v", r.HasWiki))
	builder.WriteString(", ")
	builder.WriteString("has_pages=")
	builder.WriteString(fmt.Sprintf("%v", r.HasPages))
	builder.WriteString(", ")
	builder.WriteString("has_downloads=")
	builder.WriteString(fmt.Sprintf("%v", r.HasDownloads))
	builder.WriteString(", ")
	builder.WriteString("has_discussions=")
	builder.WriteString(fmt.Sprintf("%v", r.HasDiscussions))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", r.Archived))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", r.Disabled))
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", r.Visibility))
	builder.WriteString(", ")
	builder.WriteString("pushed_at=")
	builder.WriteString(r.PushedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("subscribers_count=")
	builder.WriteString(fmt.Sprintf("%v", r.SubscribersCount))
	builder.WriteString(", ")
	builder.WriteString("network_count=")
	builder.WriteString(fmt.Sprintf("%v", r.NetworkCount))
	builder.WriteString(", ")
	builder.WriteString("forks=")
	builder.WriteString(fmt.Sprintf("%v", r.Forks))
	builder.WriteString(", ")
	builder.WriteString("open_issues=")
	builder.WriteString(fmt.Sprintf("%v", r.OpenIssues))
	builder.WriteString(", ")
	builder.WriteString("watchers=")
	builder.WriteString(fmt.Sprintf("%v", r.Watchers))
	builder.WriteByte(')')
	return builder.String()
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository
