// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/timelineevent"
	"github.com/gnoverse/gh-sql/ent/user"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// TimelineEvent is the model entity for the TimelineEvent schema.
type TimelineEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"internal_id"`
	// NumericID holds the value of the "numeric_id" field.
	NumericID int64 `json:"id"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id"`
	// URL holds the value of the "url" field.
	URL string `json:"url"`
	// Event holds the value of the "event" field.
	Event string `json:"event"`
	// CommitID holds the value of the "commit_id" field.
	CommitID *string `json:"commit_id"`
	// CommitURL holds the value of the "commit_url" field.
	CommitURL *string `json:"commit_url"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// Data holds the value of the "data" field.
	Data model.TimelineEventWrapper `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimelineEventQuery when eager-loading is set.
	Edges                TimelineEventEdges `json:"-"`
	issue_timeline       *int64
	timeline_event_actor *int64
	selectValues         sql.SelectValues
}

// TimelineEventEdges holds the relations/edges for other nodes in the graph.
type TimelineEventEdges struct {
	// Actor holds the value of the actor edge.
	Actor *User `json:"actor,omitempty"`
	// Issue holds the value of the issue edge.
	Issue *Issue `json:"issue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActorOrErr returns the Actor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimelineEventEdges) ActorOrErr() (*User, error) {
	if e.Actor != nil {
		return e.Actor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "actor"}
}

// IssueOrErr returns the Issue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimelineEventEdges) IssueOrErr() (*Issue, error) {
	if e.Issue != nil {
		return e.Issue, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: issue.Label}
	}
	return nil, &NotLoadedError{edge: "issue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimelineEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timelineevent.FieldData:
			values[i] = new([]byte)
		case timelineevent.FieldID, timelineevent.FieldNumericID:
			values[i] = new(sql.NullInt64)
		case timelineevent.FieldNodeID, timelineevent.FieldURL, timelineevent.FieldEvent, timelineevent.FieldCommitID, timelineevent.FieldCommitURL:
			values[i] = new(sql.NullString)
		case timelineevent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case timelineevent.ForeignKeys[0]: // issue_timeline
			values[i] = new(sql.NullInt64)
		case timelineevent.ForeignKeys[1]: // timeline_event_actor
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimelineEvent fields.
func (te *TimelineEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timelineevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			te.ID = int64(value.Int64)
		case timelineevent.FieldNumericID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numeric_id", values[i])
			} else if value.Valid {
				te.NumericID = value.Int64
			}
		case timelineevent.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				te.NodeID = value.String
			}
		case timelineevent.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				te.URL = value.String
			}
		case timelineevent.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				te.Event = value.String
			}
		case timelineevent.FieldCommitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_id", values[i])
			} else if value.Valid {
				te.CommitID = new(string)
				*te.CommitID = value.String
			}
		case timelineevent.FieldCommitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_url", values[i])
			} else if value.Valid {
				te.CommitURL = new(string)
				*te.CommitURL = value.String
			}
		case timelineevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				te.CreatedAt = value.Time
			}
		case timelineevent.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &te.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case timelineevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field issue_timeline", value)
			} else if value.Valid {
				te.issue_timeline = new(int64)
				*te.issue_timeline = int64(value.Int64)
			}
		case timelineevent.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field timeline_event_actor", value)
			} else if value.Valid {
				te.timeline_event_actor = new(int64)
				*te.timeline_event_actor = int64(value.Int64)
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TimelineEvent.
// This includes values selected through modifiers, order, etc.
func (te *TimelineEvent) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// QueryActor queries the "actor" edge of the TimelineEvent entity.
func (te *TimelineEvent) QueryActor() *UserQuery {
	return NewTimelineEventClient(te.config).QueryActor(te)
}

// QueryIssue queries the "issue" edge of the TimelineEvent entity.
func (te *TimelineEvent) QueryIssue() *IssueQuery {
	return NewTimelineEventClient(te.config).QueryIssue(te)
}

// Update returns a builder for updating this TimelineEvent.
// Note that you need to call TimelineEvent.Unwrap() before calling this method if this TimelineEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TimelineEvent) Update() *TimelineEventUpdateOne {
	return NewTimelineEventClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TimelineEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TimelineEvent) Unwrap() *TimelineEvent {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimelineEvent is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TimelineEvent) String() string {
	var builder strings.Builder
	builder.WriteString("TimelineEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("numeric_id=")
	builder.WriteString(fmt.Sprintf("%v", te.NumericID))
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(te.NodeID)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(te.URL)
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(te.Event)
	builder.WriteString(", ")
	if v := te.CommitID; v != nil {
		builder.WriteString("commit_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.CommitURL; v != nil {
		builder.WriteString("commit_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(te.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", te.Data))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (te *TimelineEvent) MarshalJSON() ([]byte, error) {
	type Alias TimelineEvent
	return json.Marshal(&struct {
		*Alias
		TimelineEventEdges
	}{
		Alias:              (*Alias)(te),
		TimelineEventEdges: te.Edges,
	})
}

// TimelineEvents is a parsable slice of TimelineEvent.
type TimelineEvents []*TimelineEvent
