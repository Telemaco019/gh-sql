// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/issuecomment"
	"github.com/gnolang/gh-sql/ent/pullrequest"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/timelineevent"
	"github.com/gnolang/gh-sql/ent/user"
	"github.com/gnolang/gh-sql/pkg/model"
)

// IssueCreate is the builder for creating a Issue entity.
type IssueCreate struct {
	config
	mutation *IssueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNodeID sets the "node_id" field.
func (ic *IssueCreate) SetNodeID(s string) *IssueCreate {
	ic.mutation.SetNodeID(s)
	return ic
}

// SetURL sets the "url" field.
func (ic *IssueCreate) SetURL(s string) *IssueCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetRepositoryURL sets the "repository_url" field.
func (ic *IssueCreate) SetRepositoryURL(s string) *IssueCreate {
	ic.mutation.SetRepositoryURL(s)
	return ic
}

// SetLabelsURL sets the "labels_url" field.
func (ic *IssueCreate) SetLabelsURL(s string) *IssueCreate {
	ic.mutation.SetLabelsURL(s)
	return ic
}

// SetCommentsURL sets the "comments_url" field.
func (ic *IssueCreate) SetCommentsURL(s string) *IssueCreate {
	ic.mutation.SetCommentsURL(s)
	return ic
}

// SetEventsURL sets the "events_url" field.
func (ic *IssueCreate) SetEventsURL(s string) *IssueCreate {
	ic.mutation.SetEventsURL(s)
	return ic
}

// SetHTMLURL sets the "html_url" field.
func (ic *IssueCreate) SetHTMLURL(s string) *IssueCreate {
	ic.mutation.SetHTMLURL(s)
	return ic
}

// SetNumber sets the "number" field.
func (ic *IssueCreate) SetNumber(i int64) *IssueCreate {
	ic.mutation.SetNumber(i)
	return ic
}

// SetState sets the "state" field.
func (ic *IssueCreate) SetState(s string) *IssueCreate {
	ic.mutation.SetState(s)
	return ic
}

// SetStateReason sets the "state_reason" field.
func (ic *IssueCreate) SetStateReason(mr model.StateReason) *IssueCreate {
	ic.mutation.SetStateReason(mr)
	return ic
}

// SetNillableStateReason sets the "state_reason" field if the given value is not nil.
func (ic *IssueCreate) SetNillableStateReason(mr *model.StateReason) *IssueCreate {
	if mr != nil {
		ic.SetStateReason(*mr)
	}
	return ic
}

// SetTitle sets the "title" field.
func (ic *IssueCreate) SetTitle(s string) *IssueCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetBody sets the "body" field.
func (ic *IssueCreate) SetBody(s string) *IssueCreate {
	ic.mutation.SetBody(s)
	return ic
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ic *IssueCreate) SetNillableBody(s *string) *IssueCreate {
	if s != nil {
		ic.SetBody(*s)
	}
	return ic
}

// SetLocked sets the "locked" field.
func (ic *IssueCreate) SetLocked(b bool) *IssueCreate {
	ic.mutation.SetLocked(b)
	return ic
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (ic *IssueCreate) SetActiveLockReason(s string) *IssueCreate {
	ic.mutation.SetActiveLockReason(s)
	return ic
}

// SetNillableActiveLockReason sets the "active_lock_reason" field if the given value is not nil.
func (ic *IssueCreate) SetNillableActiveLockReason(s *string) *IssueCreate {
	if s != nil {
		ic.SetActiveLockReason(*s)
	}
	return ic
}

// SetCommentsCount sets the "comments_count" field.
func (ic *IssueCreate) SetCommentsCount(i int64) *IssueCreate {
	ic.mutation.SetCommentsCount(i)
	return ic
}

// SetClosedAt sets the "closed_at" field.
func (ic *IssueCreate) SetClosedAt(t time.Time) *IssueCreate {
	ic.mutation.SetClosedAt(t)
	return ic
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ic *IssueCreate) SetNillableClosedAt(t *time.Time) *IssueCreate {
	if t != nil {
		ic.SetClosedAt(*t)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IssueCreate) SetCreatedAt(t time.Time) *IssueCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IssueCreate) SetUpdatedAt(t time.Time) *IssueCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetDraft sets the "draft" field.
func (ic *IssueCreate) SetDraft(b bool) *IssueCreate {
	ic.mutation.SetDraft(b)
	return ic
}

// SetAuthorAssociation sets the "author_association" field.
func (ic *IssueCreate) SetAuthorAssociation(ma model.AuthorAssociation) *IssueCreate {
	ic.mutation.SetAuthorAssociation(ma)
	return ic
}

// SetReactions sets the "reactions" field.
func (ic *IssueCreate) SetReactions(mr model.ReactionRollup) *IssueCreate {
	ic.mutation.SetReactions(mr)
	return ic
}

// SetID sets the "id" field.
func (ic *IssueCreate) SetID(i int64) *IssueCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (ic *IssueCreate) SetRepositoryID(id int64) *IssueCreate {
	ic.mutation.SetRepositoryID(id)
	return ic
}

// SetRepository sets the "repository" edge to the Repository entity.
func (ic *IssueCreate) SetRepository(r *Repository) *IssueCreate {
	return ic.SetRepositoryID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *IssueCreate) SetUserID(id int64) *IssueCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ic *IssueCreate) SetNillableUserID(id *int64) *IssueCreate {
	if id != nil {
		ic = ic.SetUserID(*id)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *IssueCreate) SetUser(u *User) *IssueCreate {
	return ic.SetUserID(u.ID)
}

// SetClosedByID sets the "closed_by" edge to the User entity by ID.
func (ic *IssueCreate) SetClosedByID(id int64) *IssueCreate {
	ic.mutation.SetClosedByID(id)
	return ic
}

// SetNillableClosedByID sets the "closed_by" edge to the User entity by ID if the given value is not nil.
func (ic *IssueCreate) SetNillableClosedByID(id *int64) *IssueCreate {
	if id != nil {
		ic = ic.SetClosedByID(*id)
	}
	return ic
}

// SetClosedBy sets the "closed_by" edge to the User entity.
func (ic *IssueCreate) SetClosedBy(u *User) *IssueCreate {
	return ic.SetClosedByID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (ic *IssueCreate) AddAssigneeIDs(ids ...int64) *IssueCreate {
	ic.mutation.AddAssigneeIDs(ids...)
	return ic
}

// AddAssignees adds the "assignees" edges to the User entity.
func (ic *IssueCreate) AddAssignees(u ...*User) *IssueCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddAssigneeIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the IssueComment entity by IDs.
func (ic *IssueCreate) AddCommentIDs(ids ...int64) *IssueCreate {
	ic.mutation.AddCommentIDs(ids...)
	return ic
}

// AddComments adds the "comments" edges to the IssueComment entity.
func (ic *IssueCreate) AddComments(i ...*IssueComment) *IssueCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddCommentIDs(ids...)
}

// AddTimelineIDs adds the "timeline" edge to the TimelineEvent entity by IDs.
func (ic *IssueCreate) AddTimelineIDs(ids ...string) *IssueCreate {
	ic.mutation.AddTimelineIDs(ids...)
	return ic
}

// AddTimeline adds the "timeline" edges to the TimelineEvent entity.
func (ic *IssueCreate) AddTimeline(t ...*TimelineEvent) *IssueCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddTimelineIDs(ids...)
}

// SetPullRequestID sets the "pull_request" edge to the PullRequest entity by ID.
func (ic *IssueCreate) SetPullRequestID(id int64) *IssueCreate {
	ic.mutation.SetPullRequestID(id)
	return ic
}

// SetNillablePullRequestID sets the "pull_request" edge to the PullRequest entity by ID if the given value is not nil.
func (ic *IssueCreate) SetNillablePullRequestID(id *int64) *IssueCreate {
	if id != nil {
		ic = ic.SetPullRequestID(*id)
	}
	return ic
}

// SetPullRequest sets the "pull_request" edge to the PullRequest entity.
func (ic *IssueCreate) SetPullRequest(p *PullRequest) *IssueCreate {
	return ic.SetPullRequestID(p.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (ic *IssueCreate) Mutation() *IssueMutation {
	return ic.mutation
}

// Save creates the Issue in the database.
func (ic *IssueCreate) Save(ctx context.Context) (*Issue, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IssueCreate) SaveX(ctx context.Context) *Issue {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IssueCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IssueCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IssueCreate) check() error {
	if _, ok := ic.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "Issue.node_id"`)}
	}
	if _, ok := ic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Issue.url"`)}
	}
	if _, ok := ic.mutation.RepositoryURL(); !ok {
		return &ValidationError{Name: "repository_url", err: errors.New(`ent: missing required field "Issue.repository_url"`)}
	}
	if _, ok := ic.mutation.LabelsURL(); !ok {
		return &ValidationError{Name: "labels_url", err: errors.New(`ent: missing required field "Issue.labels_url"`)}
	}
	if _, ok := ic.mutation.CommentsURL(); !ok {
		return &ValidationError{Name: "comments_url", err: errors.New(`ent: missing required field "Issue.comments_url"`)}
	}
	if _, ok := ic.mutation.EventsURL(); !ok {
		return &ValidationError{Name: "events_url", err: errors.New(`ent: missing required field "Issue.events_url"`)}
	}
	if _, ok := ic.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "Issue.html_url"`)}
	}
	if _, ok := ic.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Issue.number"`)}
	}
	if _, ok := ic.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Issue.state"`)}
	}
	if v, ok := ic.mutation.StateReason(); ok {
		if err := issue.StateReasonValidator(v); err != nil {
			return &ValidationError{Name: "state_reason", err: fmt.Errorf(`ent: validator failed for field "Issue.state_reason": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Issue.title"`)}
	}
	if _, ok := ic.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "Issue.locked"`)}
	}
	if _, ok := ic.mutation.CommentsCount(); !ok {
		return &ValidationError{Name: "comments_count", err: errors.New(`ent: missing required field "Issue.comments_count"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Issue.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Issue.updated_at"`)}
	}
	if _, ok := ic.mutation.Draft(); !ok {
		return &ValidationError{Name: "draft", err: errors.New(`ent: missing required field "Issue.draft"`)}
	}
	if _, ok := ic.mutation.AuthorAssociation(); !ok {
		return &ValidationError{Name: "author_association", err: errors.New(`ent: missing required field "Issue.author_association"`)}
	}
	if v, ok := ic.mutation.AuthorAssociation(); ok {
		if err := issue.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "Issue.author_association": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Reactions(); !ok {
		return &ValidationError{Name: "reactions", err: errors.New(`ent: missing required field "Issue.reactions"`)}
	}
	if _, ok := ic.mutation.RepositoryID(); !ok {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Issue.repository"`)}
	}
	return nil
}

func (ic *IssueCreate) sqlSave(ctx context.Context) (*Issue, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IssueCreate) createSpec() (*Issue, *sqlgraph.CreateSpec) {
	var (
		_node = &Issue{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(issue.Table, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.NodeID(); ok {
		_spec.SetField(issue.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.SetField(issue.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ic.mutation.RepositoryURL(); ok {
		_spec.SetField(issue.FieldRepositoryURL, field.TypeString, value)
		_node.RepositoryURL = value
	}
	if value, ok := ic.mutation.LabelsURL(); ok {
		_spec.SetField(issue.FieldLabelsURL, field.TypeString, value)
		_node.LabelsURL = value
	}
	if value, ok := ic.mutation.CommentsURL(); ok {
		_spec.SetField(issue.FieldCommentsURL, field.TypeString, value)
		_node.CommentsURL = value
	}
	if value, ok := ic.mutation.EventsURL(); ok {
		_spec.SetField(issue.FieldEventsURL, field.TypeString, value)
		_node.EventsURL = value
	}
	if value, ok := ic.mutation.HTMLURL(); ok {
		_spec.SetField(issue.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := ic.mutation.Number(); ok {
		_spec.SetField(issue.FieldNumber, field.TypeInt64, value)
		_node.Number = value
	}
	if value, ok := ic.mutation.State(); ok {
		_spec.SetField(issue.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ic.mutation.StateReason(); ok {
		_spec.SetField(issue.FieldStateReason, field.TypeEnum, value)
		_node.StateReason = &value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Body(); ok {
		_spec.SetField(issue.FieldBody, field.TypeString, value)
		_node.Body = &value
	}
	if value, ok := ic.mutation.Locked(); ok {
		_spec.SetField(issue.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := ic.mutation.ActiveLockReason(); ok {
		_spec.SetField(issue.FieldActiveLockReason, field.TypeString, value)
		_node.ActiveLockReason = &value
	}
	if value, ok := ic.mutation.CommentsCount(); ok {
		_spec.SetField(issue.FieldCommentsCount, field.TypeInt64, value)
		_node.CommentsCount = value
	}
	if value, ok := ic.mutation.ClosedAt(); ok {
		_spec.SetField(issue.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = &value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(issue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(issue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Draft(); ok {
		_spec.SetField(issue.FieldDraft, field.TypeBool, value)
		_node.Draft = value
	}
	if value, ok := ic.mutation.AuthorAssociation(); ok {
		_spec.SetField(issue.FieldAuthorAssociation, field.TypeEnum, value)
		_node.AuthorAssociation = value
	}
	if value, ok := ic.mutation.Reactions(); ok {
		_spec.SetField(issue.FieldReactions, field.TypeJSON, value)
		_node.Reactions = value
	}
	if nodes := ic.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_issues = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.UserTable,
			Columns: []string{issue.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_issues_created = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ClosedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ClosedByTable,
			Columns: []string{issue.ClosedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_issues_closed = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.PullRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issue.PullRequestTable,
			Columns: []string{issue.PullRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Issue.Create().
//		SetNodeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IssueUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (ic *IssueCreate) OnConflict(opts ...sql.ConflictOption) *IssueUpsertOne {
	ic.conflict = opts
	return &IssueUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Issue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IssueCreate) OnConflictColumns(columns ...string) *IssueUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IssueUpsertOne{
		create: ic,
	}
}

type (
	// IssueUpsertOne is the builder for "upsert"-ing
	//  one Issue node.
	IssueUpsertOne struct {
		create *IssueCreate
	}

	// IssueUpsert is the "OnConflict" setter.
	IssueUpsert struct {
		*sql.UpdateSet
	}
)

// SetNodeID sets the "node_id" field.
func (u *IssueUpsert) SetNodeID(v string) *IssueUpsert {
	u.Set(issue.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueUpsert) UpdateNodeID() *IssueUpsert {
	u.SetExcluded(issue.FieldNodeID)
	return u
}

// SetURL sets the "url" field.
func (u *IssueUpsert) SetURL(v string) *IssueUpsert {
	u.Set(issue.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateURL() *IssueUpsert {
	u.SetExcluded(issue.FieldURL)
	return u
}

// SetRepositoryURL sets the "repository_url" field.
func (u *IssueUpsert) SetRepositoryURL(v string) *IssueUpsert {
	u.Set(issue.FieldRepositoryURL, v)
	return u
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateRepositoryURL() *IssueUpsert {
	u.SetExcluded(issue.FieldRepositoryURL)
	return u
}

// SetLabelsURL sets the "labels_url" field.
func (u *IssueUpsert) SetLabelsURL(v string) *IssueUpsert {
	u.Set(issue.FieldLabelsURL, v)
	return u
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateLabelsURL() *IssueUpsert {
	u.SetExcluded(issue.FieldLabelsURL)
	return u
}

// SetCommentsURL sets the "comments_url" field.
func (u *IssueUpsert) SetCommentsURL(v string) *IssueUpsert {
	u.Set(issue.FieldCommentsURL, v)
	return u
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateCommentsURL() *IssueUpsert {
	u.SetExcluded(issue.FieldCommentsURL)
	return u
}

// SetEventsURL sets the "events_url" field.
func (u *IssueUpsert) SetEventsURL(v string) *IssueUpsert {
	u.Set(issue.FieldEventsURL, v)
	return u
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateEventsURL() *IssueUpsert {
	u.SetExcluded(issue.FieldEventsURL)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueUpsert) SetHTMLURL(v string) *IssueUpsert {
	u.Set(issue.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueUpsert) UpdateHTMLURL() *IssueUpsert {
	u.SetExcluded(issue.FieldHTMLURL)
	return u
}

// SetNumber sets the "number" field.
func (u *IssueUpsert) SetNumber(v int64) *IssueUpsert {
	u.Set(issue.FieldNumber, v)
	return u
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *IssueUpsert) UpdateNumber() *IssueUpsert {
	u.SetExcluded(issue.FieldNumber)
	return u
}

// AddNumber adds v to the "number" field.
func (u *IssueUpsert) AddNumber(v int64) *IssueUpsert {
	u.Add(issue.FieldNumber, v)
	return u
}

// SetState sets the "state" field.
func (u *IssueUpsert) SetState(v string) *IssueUpsert {
	u.Set(issue.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *IssueUpsert) UpdateState() *IssueUpsert {
	u.SetExcluded(issue.FieldState)
	return u
}

// SetStateReason sets the "state_reason" field.
func (u *IssueUpsert) SetStateReason(v model.StateReason) *IssueUpsert {
	u.Set(issue.FieldStateReason, v)
	return u
}

// UpdateStateReason sets the "state_reason" field to the value that was provided on create.
func (u *IssueUpsert) UpdateStateReason() *IssueUpsert {
	u.SetExcluded(issue.FieldStateReason)
	return u
}

// ClearStateReason clears the value of the "state_reason" field.
func (u *IssueUpsert) ClearStateReason() *IssueUpsert {
	u.SetNull(issue.FieldStateReason)
	return u
}

// SetTitle sets the "title" field.
func (u *IssueUpsert) SetTitle(v string) *IssueUpsert {
	u.Set(issue.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IssueUpsert) UpdateTitle() *IssueUpsert {
	u.SetExcluded(issue.FieldTitle)
	return u
}

// SetBody sets the "body" field.
func (u *IssueUpsert) SetBody(v string) *IssueUpsert {
	u.Set(issue.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueUpsert) UpdateBody() *IssueUpsert {
	u.SetExcluded(issue.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *IssueUpsert) ClearBody() *IssueUpsert {
	u.SetNull(issue.FieldBody)
	return u
}

// SetLocked sets the "locked" field.
func (u *IssueUpsert) SetLocked(v bool) *IssueUpsert {
	u.Set(issue.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *IssueUpsert) UpdateLocked() *IssueUpsert {
	u.SetExcluded(issue.FieldLocked)
	return u
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (u *IssueUpsert) SetActiveLockReason(v string) *IssueUpsert {
	u.Set(issue.FieldActiveLockReason, v)
	return u
}

// UpdateActiveLockReason sets the "active_lock_reason" field to the value that was provided on create.
func (u *IssueUpsert) UpdateActiveLockReason() *IssueUpsert {
	u.SetExcluded(issue.FieldActiveLockReason)
	return u
}

// ClearActiveLockReason clears the value of the "active_lock_reason" field.
func (u *IssueUpsert) ClearActiveLockReason() *IssueUpsert {
	u.SetNull(issue.FieldActiveLockReason)
	return u
}

// SetCommentsCount sets the "comments_count" field.
func (u *IssueUpsert) SetCommentsCount(v int64) *IssueUpsert {
	u.Set(issue.FieldCommentsCount, v)
	return u
}

// UpdateCommentsCount sets the "comments_count" field to the value that was provided on create.
func (u *IssueUpsert) UpdateCommentsCount() *IssueUpsert {
	u.SetExcluded(issue.FieldCommentsCount)
	return u
}

// AddCommentsCount adds v to the "comments_count" field.
func (u *IssueUpsert) AddCommentsCount(v int64) *IssueUpsert {
	u.Add(issue.FieldCommentsCount, v)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *IssueUpsert) SetClosedAt(v time.Time) *IssueUpsert {
	u.Set(issue.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IssueUpsert) UpdateClosedAt() *IssueUpsert {
	u.SetExcluded(issue.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IssueUpsert) ClearClosedAt() *IssueUpsert {
	u.SetNull(issue.FieldClosedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueUpsert) SetCreatedAt(v time.Time) *IssueUpsert {
	u.Set(issue.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueUpsert) UpdateCreatedAt() *IssueUpsert {
	u.SetExcluded(issue.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueUpsert) SetUpdatedAt(v time.Time) *IssueUpsert {
	u.Set(issue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueUpsert) UpdateUpdatedAt() *IssueUpsert {
	u.SetExcluded(issue.FieldUpdatedAt)
	return u
}

// SetDraft sets the "draft" field.
func (u *IssueUpsert) SetDraft(v bool) *IssueUpsert {
	u.Set(issue.FieldDraft, v)
	return u
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *IssueUpsert) UpdateDraft() *IssueUpsert {
	u.SetExcluded(issue.FieldDraft)
	return u
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueUpsert) SetAuthorAssociation(v model.AuthorAssociation) *IssueUpsert {
	u.Set(issue.FieldAuthorAssociation, v)
	return u
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueUpsert) UpdateAuthorAssociation() *IssueUpsert {
	u.SetExcluded(issue.FieldAuthorAssociation)
	return u
}

// SetReactions sets the "reactions" field.
func (u *IssueUpsert) SetReactions(v model.ReactionRollup) *IssueUpsert {
	u.Set(issue.FieldReactions, v)
	return u
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueUpsert) UpdateReactions() *IssueUpsert {
	u.SetExcluded(issue.FieldReactions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Issue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(issue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IssueUpsertOne) UpdateNewValues() *IssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(issue.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Issue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IssueUpsertOne) Ignore() *IssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueUpsertOne) DoNothing() *IssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueCreate.OnConflict
// documentation for more info.
func (u *IssueUpsertOne) Update(set func(*IssueUpsert)) *IssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *IssueUpsertOne) SetNodeID(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateNodeID() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateNodeID()
	})
}

// SetURL sets the "url" field.
func (u *IssueUpsertOne) SetURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateURL()
	})
}

// SetRepositoryURL sets the "repository_url" field.
func (u *IssueUpsertOne) SetRepositoryURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetRepositoryURL(v)
	})
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateRepositoryURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateRepositoryURL()
	})
}

// SetLabelsURL sets the "labels_url" field.
func (u *IssueUpsertOne) SetLabelsURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetLabelsURL(v)
	})
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateLabelsURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateLabelsURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *IssueUpsertOne) SetCommentsURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateCommentsURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *IssueUpsertOne) SetEventsURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateEventsURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateEventsURL()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueUpsertOne) SetHTMLURL(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateHTMLURL() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetNumber sets the "number" field.
func (u *IssueUpsertOne) SetNumber(v int64) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetNumber(v)
	})
}

// AddNumber adds v to the "number" field.
func (u *IssueUpsertOne) AddNumber(v int64) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.AddNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateNumber() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateNumber()
	})
}

// SetState sets the "state" field.
func (u *IssueUpsertOne) SetState(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateState() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateState()
	})
}

// SetStateReason sets the "state_reason" field.
func (u *IssueUpsertOne) SetStateReason(v model.StateReason) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetStateReason(v)
	})
}

// UpdateStateReason sets the "state_reason" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateStateReason() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateStateReason()
	})
}

// ClearStateReason clears the value of the "state_reason" field.
func (u *IssueUpsertOne) ClearStateReason() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.ClearStateReason()
	})
}

// SetTitle sets the "title" field.
func (u *IssueUpsertOne) SetTitle(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateTitle() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *IssueUpsertOne) SetBody(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateBody() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *IssueUpsertOne) ClearBody() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.ClearBody()
	})
}

// SetLocked sets the "locked" field.
func (u *IssueUpsertOne) SetLocked(v bool) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateLocked() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateLocked()
	})
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (u *IssueUpsertOne) SetActiveLockReason(v string) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetActiveLockReason(v)
	})
}

// UpdateActiveLockReason sets the "active_lock_reason" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateActiveLockReason() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateActiveLockReason()
	})
}

// ClearActiveLockReason clears the value of the "active_lock_reason" field.
func (u *IssueUpsertOne) ClearActiveLockReason() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.ClearActiveLockReason()
	})
}

// SetCommentsCount sets the "comments_count" field.
func (u *IssueUpsertOne) SetCommentsCount(v int64) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetCommentsCount(v)
	})
}

// AddCommentsCount adds v to the "comments_count" field.
func (u *IssueUpsertOne) AddCommentsCount(v int64) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.AddCommentsCount(v)
	})
}

// UpdateCommentsCount sets the "comments_count" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateCommentsCount() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCommentsCount()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *IssueUpsertOne) SetClosedAt(v time.Time) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateClosedAt() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IssueUpsertOne) ClearClosedAt() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.ClearClosedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueUpsertOne) SetCreatedAt(v time.Time) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateCreatedAt() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueUpsertOne) SetUpdatedAt(v time.Time) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateUpdatedAt() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDraft sets the "draft" field.
func (u *IssueUpsertOne) SetDraft(v bool) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateDraft() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateDraft()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueUpsertOne) SetAuthorAssociation(v model.AuthorAssociation) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateAuthorAssociation() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// SetReactions sets the "reactions" field.
func (u *IssueUpsertOne) SetReactions(v model.ReactionRollup) *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.SetReactions(v)
	})
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueUpsertOne) UpdateReactions() *IssueUpsertOne {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateReactions()
	})
}

// Exec executes the query.
func (u *IssueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IssueUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IssueUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IssueCreateBulk is the builder for creating many Issue entities in bulk.
type IssueCreateBulk struct {
	config
	err      error
	builders []*IssueCreate
	conflict []sql.ConflictOption
}

// Save creates the Issue entities in the database.
func (icb *IssueCreateBulk) Save(ctx context.Context) ([]*Issue, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Issue, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IssueCreateBulk) SaveX(ctx context.Context) []*Issue {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IssueCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IssueCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Issue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IssueUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (icb *IssueCreateBulk) OnConflict(opts ...sql.ConflictOption) *IssueUpsertBulk {
	icb.conflict = opts
	return &IssueUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Issue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IssueCreateBulk) OnConflictColumns(columns ...string) *IssueUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IssueUpsertBulk{
		create: icb,
	}
}

// IssueUpsertBulk is the builder for "upsert"-ing
// a bulk of Issue nodes.
type IssueUpsertBulk struct {
	create *IssueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Issue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(issue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IssueUpsertBulk) UpdateNewValues() *IssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(issue.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Issue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IssueUpsertBulk) Ignore() *IssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueUpsertBulk) DoNothing() *IssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueCreateBulk.OnConflict
// documentation for more info.
func (u *IssueUpsertBulk) Update(set func(*IssueUpsert)) *IssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *IssueUpsertBulk) SetNodeID(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateNodeID() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateNodeID()
	})
}

// SetURL sets the "url" field.
func (u *IssueUpsertBulk) SetURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateURL()
	})
}

// SetRepositoryURL sets the "repository_url" field.
func (u *IssueUpsertBulk) SetRepositoryURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetRepositoryURL(v)
	})
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateRepositoryURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateRepositoryURL()
	})
}

// SetLabelsURL sets the "labels_url" field.
func (u *IssueUpsertBulk) SetLabelsURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetLabelsURL(v)
	})
}

// UpdateLabelsURL sets the "labels_url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateLabelsURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateLabelsURL()
	})
}

// SetCommentsURL sets the "comments_url" field.
func (u *IssueUpsertBulk) SetCommentsURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetCommentsURL(v)
	})
}

// UpdateCommentsURL sets the "comments_url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateCommentsURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCommentsURL()
	})
}

// SetEventsURL sets the "events_url" field.
func (u *IssueUpsertBulk) SetEventsURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetEventsURL(v)
	})
}

// UpdateEventsURL sets the "events_url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateEventsURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateEventsURL()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueUpsertBulk) SetHTMLURL(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateHTMLURL() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetNumber sets the "number" field.
func (u *IssueUpsertBulk) SetNumber(v int64) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetNumber(v)
	})
}

// AddNumber adds v to the "number" field.
func (u *IssueUpsertBulk) AddNumber(v int64) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.AddNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateNumber() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateNumber()
	})
}

// SetState sets the "state" field.
func (u *IssueUpsertBulk) SetState(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateState() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateState()
	})
}

// SetStateReason sets the "state_reason" field.
func (u *IssueUpsertBulk) SetStateReason(v model.StateReason) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetStateReason(v)
	})
}

// UpdateStateReason sets the "state_reason" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateStateReason() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateStateReason()
	})
}

// ClearStateReason clears the value of the "state_reason" field.
func (u *IssueUpsertBulk) ClearStateReason() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.ClearStateReason()
	})
}

// SetTitle sets the "title" field.
func (u *IssueUpsertBulk) SetTitle(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateTitle() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *IssueUpsertBulk) SetBody(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateBody() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *IssueUpsertBulk) ClearBody() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.ClearBody()
	})
}

// SetLocked sets the "locked" field.
func (u *IssueUpsertBulk) SetLocked(v bool) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateLocked() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateLocked()
	})
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (u *IssueUpsertBulk) SetActiveLockReason(v string) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetActiveLockReason(v)
	})
}

// UpdateActiveLockReason sets the "active_lock_reason" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateActiveLockReason() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateActiveLockReason()
	})
}

// ClearActiveLockReason clears the value of the "active_lock_reason" field.
func (u *IssueUpsertBulk) ClearActiveLockReason() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.ClearActiveLockReason()
	})
}

// SetCommentsCount sets the "comments_count" field.
func (u *IssueUpsertBulk) SetCommentsCount(v int64) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetCommentsCount(v)
	})
}

// AddCommentsCount adds v to the "comments_count" field.
func (u *IssueUpsertBulk) AddCommentsCount(v int64) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.AddCommentsCount(v)
	})
}

// UpdateCommentsCount sets the "comments_count" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateCommentsCount() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCommentsCount()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *IssueUpsertBulk) SetClosedAt(v time.Time) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateClosedAt() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IssueUpsertBulk) ClearClosedAt() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.ClearClosedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueUpsertBulk) SetCreatedAt(v time.Time) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateCreatedAt() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueUpsertBulk) SetUpdatedAt(v time.Time) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateUpdatedAt() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDraft sets the "draft" field.
func (u *IssueUpsertBulk) SetDraft(v bool) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateDraft() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateDraft()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueUpsertBulk) SetAuthorAssociation(v model.AuthorAssociation) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateAuthorAssociation() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// SetReactions sets the "reactions" field.
func (u *IssueUpsertBulk) SetReactions(v model.ReactionRollup) *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.SetReactions(v)
	})
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueUpsertBulk) UpdateReactions() *IssueUpsertBulk {
	return u.Update(func(s *IssueUpsert) {
		s.UpdateReactions()
	})
}

// Exec executes the query.
func (u *IssueUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IssueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
