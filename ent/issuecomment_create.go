// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/issuecomment"
	"github.com/gnoverse/gh-sql/ent/user"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// IssueCommentCreate is the builder for creating a IssueComment entity.
type IssueCommentCreate struct {
	config
	mutation *IssueCommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNodeID sets the "node_id" field.
func (icc *IssueCommentCreate) SetNodeID(s string) *IssueCommentCreate {
	icc.mutation.SetNodeID(s)
	return icc
}

// SetURL sets the "url" field.
func (icc *IssueCommentCreate) SetURL(s string) *IssueCommentCreate {
	icc.mutation.SetURL(s)
	return icc
}

// SetBody sets the "body" field.
func (icc *IssueCommentCreate) SetBody(s string) *IssueCommentCreate {
	icc.mutation.SetBody(s)
	return icc
}

// SetHTMLURL sets the "html_url" field.
func (icc *IssueCommentCreate) SetHTMLURL(s string) *IssueCommentCreate {
	icc.mutation.SetHTMLURL(s)
	return icc
}

// SetCreatedAt sets the "created_at" field.
func (icc *IssueCommentCreate) SetCreatedAt(s string) *IssueCommentCreate {
	icc.mutation.SetCreatedAt(s)
	return icc
}

// SetUpdatedAt sets the "updated_at" field.
func (icc *IssueCommentCreate) SetUpdatedAt(s string) *IssueCommentCreate {
	icc.mutation.SetUpdatedAt(s)
	return icc
}

// SetIssueURL sets the "issue_url" field.
func (icc *IssueCommentCreate) SetIssueURL(s string) *IssueCommentCreate {
	icc.mutation.SetIssueURL(s)
	return icc
}

// SetAuthorAssociation sets the "author_association" field.
func (icc *IssueCommentCreate) SetAuthorAssociation(ma model.AuthorAssociation) *IssueCommentCreate {
	icc.mutation.SetAuthorAssociation(ma)
	return icc
}

// SetReactions sets the "reactions" field.
func (icc *IssueCommentCreate) SetReactions(mr model.ReactionRollup) *IssueCommentCreate {
	icc.mutation.SetReactions(mr)
	return icc
}

// SetID sets the "id" field.
func (icc *IssueCommentCreate) SetID(i int64) *IssueCommentCreate {
	icc.mutation.SetID(i)
	return icc
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (icc *IssueCommentCreate) SetIssueID(id int64) *IssueCommentCreate {
	icc.mutation.SetIssueID(id)
	return icc
}

// SetNillableIssueID sets the "issue" edge to the Issue entity by ID if the given value is not nil.
func (icc *IssueCommentCreate) SetNillableIssueID(id *int64) *IssueCommentCreate {
	if id != nil {
		icc = icc.SetIssueID(*id)
	}
	return icc
}

// SetIssue sets the "issue" edge to the Issue entity.
func (icc *IssueCommentCreate) SetIssue(i *Issue) *IssueCommentCreate {
	return icc.SetIssueID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (icc *IssueCommentCreate) SetUserID(id int64) *IssueCommentCreate {
	icc.mutation.SetUserID(id)
	return icc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (icc *IssueCommentCreate) SetNillableUserID(id *int64) *IssueCommentCreate {
	if id != nil {
		icc = icc.SetUserID(*id)
	}
	return icc
}

// SetUser sets the "user" edge to the User entity.
func (icc *IssueCommentCreate) SetUser(u *User) *IssueCommentCreate {
	return icc.SetUserID(u.ID)
}

// Mutation returns the IssueCommentMutation object of the builder.
func (icc *IssueCommentCreate) Mutation() *IssueCommentMutation {
	return icc.mutation
}

// Save creates the IssueComment in the database.
func (icc *IssueCommentCreate) Save(ctx context.Context) (*IssueComment, error) {
	return withHooks(ctx, icc.sqlSave, icc.mutation, icc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (icc *IssueCommentCreate) SaveX(ctx context.Context) *IssueComment {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *IssueCommentCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *IssueCommentCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *IssueCommentCreate) check() error {
	if _, ok := icc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "IssueComment.node_id"`)}
	}
	if _, ok := icc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "IssueComment.url"`)}
	}
	if _, ok := icc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "IssueComment.body"`)}
	}
	if _, ok := icc.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "IssueComment.html_url"`)}
	}
	if _, ok := icc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IssueComment.created_at"`)}
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IssueComment.updated_at"`)}
	}
	if _, ok := icc.mutation.IssueURL(); !ok {
		return &ValidationError{Name: "issue_url", err: errors.New(`ent: missing required field "IssueComment.issue_url"`)}
	}
	if _, ok := icc.mutation.AuthorAssociation(); !ok {
		return &ValidationError{Name: "author_association", err: errors.New(`ent: missing required field "IssueComment.author_association"`)}
	}
	if v, ok := icc.mutation.AuthorAssociation(); ok {
		if err := issuecomment.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "IssueComment.author_association": %w`, err)}
		}
	}
	if _, ok := icc.mutation.Reactions(); !ok {
		return &ValidationError{Name: "reactions", err: errors.New(`ent: missing required field "IssueComment.reactions"`)}
	}
	return nil
}

func (icc *IssueCommentCreate) sqlSave(ctx context.Context) (*IssueComment, error) {
	if err := icc.check(); err != nil {
		return nil, err
	}
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	icc.mutation.id = &_node.ID
	icc.mutation.done = true
	return _node, nil
}

func (icc *IssueCommentCreate) createSpec() (*IssueComment, *sqlgraph.CreateSpec) {
	var (
		_node = &IssueComment{config: icc.config}
		_spec = sqlgraph.NewCreateSpec(issuecomment.Table, sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = icc.conflict
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := icc.mutation.NodeID(); ok {
		_spec.SetField(issuecomment.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := icc.mutation.URL(); ok {
		_spec.SetField(issuecomment.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := icc.mutation.Body(); ok {
		_spec.SetField(issuecomment.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := icc.mutation.HTMLURL(); ok {
		_spec.SetField(issuecomment.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.SetField(issuecomment.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := icc.mutation.UpdatedAt(); ok {
		_spec.SetField(issuecomment.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if value, ok := icc.mutation.IssueURL(); ok {
		_spec.SetField(issuecomment.FieldIssueURL, field.TypeString, value)
		_node.IssueURL = value
	}
	if value, ok := icc.mutation.AuthorAssociation(); ok {
		_spec.SetField(issuecomment.FieldAuthorAssociation, field.TypeEnum, value)
		_node.AuthorAssociation = value
	}
	if value, ok := icc.mutation.Reactions(); ok {
		_spec.SetField(issuecomment.FieldReactions, field.TypeJSON, value)
		_node.Reactions = value
	}
	if nodes := icc.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issuecomment.IssueTable,
			Columns: []string{issuecomment.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.issue_comments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issuecomment.UserTable,
			Columns: []string{issuecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_comments_created = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IssueComment.Create().
//		SetNodeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IssueCommentUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (icc *IssueCommentCreate) OnConflict(opts ...sql.ConflictOption) *IssueCommentUpsertOne {
	icc.conflict = opts
	return &IssueCommentUpsertOne{
		create: icc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icc *IssueCommentCreate) OnConflictColumns(columns ...string) *IssueCommentUpsertOne {
	icc.conflict = append(icc.conflict, sql.ConflictColumns(columns...))
	return &IssueCommentUpsertOne{
		create: icc,
	}
}

type (
	// IssueCommentUpsertOne is the builder for "upsert"-ing
	//  one IssueComment node.
	IssueCommentUpsertOne struct {
		create *IssueCommentCreate
	}

	// IssueCommentUpsert is the "OnConflict" setter.
	IssueCommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetNodeID sets the "node_id" field.
func (u *IssueCommentUpsert) SetNodeID(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldNodeID, v)
	return u
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateNodeID() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldNodeID)
	return u
}

// SetURL sets the "url" field.
func (u *IssueCommentUpsert) SetURL(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateURL() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldURL)
	return u
}

// SetBody sets the "body" field.
func (u *IssueCommentUpsert) SetBody(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateBody() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldBody)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueCommentUpsert) SetHTMLURL(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateHTMLURL() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldHTMLURL)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueCommentUpsert) SetCreatedAt(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateCreatedAt() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueCommentUpsert) SetUpdatedAt(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateUpdatedAt() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldUpdatedAt)
	return u
}

// SetIssueURL sets the "issue_url" field.
func (u *IssueCommentUpsert) SetIssueURL(v string) *IssueCommentUpsert {
	u.Set(issuecomment.FieldIssueURL, v)
	return u
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateIssueURL() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldIssueURL)
	return u
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueCommentUpsert) SetAuthorAssociation(v model.AuthorAssociation) *IssueCommentUpsert {
	u.Set(issuecomment.FieldAuthorAssociation, v)
	return u
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateAuthorAssociation() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldAuthorAssociation)
	return u
}

// SetReactions sets the "reactions" field.
func (u *IssueCommentUpsert) SetReactions(v model.ReactionRollup) *IssueCommentUpsert {
	u.Set(issuecomment.FieldReactions, v)
	return u
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueCommentUpsert) UpdateReactions() *IssueCommentUpsert {
	u.SetExcluded(issuecomment.FieldReactions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(issuecomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IssueCommentUpsertOne) UpdateNewValues() *IssueCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(issuecomment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IssueCommentUpsertOne) Ignore() *IssueCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueCommentUpsertOne) DoNothing() *IssueCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueCommentCreate.OnConflict
// documentation for more info.
func (u *IssueCommentUpsertOne) Update(set func(*IssueCommentUpsert)) *IssueCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *IssueCommentUpsertOne) SetNodeID(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateNodeID() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateNodeID()
	})
}

// SetURL sets the "url" field.
func (u *IssueCommentUpsertOne) SetURL(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateURL() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateURL()
	})
}

// SetBody sets the "body" field.
func (u *IssueCommentUpsertOne) SetBody(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateBody() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateBody()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueCommentUpsertOne) SetHTMLURL(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateHTMLURL() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueCommentUpsertOne) SetCreatedAt(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateCreatedAt() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueCommentUpsertOne) SetUpdatedAt(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateUpdatedAt() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIssueURL sets the "issue_url" field.
func (u *IssueCommentUpsertOne) SetIssueURL(v string) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetIssueURL(v)
	})
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateIssueURL() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateIssueURL()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueCommentUpsertOne) SetAuthorAssociation(v model.AuthorAssociation) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateAuthorAssociation() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// SetReactions sets the "reactions" field.
func (u *IssueCommentUpsertOne) SetReactions(v model.ReactionRollup) *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetReactions(v)
	})
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueCommentUpsertOne) UpdateReactions() *IssueCommentUpsertOne {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateReactions()
	})
}

// Exec executes the query.
func (u *IssueCommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueCommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueCommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IssueCommentUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IssueCommentUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IssueCommentCreateBulk is the builder for creating many IssueComment entities in bulk.
type IssueCommentCreateBulk struct {
	config
	err      error
	builders []*IssueCommentCreate
	conflict []sql.ConflictOption
}

// Save creates the IssueComment entities in the database.
func (iccb *IssueCommentCreateBulk) Save(ctx context.Context) ([]*IssueComment, error) {
	if iccb.err != nil {
		return nil, iccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*IssueComment, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *IssueCommentCreateBulk) SaveX(ctx context.Context) []*IssueComment {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *IssueCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *IssueCommentCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IssueComment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IssueCommentUpsert) {
//			SetNodeID(v+v).
//		}).
//		Exec(ctx)
func (iccb *IssueCommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IssueCommentUpsertBulk {
	iccb.conflict = opts
	return &IssueCommentUpsertBulk{
		create: iccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iccb *IssueCommentCreateBulk) OnConflictColumns(columns ...string) *IssueCommentUpsertBulk {
	iccb.conflict = append(iccb.conflict, sql.ConflictColumns(columns...))
	return &IssueCommentUpsertBulk{
		create: iccb,
	}
}

// IssueCommentUpsertBulk is the builder for "upsert"-ing
// a bulk of IssueComment nodes.
type IssueCommentUpsertBulk struct {
	create *IssueCommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(issuecomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IssueCommentUpsertBulk) UpdateNewValues() *IssueCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(issuecomment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IssueComment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IssueCommentUpsertBulk) Ignore() *IssueCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IssueCommentUpsertBulk) DoNothing() *IssueCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IssueCommentCreateBulk.OnConflict
// documentation for more info.
func (u *IssueCommentUpsertBulk) Update(set func(*IssueCommentUpsert)) *IssueCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IssueCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetNodeID sets the "node_id" field.
func (u *IssueCommentUpsertBulk) SetNodeID(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetNodeID(v)
	})
}

// UpdateNodeID sets the "node_id" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateNodeID() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateNodeID()
	})
}

// SetURL sets the "url" field.
func (u *IssueCommentUpsertBulk) SetURL(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateURL() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateURL()
	})
}

// SetBody sets the "body" field.
func (u *IssueCommentUpsertBulk) SetBody(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateBody() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateBody()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *IssueCommentUpsertBulk) SetHTMLURL(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateHTMLURL() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IssueCommentUpsertBulk) SetCreatedAt(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateCreatedAt() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IssueCommentUpsertBulk) SetUpdatedAt(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateUpdatedAt() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIssueURL sets the "issue_url" field.
func (u *IssueCommentUpsertBulk) SetIssueURL(v string) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetIssueURL(v)
	})
}

// UpdateIssueURL sets the "issue_url" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateIssueURL() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateIssueURL()
	})
}

// SetAuthorAssociation sets the "author_association" field.
func (u *IssueCommentUpsertBulk) SetAuthorAssociation(v model.AuthorAssociation) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetAuthorAssociation(v)
	})
}

// UpdateAuthorAssociation sets the "author_association" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateAuthorAssociation() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateAuthorAssociation()
	})
}

// SetReactions sets the "reactions" field.
func (u *IssueCommentUpsertBulk) SetReactions(v model.ReactionRollup) *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.SetReactions(v)
	})
}

// UpdateReactions sets the "reactions" field to the value that was provided on create.
func (u *IssueCommentUpsertBulk) UpdateReactions() *IssueCommentUpsertBulk {
	return u.Update(func(s *IssueCommentUpsert) {
		s.UpdateReactions()
	})
}

// Exec executes the query.
func (u *IssueCommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IssueCommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IssueCommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IssueCommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
