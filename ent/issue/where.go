// Code generated by ent, DO NOT EDIT.

package issue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnolang/gh-sql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldID, id))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldNodeID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldURL, v))
}

// RepositoryURL applies equality check predicate on the "repository_url" field. It's identical to RepositoryURLEQ.
func RepositoryURL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldRepositoryURL, v))
}

// LabelsURL applies equality check predicate on the "labels_url" field. It's identical to LabelsURLEQ.
func LabelsURL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldLabelsURL, v))
}

// CommentsURL applies equality check predicate on the "comments_url" field. It's identical to CommentsURLEQ.
func CommentsURL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldCommentsURL, v))
}

// EventsURL applies equality check predicate on the "events_url" field. It's identical to EventsURLEQ.
func EventsURL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldEventsURL, v))
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldHTMLURL, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldNumber, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldState, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldTitle, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldBody, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldLocked, v))
}

// ActiveLockReason applies equality check predicate on the "active_lock_reason" field. It's identical to ActiveLockReasonEQ.
func ActiveLockReason(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldActiveLockReason, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldClosedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldUpdatedAt, v))
}

// Draft applies equality check predicate on the "draft" field. It's identical to DraftEQ.
func Draft(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldDraft, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldNodeID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldURL, v))
}

// RepositoryURLEQ applies the EQ predicate on the "repository_url" field.
func RepositoryURLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldRepositoryURL, v))
}

// RepositoryURLNEQ applies the NEQ predicate on the "repository_url" field.
func RepositoryURLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldRepositoryURL, v))
}

// RepositoryURLIn applies the In predicate on the "repository_url" field.
func RepositoryURLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldRepositoryURL, vs...))
}

// RepositoryURLNotIn applies the NotIn predicate on the "repository_url" field.
func RepositoryURLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldRepositoryURL, vs...))
}

// RepositoryURLGT applies the GT predicate on the "repository_url" field.
func RepositoryURLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldRepositoryURL, v))
}

// RepositoryURLGTE applies the GTE predicate on the "repository_url" field.
func RepositoryURLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldRepositoryURL, v))
}

// RepositoryURLLT applies the LT predicate on the "repository_url" field.
func RepositoryURLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldRepositoryURL, v))
}

// RepositoryURLLTE applies the LTE predicate on the "repository_url" field.
func RepositoryURLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldRepositoryURL, v))
}

// RepositoryURLContains applies the Contains predicate on the "repository_url" field.
func RepositoryURLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldRepositoryURL, v))
}

// RepositoryURLHasPrefix applies the HasPrefix predicate on the "repository_url" field.
func RepositoryURLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldRepositoryURL, v))
}

// RepositoryURLHasSuffix applies the HasSuffix predicate on the "repository_url" field.
func RepositoryURLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldRepositoryURL, v))
}

// RepositoryURLEqualFold applies the EqualFold predicate on the "repository_url" field.
func RepositoryURLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldRepositoryURL, v))
}

// RepositoryURLContainsFold applies the ContainsFold predicate on the "repository_url" field.
func RepositoryURLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldRepositoryURL, v))
}

// LabelsURLEQ applies the EQ predicate on the "labels_url" field.
func LabelsURLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldLabelsURL, v))
}

// LabelsURLNEQ applies the NEQ predicate on the "labels_url" field.
func LabelsURLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldLabelsURL, v))
}

// LabelsURLIn applies the In predicate on the "labels_url" field.
func LabelsURLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldLabelsURL, vs...))
}

// LabelsURLNotIn applies the NotIn predicate on the "labels_url" field.
func LabelsURLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldLabelsURL, vs...))
}

// LabelsURLGT applies the GT predicate on the "labels_url" field.
func LabelsURLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldLabelsURL, v))
}

// LabelsURLGTE applies the GTE predicate on the "labels_url" field.
func LabelsURLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldLabelsURL, v))
}

// LabelsURLLT applies the LT predicate on the "labels_url" field.
func LabelsURLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldLabelsURL, v))
}

// LabelsURLLTE applies the LTE predicate on the "labels_url" field.
func LabelsURLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldLabelsURL, v))
}

// LabelsURLContains applies the Contains predicate on the "labels_url" field.
func LabelsURLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldLabelsURL, v))
}

// LabelsURLHasPrefix applies the HasPrefix predicate on the "labels_url" field.
func LabelsURLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldLabelsURL, v))
}

// LabelsURLHasSuffix applies the HasSuffix predicate on the "labels_url" field.
func LabelsURLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldLabelsURL, v))
}

// LabelsURLEqualFold applies the EqualFold predicate on the "labels_url" field.
func LabelsURLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldLabelsURL, v))
}

// LabelsURLContainsFold applies the ContainsFold predicate on the "labels_url" field.
func LabelsURLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldLabelsURL, v))
}

// CommentsURLEQ applies the EQ predicate on the "comments_url" field.
func CommentsURLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldCommentsURL, v))
}

// CommentsURLNEQ applies the NEQ predicate on the "comments_url" field.
func CommentsURLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldCommentsURL, v))
}

// CommentsURLIn applies the In predicate on the "comments_url" field.
func CommentsURLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldCommentsURL, vs...))
}

// CommentsURLNotIn applies the NotIn predicate on the "comments_url" field.
func CommentsURLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldCommentsURL, vs...))
}

// CommentsURLGT applies the GT predicate on the "comments_url" field.
func CommentsURLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldCommentsURL, v))
}

// CommentsURLGTE applies the GTE predicate on the "comments_url" field.
func CommentsURLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldCommentsURL, v))
}

// CommentsURLLT applies the LT predicate on the "comments_url" field.
func CommentsURLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldCommentsURL, v))
}

// CommentsURLLTE applies the LTE predicate on the "comments_url" field.
func CommentsURLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldCommentsURL, v))
}

// CommentsURLContains applies the Contains predicate on the "comments_url" field.
func CommentsURLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldCommentsURL, v))
}

// CommentsURLHasPrefix applies the HasPrefix predicate on the "comments_url" field.
func CommentsURLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldCommentsURL, v))
}

// CommentsURLHasSuffix applies the HasSuffix predicate on the "comments_url" field.
func CommentsURLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldCommentsURL, v))
}

// CommentsURLEqualFold applies the EqualFold predicate on the "comments_url" field.
func CommentsURLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldCommentsURL, v))
}

// CommentsURLContainsFold applies the ContainsFold predicate on the "comments_url" field.
func CommentsURLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldCommentsURL, v))
}

// EventsURLEQ applies the EQ predicate on the "events_url" field.
func EventsURLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldEventsURL, v))
}

// EventsURLNEQ applies the NEQ predicate on the "events_url" field.
func EventsURLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldEventsURL, v))
}

// EventsURLIn applies the In predicate on the "events_url" field.
func EventsURLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldEventsURL, vs...))
}

// EventsURLNotIn applies the NotIn predicate on the "events_url" field.
func EventsURLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldEventsURL, vs...))
}

// EventsURLGT applies the GT predicate on the "events_url" field.
func EventsURLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldEventsURL, v))
}

// EventsURLGTE applies the GTE predicate on the "events_url" field.
func EventsURLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldEventsURL, v))
}

// EventsURLLT applies the LT predicate on the "events_url" field.
func EventsURLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldEventsURL, v))
}

// EventsURLLTE applies the LTE predicate on the "events_url" field.
func EventsURLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldEventsURL, v))
}

// EventsURLContains applies the Contains predicate on the "events_url" field.
func EventsURLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldEventsURL, v))
}

// EventsURLHasPrefix applies the HasPrefix predicate on the "events_url" field.
func EventsURLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldEventsURL, v))
}

// EventsURLHasSuffix applies the HasSuffix predicate on the "events_url" field.
func EventsURLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldEventsURL, v))
}

// EventsURLEqualFold applies the EqualFold predicate on the "events_url" field.
func EventsURLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldEventsURL, v))
}

// EventsURLContainsFold applies the ContainsFold predicate on the "events_url" field.
func EventsURLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldEventsURL, v))
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldHTMLURL, v))
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldHTMLURL, v))
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldHTMLURL, vs...))
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldHTMLURL, vs...))
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldHTMLURL, v))
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldHTMLURL, v))
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldHTMLURL, v))
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldHTMLURL, v))
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldHTMLURL, v))
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldHTMLURL, v))
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldHTMLURL, v))
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldHTMLURL, v))
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldHTMLURL, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int64) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int64) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int64) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldNumber, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldState, v))
}

// StateReasonEQ applies the EQ predicate on the "state_reason" field.
func StateReasonEQ(v StateReason) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldStateReason, v))
}

// StateReasonNEQ applies the NEQ predicate on the "state_reason" field.
func StateReasonNEQ(v StateReason) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldStateReason, v))
}

// StateReasonIn applies the In predicate on the "state_reason" field.
func StateReasonIn(vs ...StateReason) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldStateReason, vs...))
}

// StateReasonNotIn applies the NotIn predicate on the "state_reason" field.
func StateReasonNotIn(vs ...StateReason) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldStateReason, vs...))
}

// StateReasonIsNil applies the IsNil predicate on the "state_reason" field.
func StateReasonIsNil() predicate.Issue {
	return predicate.Issue(sql.FieldIsNull(FieldStateReason))
}

// StateReasonNotNil applies the NotNil predicate on the "state_reason" field.
func StateReasonNotNil() predicate.Issue {
	return predicate.Issue(sql.FieldNotNull(FieldStateReason))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldTitle, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.Issue {
	return predicate.Issue(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.Issue {
	return predicate.Issue(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldBody, v))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldLocked, v))
}

// ActiveLockReasonEQ applies the EQ predicate on the "active_lock_reason" field.
func ActiveLockReasonEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldActiveLockReason, v))
}

// ActiveLockReasonNEQ applies the NEQ predicate on the "active_lock_reason" field.
func ActiveLockReasonNEQ(v string) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldActiveLockReason, v))
}

// ActiveLockReasonIn applies the In predicate on the "active_lock_reason" field.
func ActiveLockReasonIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldActiveLockReason, vs...))
}

// ActiveLockReasonNotIn applies the NotIn predicate on the "active_lock_reason" field.
func ActiveLockReasonNotIn(vs ...string) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldActiveLockReason, vs...))
}

// ActiveLockReasonGT applies the GT predicate on the "active_lock_reason" field.
func ActiveLockReasonGT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldActiveLockReason, v))
}

// ActiveLockReasonGTE applies the GTE predicate on the "active_lock_reason" field.
func ActiveLockReasonGTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldActiveLockReason, v))
}

// ActiveLockReasonLT applies the LT predicate on the "active_lock_reason" field.
func ActiveLockReasonLT(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldActiveLockReason, v))
}

// ActiveLockReasonLTE applies the LTE predicate on the "active_lock_reason" field.
func ActiveLockReasonLTE(v string) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldActiveLockReason, v))
}

// ActiveLockReasonContains applies the Contains predicate on the "active_lock_reason" field.
func ActiveLockReasonContains(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContains(FieldActiveLockReason, v))
}

// ActiveLockReasonHasPrefix applies the HasPrefix predicate on the "active_lock_reason" field.
func ActiveLockReasonHasPrefix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasPrefix(FieldActiveLockReason, v))
}

// ActiveLockReasonHasSuffix applies the HasSuffix predicate on the "active_lock_reason" field.
func ActiveLockReasonHasSuffix(v string) predicate.Issue {
	return predicate.Issue(sql.FieldHasSuffix(FieldActiveLockReason, v))
}

// ActiveLockReasonIsNil applies the IsNil predicate on the "active_lock_reason" field.
func ActiveLockReasonIsNil() predicate.Issue {
	return predicate.Issue(sql.FieldIsNull(FieldActiveLockReason))
}

// ActiveLockReasonNotNil applies the NotNil predicate on the "active_lock_reason" field.
func ActiveLockReasonNotNil() predicate.Issue {
	return predicate.Issue(sql.FieldNotNull(FieldActiveLockReason))
}

// ActiveLockReasonEqualFold applies the EqualFold predicate on the "active_lock_reason" field.
func ActiveLockReasonEqualFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldEqualFold(FieldActiveLockReason, v))
}

// ActiveLockReasonContainsFold applies the ContainsFold predicate on the "active_lock_reason" field.
func ActiveLockReasonContainsFold(v string) predicate.Issue {
	return predicate.Issue(sql.FieldContainsFold(FieldActiveLockReason, v))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Issue {
	return predicate.Issue(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Issue {
	return predicate.Issue(sql.FieldNotNull(FieldClosedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Issue {
	return predicate.Issue(sql.FieldLTE(FieldUpdatedAt, v))
}

// DraftEQ applies the EQ predicate on the "draft" field.
func DraftEQ(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldDraft, v))
}

// DraftNEQ applies the NEQ predicate on the "draft" field.
func DraftNEQ(v bool) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldDraft, v))
}

// AuthorAssociationEQ applies the EQ predicate on the "author_association" field.
func AuthorAssociationEQ(v AuthorAssociation) predicate.Issue {
	return predicate.Issue(sql.FieldEQ(FieldAuthorAssociation, v))
}

// AuthorAssociationNEQ applies the NEQ predicate on the "author_association" field.
func AuthorAssociationNEQ(v AuthorAssociation) predicate.Issue {
	return predicate.Issue(sql.FieldNEQ(FieldAuthorAssociation, v))
}

// AuthorAssociationIn applies the In predicate on the "author_association" field.
func AuthorAssociationIn(vs ...AuthorAssociation) predicate.Issue {
	return predicate.Issue(sql.FieldIn(FieldAuthorAssociation, vs...))
}

// AuthorAssociationNotIn applies the NotIn predicate on the "author_association" field.
func AuthorAssociationNotIn(vs ...AuthorAssociation) predicate.Issue {
	return predicate.Issue(sql.FieldNotIn(FieldAuthorAssociation, vs...))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignees applies the HasEdge predicate on the "assignees" edge.
func HasAssignees() predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssigneesTable, AssigneesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssigneesWith applies the HasEdge predicate on the "assignees" edge with a given conditions (other predicates).
func HasAssigneesWith(preds ...predicate.User) predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := newAssigneesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClosedBy applies the HasEdge predicate on the "closed_by" edge.
func HasClosedBy() predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ClosedByTable, ClosedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClosedByWith applies the HasEdge predicate on the "closed_by" edge with a given conditions (other predicates).
func HasClosedByWith(preds ...predicate.User) predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := newClosedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.IssueComment) predicate.Issue {
	return predicate.Issue(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Issue) predicate.Issue {
	return predicate.Issue(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Issue) predicate.Issue {
	return predicate.Issue(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Issue) predicate.Issue {
	return predicate.Issue(sql.NotPredicates(p))
}
