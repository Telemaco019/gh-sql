// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/issuecomment"
	"github.com/gnoverse/gh-sql/ent/predicate"
	"github.com/gnoverse/gh-sql/ent/pullrequest"
	"github.com/gnoverse/gh-sql/ent/repository"
	"github.com/gnoverse/gh-sql/ent/timelineevent"
	"github.com/gnoverse/gh-sql/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetLogin sets the "login" field.
func (uu *UserUpdate) SetLogin(s string) *UserUpdate {
	uu.mutation.SetLogin(s)
	return uu
}

// SetNillableLogin sets the "login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLogin(s *string) *UserUpdate {
	if s != nil {
		uu.SetLogin(*s)
	}
	return uu
}

// SetNodeID sets the "node_id" field.
func (uu *UserUpdate) SetNodeID(s string) *UserUpdate {
	uu.mutation.SetNodeID(s)
	return uu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNodeID(s *string) *UserUpdate {
	if s != nil {
		uu.SetNodeID(*s)
	}
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// SetGravatarID sets the "gravatar_id" field.
func (uu *UserUpdate) SetGravatarID(s string) *UserUpdate {
	uu.mutation.SetGravatarID(s)
	return uu
}

// SetNillableGravatarID sets the "gravatar_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGravatarID(s *string) *UserUpdate {
	if s != nil {
		uu.SetGravatarID(*s)
	}
	return uu
}

// ClearGravatarID clears the value of the "gravatar_id" field.
func (uu *UserUpdate) ClearGravatarID() *UserUpdate {
	uu.mutation.ClearGravatarID()
	return uu
}

// SetURL sets the "url" field.
func (uu *UserUpdate) SetURL(s string) *UserUpdate {
	uu.mutation.SetURL(s)
	return uu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetURL(*s)
	}
	return uu
}

// SetHTMLURL sets the "html_url" field.
func (uu *UserUpdate) SetHTMLURL(s string) *UserUpdate {
	uu.mutation.SetHTMLURL(s)
	return uu
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHTMLURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetHTMLURL(*s)
	}
	return uu
}

// SetFollowersURL sets the "followers_url" field.
func (uu *UserUpdate) SetFollowersURL(s string) *UserUpdate {
	uu.mutation.SetFollowersURL(s)
	return uu
}

// SetNillableFollowersURL sets the "followers_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowersURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetFollowersURL(*s)
	}
	return uu
}

// SetFollowingURL sets the "following_url" field.
func (uu *UserUpdate) SetFollowingURL(s string) *UserUpdate {
	uu.mutation.SetFollowingURL(s)
	return uu
}

// SetNillableFollowingURL sets the "following_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowingURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetFollowingURL(*s)
	}
	return uu
}

// SetGistsURL sets the "gists_url" field.
func (uu *UserUpdate) SetGistsURL(s string) *UserUpdate {
	uu.mutation.SetGistsURL(s)
	return uu
}

// SetNillableGistsURL sets the "gists_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGistsURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetGistsURL(*s)
	}
	return uu
}

// SetStarredURL sets the "starred_url" field.
func (uu *UserUpdate) SetStarredURL(s string) *UserUpdate {
	uu.mutation.SetStarredURL(s)
	return uu
}

// SetNillableStarredURL sets the "starred_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStarredURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetStarredURL(*s)
	}
	return uu
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (uu *UserUpdate) SetSubscriptionsURL(s string) *UserUpdate {
	uu.mutation.SetSubscriptionsURL(s)
	return uu
}

// SetNillableSubscriptionsURL sets the "subscriptions_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSubscriptionsURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetSubscriptionsURL(*s)
	}
	return uu
}

// SetOrganizationsURL sets the "organizations_url" field.
func (uu *UserUpdate) SetOrganizationsURL(s string) *UserUpdate {
	uu.mutation.SetOrganizationsURL(s)
	return uu
}

// SetNillableOrganizationsURL sets the "organizations_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOrganizationsURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetOrganizationsURL(*s)
	}
	return uu
}

// SetReposURL sets the "repos_url" field.
func (uu *UserUpdate) SetReposURL(s string) *UserUpdate {
	uu.mutation.SetReposURL(s)
	return uu
}

// SetNillableReposURL sets the "repos_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableReposURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetReposURL(*s)
	}
	return uu
}

// SetEventsURL sets the "events_url" field.
func (uu *UserUpdate) SetEventsURL(s string) *UserUpdate {
	uu.mutation.SetEventsURL(s)
	return uu
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEventsURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetEventsURL(*s)
	}
	return uu
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (uu *UserUpdate) SetReceivedEventsURL(s string) *UserUpdate {
	uu.mutation.SetReceivedEventsURL(s)
	return uu
}

// SetNillableReceivedEventsURL sets the "received_events_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableReceivedEventsURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetReceivedEventsURL(*s)
	}
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(s string) *UserUpdate {
	uu.mutation.SetType(s)
	return uu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableType(s *string) *UserUpdate {
	if s != nil {
		uu.SetType(*s)
	}
	return uu
}

// SetSiteAdmin sets the "site_admin" field.
func (uu *UserUpdate) SetSiteAdmin(b bool) *UserUpdate {
	uu.mutation.SetSiteAdmin(b)
	return uu
}

// SetNillableSiteAdmin sets the "site_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSiteAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetSiteAdmin(*b)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetCompany sets the "company" field.
func (uu *UserUpdate) SetCompany(s string) *UserUpdate {
	uu.mutation.SetCompany(s)
	return uu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCompany(s *string) *UserUpdate {
	if s != nil {
		uu.SetCompany(*s)
	}
	return uu
}

// ClearCompany clears the value of the "company" field.
func (uu *UserUpdate) ClearCompany() *UserUpdate {
	uu.mutation.ClearCompany()
	return uu
}

// SetBlog sets the "blog" field.
func (uu *UserUpdate) SetBlog(s string) *UserUpdate {
	uu.mutation.SetBlog(s)
	return uu
}

// SetNillableBlog sets the "blog" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBlog(s *string) *UserUpdate {
	if s != nil {
		uu.SetBlog(*s)
	}
	return uu
}

// ClearBlog clears the value of the "blog" field.
func (uu *UserUpdate) ClearBlog() *UserUpdate {
	uu.mutation.ClearBlog()
	return uu
}

// SetLocation sets the "location" field.
func (uu *UserUpdate) SetLocation(s string) *UserUpdate {
	uu.mutation.SetLocation(s)
	return uu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocation(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocation(*s)
	}
	return uu
}

// ClearLocation clears the value of the "location" field.
func (uu *UserUpdate) ClearLocation() *UserUpdate {
	uu.mutation.ClearLocation()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetHireable sets the "hireable" field.
func (uu *UserUpdate) SetHireable(b bool) *UserUpdate {
	uu.mutation.SetHireable(b)
	return uu
}

// SetNillableHireable sets the "hireable" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHireable(b *bool) *UserUpdate {
	if b != nil {
		uu.SetHireable(*b)
	}
	return uu
}

// ClearHireable clears the value of the "hireable" field.
func (uu *UserUpdate) ClearHireable() *UserUpdate {
	uu.mutation.ClearHireable()
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// ClearBio clears the value of the "bio" field.
func (uu *UserUpdate) ClearBio() *UserUpdate {
	uu.mutation.ClearBio()
	return uu
}

// SetPublicRepos sets the "public_repos" field.
func (uu *UserUpdate) SetPublicRepos(i int64) *UserUpdate {
	uu.mutation.ResetPublicRepos()
	uu.mutation.SetPublicRepos(i)
	return uu
}

// SetNillablePublicRepos sets the "public_repos" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicRepos(i *int64) *UserUpdate {
	if i != nil {
		uu.SetPublicRepos(*i)
	}
	return uu
}

// AddPublicRepos adds i to the "public_repos" field.
func (uu *UserUpdate) AddPublicRepos(i int64) *UserUpdate {
	uu.mutation.AddPublicRepos(i)
	return uu
}

// SetPublicGists sets the "public_gists" field.
func (uu *UserUpdate) SetPublicGists(i int64) *UserUpdate {
	uu.mutation.ResetPublicGists()
	uu.mutation.SetPublicGists(i)
	return uu
}

// SetNillablePublicGists sets the "public_gists" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicGists(i *int64) *UserUpdate {
	if i != nil {
		uu.SetPublicGists(*i)
	}
	return uu
}

// AddPublicGists adds i to the "public_gists" field.
func (uu *UserUpdate) AddPublicGists(i int64) *UserUpdate {
	uu.mutation.AddPublicGists(i)
	return uu
}

// SetFollowers sets the "followers" field.
func (uu *UserUpdate) SetFollowers(i int64) *UserUpdate {
	uu.mutation.ResetFollowers()
	uu.mutation.SetFollowers(i)
	return uu
}

// SetNillableFollowers sets the "followers" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowers(i *int64) *UserUpdate {
	if i != nil {
		uu.SetFollowers(*i)
	}
	return uu
}

// AddFollowers adds i to the "followers" field.
func (uu *UserUpdate) AddFollowers(i int64) *UserUpdate {
	uu.mutation.AddFollowers(i)
	return uu
}

// SetFollowing sets the "following" field.
func (uu *UserUpdate) SetFollowing(i int64) *UserUpdate {
	uu.mutation.ResetFollowing()
	uu.mutation.SetFollowing(i)
	return uu
}

// SetNillableFollowing sets the "following" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowing(i *int64) *UserUpdate {
	if i != nil {
		uu.SetFollowing(*i)
	}
	return uu
}

// AddFollowing adds i to the "following" field.
func (uu *UserUpdate) AddFollowing(i int64) *UserUpdate {
	uu.mutation.AddFollowing(i)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uu *UserUpdate) AddRepositoryIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddRepositoryIDs(ids...)
	return uu
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uu *UserUpdate) AddRepositories(r ...*Repository) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRepositoryIDs(ids...)
}

// AddIssuesCreatedIDs adds the "issues_created" edge to the Issue entity by IDs.
func (uu *UserUpdate) AddIssuesCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddIssuesCreatedIDs(ids...)
	return uu
}

// AddIssuesCreated adds the "issues_created" edges to the Issue entity.
func (uu *UserUpdate) AddIssuesCreated(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIssuesCreatedIDs(ids...)
}

// AddIssuesClosedIDs adds the "issues_closed" edge to the Issue entity by IDs.
func (uu *UserUpdate) AddIssuesClosedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddIssuesClosedIDs(ids...)
	return uu
}

// AddIssuesClosed adds the "issues_closed" edges to the Issue entity.
func (uu *UserUpdate) AddIssuesClosed(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIssuesClosedIDs(ids...)
}

// AddPrsCreatedIDs adds the "prs_created" edge to the PullRequest entity by IDs.
func (uu *UserUpdate) AddPrsCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddPrsCreatedIDs(ids...)
	return uu
}

// AddPrsCreated adds the "prs_created" edges to the PullRequest entity.
func (uu *UserUpdate) AddPrsCreated(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPrsCreatedIDs(ids...)
}

// AddCommentsCreatedIDs adds the "comments_created" edge to the IssueComment entity by IDs.
func (uu *UserUpdate) AddCommentsCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddCommentsCreatedIDs(ids...)
	return uu
}

// AddCommentsCreated adds the "comments_created" edges to the IssueComment entity.
func (uu *UserUpdate) AddCommentsCreated(i ...*IssueComment) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddCommentsCreatedIDs(ids...)
}

// AddIssuesAssignedIDs adds the "issues_assigned" edge to the Issue entity by IDs.
func (uu *UserUpdate) AddIssuesAssignedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddIssuesAssignedIDs(ids...)
	return uu
}

// AddIssuesAssigned adds the "issues_assigned" edges to the Issue entity.
func (uu *UserUpdate) AddIssuesAssigned(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIssuesAssignedIDs(ids...)
}

// AddPrsAssignedIDs adds the "prs_assigned" edge to the PullRequest entity by IDs.
func (uu *UserUpdate) AddPrsAssignedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddPrsAssignedIDs(ids...)
	return uu
}

// AddPrsAssigned adds the "prs_assigned" edges to the PullRequest entity.
func (uu *UserUpdate) AddPrsAssigned(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPrsAssignedIDs(ids...)
}

// AddPrsReviewRequestedIDs adds the "prs_review_requested" edge to the PullRequest entity by IDs.
func (uu *UserUpdate) AddPrsReviewRequestedIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddPrsReviewRequestedIDs(ids...)
	return uu
}

// AddPrsReviewRequested adds the "prs_review_requested" edges to the PullRequest entity.
func (uu *UserUpdate) AddPrsReviewRequested(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPrsReviewRequestedIDs(ids...)
}

// AddTimelineEventsCreatedIDs adds the "timeline_events_created" edge to the TimelineEvent entity by IDs.
func (uu *UserUpdate) AddTimelineEventsCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTimelineEventsCreatedIDs(ids...)
	return uu
}

// AddTimelineEventsCreated adds the "timeline_events_created" edges to the TimelineEvent entity.
func (uu *UserUpdate) AddTimelineEventsCreated(t ...*TimelineEvent) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTimelineEventsCreatedIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (uu *UserUpdate) ClearRepositories() *UserUpdate {
	uu.mutation.ClearRepositories()
	return uu
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (uu *UserUpdate) RemoveRepositoryIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveRepositoryIDs(ids...)
	return uu
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (uu *UserUpdate) RemoveRepositories(r ...*Repository) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRepositoryIDs(ids...)
}

// ClearIssuesCreated clears all "issues_created" edges to the Issue entity.
func (uu *UserUpdate) ClearIssuesCreated() *UserUpdate {
	uu.mutation.ClearIssuesCreated()
	return uu
}

// RemoveIssuesCreatedIDs removes the "issues_created" edge to Issue entities by IDs.
func (uu *UserUpdate) RemoveIssuesCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveIssuesCreatedIDs(ids...)
	return uu
}

// RemoveIssuesCreated removes "issues_created" edges to Issue entities.
func (uu *UserUpdate) RemoveIssuesCreated(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIssuesCreatedIDs(ids...)
}

// ClearIssuesClosed clears all "issues_closed" edges to the Issue entity.
func (uu *UserUpdate) ClearIssuesClosed() *UserUpdate {
	uu.mutation.ClearIssuesClosed()
	return uu
}

// RemoveIssuesClosedIDs removes the "issues_closed" edge to Issue entities by IDs.
func (uu *UserUpdate) RemoveIssuesClosedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveIssuesClosedIDs(ids...)
	return uu
}

// RemoveIssuesClosed removes "issues_closed" edges to Issue entities.
func (uu *UserUpdate) RemoveIssuesClosed(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIssuesClosedIDs(ids...)
}

// ClearPrsCreated clears all "prs_created" edges to the PullRequest entity.
func (uu *UserUpdate) ClearPrsCreated() *UserUpdate {
	uu.mutation.ClearPrsCreated()
	return uu
}

// RemovePrsCreatedIDs removes the "prs_created" edge to PullRequest entities by IDs.
func (uu *UserUpdate) RemovePrsCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemovePrsCreatedIDs(ids...)
	return uu
}

// RemovePrsCreated removes "prs_created" edges to PullRequest entities.
func (uu *UserUpdate) RemovePrsCreated(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePrsCreatedIDs(ids...)
}

// ClearCommentsCreated clears all "comments_created" edges to the IssueComment entity.
func (uu *UserUpdate) ClearCommentsCreated() *UserUpdate {
	uu.mutation.ClearCommentsCreated()
	return uu
}

// RemoveCommentsCreatedIDs removes the "comments_created" edge to IssueComment entities by IDs.
func (uu *UserUpdate) RemoveCommentsCreatedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveCommentsCreatedIDs(ids...)
	return uu
}

// RemoveCommentsCreated removes "comments_created" edges to IssueComment entities.
func (uu *UserUpdate) RemoveCommentsCreated(i ...*IssueComment) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveCommentsCreatedIDs(ids...)
}

// ClearIssuesAssigned clears all "issues_assigned" edges to the Issue entity.
func (uu *UserUpdate) ClearIssuesAssigned() *UserUpdate {
	uu.mutation.ClearIssuesAssigned()
	return uu
}

// RemoveIssuesAssignedIDs removes the "issues_assigned" edge to Issue entities by IDs.
func (uu *UserUpdate) RemoveIssuesAssignedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveIssuesAssignedIDs(ids...)
	return uu
}

// RemoveIssuesAssigned removes "issues_assigned" edges to Issue entities.
func (uu *UserUpdate) RemoveIssuesAssigned(i ...*Issue) *UserUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIssuesAssignedIDs(ids...)
}

// ClearPrsAssigned clears all "prs_assigned" edges to the PullRequest entity.
func (uu *UserUpdate) ClearPrsAssigned() *UserUpdate {
	uu.mutation.ClearPrsAssigned()
	return uu
}

// RemovePrsAssignedIDs removes the "prs_assigned" edge to PullRequest entities by IDs.
func (uu *UserUpdate) RemovePrsAssignedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemovePrsAssignedIDs(ids...)
	return uu
}

// RemovePrsAssigned removes "prs_assigned" edges to PullRequest entities.
func (uu *UserUpdate) RemovePrsAssigned(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePrsAssignedIDs(ids...)
}

// ClearPrsReviewRequested clears all "prs_review_requested" edges to the PullRequest entity.
func (uu *UserUpdate) ClearPrsReviewRequested() *UserUpdate {
	uu.mutation.ClearPrsReviewRequested()
	return uu
}

// RemovePrsReviewRequestedIDs removes the "prs_review_requested" edge to PullRequest entities by IDs.
func (uu *UserUpdate) RemovePrsReviewRequestedIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemovePrsReviewRequestedIDs(ids...)
	return uu
}

// RemovePrsReviewRequested removes "prs_review_requested" edges to PullRequest entities.
func (uu *UserUpdate) RemovePrsReviewRequested(p ...*PullRequest) *UserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePrsReviewRequestedIDs(ids...)
}

// ClearTimelineEventsCreated clears all "timeline_events_created" edges to the TimelineEvent entity.
func (uu *UserUpdate) ClearTimelineEventsCreated() *UserUpdate {
	uu.mutation.ClearTimelineEventsCreated()
	return uu
}

// RemoveTimelineEventsCreatedIDs removes the "timeline_events_created" edge to TimelineEvent entities by IDs.
func (uu *UserUpdate) RemoveTimelineEventsCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTimelineEventsCreatedIDs(ids...)
	return uu
}

// RemoveTimelineEventsCreated removes "timeline_events_created" edges to TimelineEvent entities.
func (uu *UserUpdate) RemoveTimelineEventsCreated(t ...*TimelineEvent) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTimelineEventsCreatedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uu.mutation.NodeID(); ok {
		_spec.SetField(user.FieldNodeID, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.GravatarID(); ok {
		_spec.SetField(user.FieldGravatarID, field.TypeString, value)
	}
	if uu.mutation.GravatarIDCleared() {
		_spec.ClearField(user.FieldGravatarID, field.TypeString)
	}
	if value, ok := uu.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.HTMLURL(); ok {
		_spec.SetField(user.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.FollowersURL(); ok {
		_spec.SetField(user.FieldFollowersURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.FollowingURL(); ok {
		_spec.SetField(user.FieldFollowingURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.GistsURL(); ok {
		_spec.SetField(user.FieldGistsURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.StarredURL(); ok {
		_spec.SetField(user.FieldStarredURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.SubscriptionsURL(); ok {
		_spec.SetField(user.FieldSubscriptionsURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.OrganizationsURL(); ok {
		_spec.SetField(user.FieldOrganizationsURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.ReposURL(); ok {
		_spec.SetField(user.FieldReposURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.EventsURL(); ok {
		_spec.SetField(user.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.ReceivedEventsURL(); ok {
		_spec.SetField(user.FieldReceivedEventsURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if value, ok := uu.mutation.SiteAdmin(); ok {
		_spec.SetField(user.FieldSiteAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
	}
	if uu.mutation.CompanyCleared() {
		_spec.ClearField(user.FieldCompany, field.TypeString)
	}
	if value, ok := uu.mutation.Blog(); ok {
		_spec.SetField(user.FieldBlog, field.TypeString, value)
	}
	if uu.mutation.BlogCleared() {
		_spec.ClearField(user.FieldBlog, field.TypeString)
	}
	if value, ok := uu.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uu.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Hireable(); ok {
		_spec.SetField(user.FieldHireable, field.TypeBool, value)
	}
	if uu.mutation.HireableCleared() {
		_spec.ClearField(user.FieldHireable, field.TypeBool)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uu.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uu.mutation.PublicRepos(); ok {
		_spec.SetField(user.FieldPublicRepos, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedPublicRepos(); ok {
		_spec.AddField(user.FieldPublicRepos, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.PublicGists(); ok {
		_spec.SetField(user.FieldPublicGists, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedPublicGists(); ok {
		_spec.AddField(user.FieldPublicGists, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Followers(); ok {
		_spec.SetField(user.FieldFollowers, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedFollowers(); ok {
		_spec.AddField(user.FieldFollowers, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Following(); ok {
		_spec.SetField(user.FieldFollowing, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedFollowing(); ok {
		_spec.AddField(user.FieldFollowing, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !uu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IssuesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIssuesCreatedIDs(); len(nodes) > 0 && !uu.mutation.IssuesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IssuesCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IssuesClosedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIssuesClosedIDs(); len(nodes) > 0 && !uu.mutation.IssuesClosedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IssuesClosedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPrsCreatedIDs(); len(nodes) > 0 && !uu.mutation.PrsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommentsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommentsCreatedIDs(); len(nodes) > 0 && !uu.mutation.CommentsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommentsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IssuesAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIssuesAssignedIDs(); len(nodes) > 0 && !uu.mutation.IssuesAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IssuesAssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrsAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPrsAssignedIDs(); len(nodes) > 0 && !uu.mutation.PrsAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrsAssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrsReviewRequestedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPrsReviewRequestedIDs(); len(nodes) > 0 && !uu.mutation.PrsReviewRequestedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrsReviewRequestedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TimelineEventsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTimelineEventsCreatedIDs(); len(nodes) > 0 && !uu.mutation.TimelineEventsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TimelineEventsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetLogin sets the "login" field.
func (uuo *UserUpdateOne) SetLogin(s string) *UserUpdateOne {
	uuo.mutation.SetLogin(s)
	return uuo
}

// SetNillableLogin sets the "login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLogin(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLogin(*s)
	}
	return uuo
}

// SetNodeID sets the "node_id" field.
func (uuo *UserUpdateOne) SetNodeID(s string) *UserUpdateOne {
	uuo.mutation.SetNodeID(s)
	return uuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNodeID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNodeID(*s)
	}
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// SetGravatarID sets the "gravatar_id" field.
func (uuo *UserUpdateOne) SetGravatarID(s string) *UserUpdateOne {
	uuo.mutation.SetGravatarID(s)
	return uuo
}

// SetNillableGravatarID sets the "gravatar_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGravatarID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGravatarID(*s)
	}
	return uuo
}

// ClearGravatarID clears the value of the "gravatar_id" field.
func (uuo *UserUpdateOne) ClearGravatarID() *UserUpdateOne {
	uuo.mutation.ClearGravatarID()
	return uuo
}

// SetURL sets the "url" field.
func (uuo *UserUpdateOne) SetURL(s string) *UserUpdateOne {
	uuo.mutation.SetURL(s)
	return uuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetURL(*s)
	}
	return uuo
}

// SetHTMLURL sets the "html_url" field.
func (uuo *UserUpdateOne) SetHTMLURL(s string) *UserUpdateOne {
	uuo.mutation.SetHTMLURL(s)
	return uuo
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHTMLURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHTMLURL(*s)
	}
	return uuo
}

// SetFollowersURL sets the "followers_url" field.
func (uuo *UserUpdateOne) SetFollowersURL(s string) *UserUpdateOne {
	uuo.mutation.SetFollowersURL(s)
	return uuo
}

// SetNillableFollowersURL sets the "followers_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowersURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFollowersURL(*s)
	}
	return uuo
}

// SetFollowingURL sets the "following_url" field.
func (uuo *UserUpdateOne) SetFollowingURL(s string) *UserUpdateOne {
	uuo.mutation.SetFollowingURL(s)
	return uuo
}

// SetNillableFollowingURL sets the "following_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowingURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFollowingURL(*s)
	}
	return uuo
}

// SetGistsURL sets the "gists_url" field.
func (uuo *UserUpdateOne) SetGistsURL(s string) *UserUpdateOne {
	uuo.mutation.SetGistsURL(s)
	return uuo
}

// SetNillableGistsURL sets the "gists_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGistsURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGistsURL(*s)
	}
	return uuo
}

// SetStarredURL sets the "starred_url" field.
func (uuo *UserUpdateOne) SetStarredURL(s string) *UserUpdateOne {
	uuo.mutation.SetStarredURL(s)
	return uuo
}

// SetNillableStarredURL sets the "starred_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStarredURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStarredURL(*s)
	}
	return uuo
}

// SetSubscriptionsURL sets the "subscriptions_url" field.
func (uuo *UserUpdateOne) SetSubscriptionsURL(s string) *UserUpdateOne {
	uuo.mutation.SetSubscriptionsURL(s)
	return uuo
}

// SetNillableSubscriptionsURL sets the "subscriptions_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSubscriptionsURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSubscriptionsURL(*s)
	}
	return uuo
}

// SetOrganizationsURL sets the "organizations_url" field.
func (uuo *UserUpdateOne) SetOrganizationsURL(s string) *UserUpdateOne {
	uuo.mutation.SetOrganizationsURL(s)
	return uuo
}

// SetNillableOrganizationsURL sets the "organizations_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrganizationsURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOrganizationsURL(*s)
	}
	return uuo
}

// SetReposURL sets the "repos_url" field.
func (uuo *UserUpdateOne) SetReposURL(s string) *UserUpdateOne {
	uuo.mutation.SetReposURL(s)
	return uuo
}

// SetNillableReposURL sets the "repos_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableReposURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetReposURL(*s)
	}
	return uuo
}

// SetEventsURL sets the "events_url" field.
func (uuo *UserUpdateOne) SetEventsURL(s string) *UserUpdateOne {
	uuo.mutation.SetEventsURL(s)
	return uuo
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEventsURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEventsURL(*s)
	}
	return uuo
}

// SetReceivedEventsURL sets the "received_events_url" field.
func (uuo *UserUpdateOne) SetReceivedEventsURL(s string) *UserUpdateOne {
	uuo.mutation.SetReceivedEventsURL(s)
	return uuo
}

// SetNillableReceivedEventsURL sets the "received_events_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableReceivedEventsURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetReceivedEventsURL(*s)
	}
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(s string) *UserUpdateOne {
	uuo.mutation.SetType(s)
	return uuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetType(*s)
	}
	return uuo
}

// SetSiteAdmin sets the "site_admin" field.
func (uuo *UserUpdateOne) SetSiteAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetSiteAdmin(b)
	return uuo
}

// SetNillableSiteAdmin sets the "site_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSiteAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetSiteAdmin(*b)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetCompany sets the "company" field.
func (uuo *UserUpdateOne) SetCompany(s string) *UserUpdateOne {
	uuo.mutation.SetCompany(s)
	return uuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCompany(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCompany(*s)
	}
	return uuo
}

// ClearCompany clears the value of the "company" field.
func (uuo *UserUpdateOne) ClearCompany() *UserUpdateOne {
	uuo.mutation.ClearCompany()
	return uuo
}

// SetBlog sets the "blog" field.
func (uuo *UserUpdateOne) SetBlog(s string) *UserUpdateOne {
	uuo.mutation.SetBlog(s)
	return uuo
}

// SetNillableBlog sets the "blog" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBlog(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBlog(*s)
	}
	return uuo
}

// ClearBlog clears the value of the "blog" field.
func (uuo *UserUpdateOne) ClearBlog() *UserUpdateOne {
	uuo.mutation.ClearBlog()
	return uuo
}

// SetLocation sets the "location" field.
func (uuo *UserUpdateOne) SetLocation(s string) *UserUpdateOne {
	uuo.mutation.SetLocation(s)
	return uuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocation(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocation(*s)
	}
	return uuo
}

// ClearLocation clears the value of the "location" field.
func (uuo *UserUpdateOne) ClearLocation() *UserUpdateOne {
	uuo.mutation.ClearLocation()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetHireable sets the "hireable" field.
func (uuo *UserUpdateOne) SetHireable(b bool) *UserUpdateOne {
	uuo.mutation.SetHireable(b)
	return uuo
}

// SetNillableHireable sets the "hireable" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHireable(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetHireable(*b)
	}
	return uuo
}

// ClearHireable clears the value of the "hireable" field.
func (uuo *UserUpdateOne) ClearHireable() *UserUpdateOne {
	uuo.mutation.ClearHireable()
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// ClearBio clears the value of the "bio" field.
func (uuo *UserUpdateOne) ClearBio() *UserUpdateOne {
	uuo.mutation.ClearBio()
	return uuo
}

// SetPublicRepos sets the "public_repos" field.
func (uuo *UserUpdateOne) SetPublicRepos(i int64) *UserUpdateOne {
	uuo.mutation.ResetPublicRepos()
	uuo.mutation.SetPublicRepos(i)
	return uuo
}

// SetNillablePublicRepos sets the "public_repos" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicRepos(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetPublicRepos(*i)
	}
	return uuo
}

// AddPublicRepos adds i to the "public_repos" field.
func (uuo *UserUpdateOne) AddPublicRepos(i int64) *UserUpdateOne {
	uuo.mutation.AddPublicRepos(i)
	return uuo
}

// SetPublicGists sets the "public_gists" field.
func (uuo *UserUpdateOne) SetPublicGists(i int64) *UserUpdateOne {
	uuo.mutation.ResetPublicGists()
	uuo.mutation.SetPublicGists(i)
	return uuo
}

// SetNillablePublicGists sets the "public_gists" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicGists(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetPublicGists(*i)
	}
	return uuo
}

// AddPublicGists adds i to the "public_gists" field.
func (uuo *UserUpdateOne) AddPublicGists(i int64) *UserUpdateOne {
	uuo.mutation.AddPublicGists(i)
	return uuo
}

// SetFollowers sets the "followers" field.
func (uuo *UserUpdateOne) SetFollowers(i int64) *UserUpdateOne {
	uuo.mutation.ResetFollowers()
	uuo.mutation.SetFollowers(i)
	return uuo
}

// SetNillableFollowers sets the "followers" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowers(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetFollowers(*i)
	}
	return uuo
}

// AddFollowers adds i to the "followers" field.
func (uuo *UserUpdateOne) AddFollowers(i int64) *UserUpdateOne {
	uuo.mutation.AddFollowers(i)
	return uuo
}

// SetFollowing sets the "following" field.
func (uuo *UserUpdateOne) SetFollowing(i int64) *UserUpdateOne {
	uuo.mutation.ResetFollowing()
	uuo.mutation.SetFollowing(i)
	return uuo
}

// SetNillableFollowing sets the "following" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowing(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetFollowing(*i)
	}
	return uuo
}

// AddFollowing adds i to the "following" field.
func (uuo *UserUpdateOne) AddFollowing(i int64) *UserUpdateOne {
	uuo.mutation.AddFollowing(i)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uuo *UserUpdateOne) AddRepositoryIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddRepositoryIDs(ids...)
	return uuo
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uuo *UserUpdateOne) AddRepositories(r ...*Repository) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRepositoryIDs(ids...)
}

// AddIssuesCreatedIDs adds the "issues_created" edge to the Issue entity by IDs.
func (uuo *UserUpdateOne) AddIssuesCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddIssuesCreatedIDs(ids...)
	return uuo
}

// AddIssuesCreated adds the "issues_created" edges to the Issue entity.
func (uuo *UserUpdateOne) AddIssuesCreated(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIssuesCreatedIDs(ids...)
}

// AddIssuesClosedIDs adds the "issues_closed" edge to the Issue entity by IDs.
func (uuo *UserUpdateOne) AddIssuesClosedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddIssuesClosedIDs(ids...)
	return uuo
}

// AddIssuesClosed adds the "issues_closed" edges to the Issue entity.
func (uuo *UserUpdateOne) AddIssuesClosed(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIssuesClosedIDs(ids...)
}

// AddPrsCreatedIDs adds the "prs_created" edge to the PullRequest entity by IDs.
func (uuo *UserUpdateOne) AddPrsCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddPrsCreatedIDs(ids...)
	return uuo
}

// AddPrsCreated adds the "prs_created" edges to the PullRequest entity.
func (uuo *UserUpdateOne) AddPrsCreated(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPrsCreatedIDs(ids...)
}

// AddCommentsCreatedIDs adds the "comments_created" edge to the IssueComment entity by IDs.
func (uuo *UserUpdateOne) AddCommentsCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddCommentsCreatedIDs(ids...)
	return uuo
}

// AddCommentsCreated adds the "comments_created" edges to the IssueComment entity.
func (uuo *UserUpdateOne) AddCommentsCreated(i ...*IssueComment) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddCommentsCreatedIDs(ids...)
}

// AddIssuesAssignedIDs adds the "issues_assigned" edge to the Issue entity by IDs.
func (uuo *UserUpdateOne) AddIssuesAssignedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddIssuesAssignedIDs(ids...)
	return uuo
}

// AddIssuesAssigned adds the "issues_assigned" edges to the Issue entity.
func (uuo *UserUpdateOne) AddIssuesAssigned(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIssuesAssignedIDs(ids...)
}

// AddPrsAssignedIDs adds the "prs_assigned" edge to the PullRequest entity by IDs.
func (uuo *UserUpdateOne) AddPrsAssignedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddPrsAssignedIDs(ids...)
	return uuo
}

// AddPrsAssigned adds the "prs_assigned" edges to the PullRequest entity.
func (uuo *UserUpdateOne) AddPrsAssigned(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPrsAssignedIDs(ids...)
}

// AddPrsReviewRequestedIDs adds the "prs_review_requested" edge to the PullRequest entity by IDs.
func (uuo *UserUpdateOne) AddPrsReviewRequestedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddPrsReviewRequestedIDs(ids...)
	return uuo
}

// AddPrsReviewRequested adds the "prs_review_requested" edges to the PullRequest entity.
func (uuo *UserUpdateOne) AddPrsReviewRequested(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPrsReviewRequestedIDs(ids...)
}

// AddTimelineEventsCreatedIDs adds the "timeline_events_created" edge to the TimelineEvent entity by IDs.
func (uuo *UserUpdateOne) AddTimelineEventsCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTimelineEventsCreatedIDs(ids...)
	return uuo
}

// AddTimelineEventsCreated adds the "timeline_events_created" edges to the TimelineEvent entity.
func (uuo *UserUpdateOne) AddTimelineEventsCreated(t ...*TimelineEvent) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTimelineEventsCreatedIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (uuo *UserUpdateOne) ClearRepositories() *UserUpdateOne {
	uuo.mutation.ClearRepositories()
	return uuo
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (uuo *UserUpdateOne) RemoveRepositoryIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveRepositoryIDs(ids...)
	return uuo
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (uuo *UserUpdateOne) RemoveRepositories(r ...*Repository) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRepositoryIDs(ids...)
}

// ClearIssuesCreated clears all "issues_created" edges to the Issue entity.
func (uuo *UserUpdateOne) ClearIssuesCreated() *UserUpdateOne {
	uuo.mutation.ClearIssuesCreated()
	return uuo
}

// RemoveIssuesCreatedIDs removes the "issues_created" edge to Issue entities by IDs.
func (uuo *UserUpdateOne) RemoveIssuesCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveIssuesCreatedIDs(ids...)
	return uuo
}

// RemoveIssuesCreated removes "issues_created" edges to Issue entities.
func (uuo *UserUpdateOne) RemoveIssuesCreated(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIssuesCreatedIDs(ids...)
}

// ClearIssuesClosed clears all "issues_closed" edges to the Issue entity.
func (uuo *UserUpdateOne) ClearIssuesClosed() *UserUpdateOne {
	uuo.mutation.ClearIssuesClosed()
	return uuo
}

// RemoveIssuesClosedIDs removes the "issues_closed" edge to Issue entities by IDs.
func (uuo *UserUpdateOne) RemoveIssuesClosedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveIssuesClosedIDs(ids...)
	return uuo
}

// RemoveIssuesClosed removes "issues_closed" edges to Issue entities.
func (uuo *UserUpdateOne) RemoveIssuesClosed(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIssuesClosedIDs(ids...)
}

// ClearPrsCreated clears all "prs_created" edges to the PullRequest entity.
func (uuo *UserUpdateOne) ClearPrsCreated() *UserUpdateOne {
	uuo.mutation.ClearPrsCreated()
	return uuo
}

// RemovePrsCreatedIDs removes the "prs_created" edge to PullRequest entities by IDs.
func (uuo *UserUpdateOne) RemovePrsCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemovePrsCreatedIDs(ids...)
	return uuo
}

// RemovePrsCreated removes "prs_created" edges to PullRequest entities.
func (uuo *UserUpdateOne) RemovePrsCreated(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePrsCreatedIDs(ids...)
}

// ClearCommentsCreated clears all "comments_created" edges to the IssueComment entity.
func (uuo *UserUpdateOne) ClearCommentsCreated() *UserUpdateOne {
	uuo.mutation.ClearCommentsCreated()
	return uuo
}

// RemoveCommentsCreatedIDs removes the "comments_created" edge to IssueComment entities by IDs.
func (uuo *UserUpdateOne) RemoveCommentsCreatedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveCommentsCreatedIDs(ids...)
	return uuo
}

// RemoveCommentsCreated removes "comments_created" edges to IssueComment entities.
func (uuo *UserUpdateOne) RemoveCommentsCreated(i ...*IssueComment) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveCommentsCreatedIDs(ids...)
}

// ClearIssuesAssigned clears all "issues_assigned" edges to the Issue entity.
func (uuo *UserUpdateOne) ClearIssuesAssigned() *UserUpdateOne {
	uuo.mutation.ClearIssuesAssigned()
	return uuo
}

// RemoveIssuesAssignedIDs removes the "issues_assigned" edge to Issue entities by IDs.
func (uuo *UserUpdateOne) RemoveIssuesAssignedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveIssuesAssignedIDs(ids...)
	return uuo
}

// RemoveIssuesAssigned removes "issues_assigned" edges to Issue entities.
func (uuo *UserUpdateOne) RemoveIssuesAssigned(i ...*Issue) *UserUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIssuesAssignedIDs(ids...)
}

// ClearPrsAssigned clears all "prs_assigned" edges to the PullRequest entity.
func (uuo *UserUpdateOne) ClearPrsAssigned() *UserUpdateOne {
	uuo.mutation.ClearPrsAssigned()
	return uuo
}

// RemovePrsAssignedIDs removes the "prs_assigned" edge to PullRequest entities by IDs.
func (uuo *UserUpdateOne) RemovePrsAssignedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemovePrsAssignedIDs(ids...)
	return uuo
}

// RemovePrsAssigned removes "prs_assigned" edges to PullRequest entities.
func (uuo *UserUpdateOne) RemovePrsAssigned(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePrsAssignedIDs(ids...)
}

// ClearPrsReviewRequested clears all "prs_review_requested" edges to the PullRequest entity.
func (uuo *UserUpdateOne) ClearPrsReviewRequested() *UserUpdateOne {
	uuo.mutation.ClearPrsReviewRequested()
	return uuo
}

// RemovePrsReviewRequestedIDs removes the "prs_review_requested" edge to PullRequest entities by IDs.
func (uuo *UserUpdateOne) RemovePrsReviewRequestedIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemovePrsReviewRequestedIDs(ids...)
	return uuo
}

// RemovePrsReviewRequested removes "prs_review_requested" edges to PullRequest entities.
func (uuo *UserUpdateOne) RemovePrsReviewRequested(p ...*PullRequest) *UserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePrsReviewRequestedIDs(ids...)
}

// ClearTimelineEventsCreated clears all "timeline_events_created" edges to the TimelineEvent entity.
func (uuo *UserUpdateOne) ClearTimelineEventsCreated() *UserUpdateOne {
	uuo.mutation.ClearTimelineEventsCreated()
	return uuo
}

// RemoveTimelineEventsCreatedIDs removes the "timeline_events_created" edge to TimelineEvent entities by IDs.
func (uuo *UserUpdateOne) RemoveTimelineEventsCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTimelineEventsCreatedIDs(ids...)
	return uuo
}

// RemoveTimelineEventsCreated removes "timeline_events_created" edges to TimelineEvent entities.
func (uuo *UserUpdateOne) RemoveTimelineEventsCreated(t ...*TimelineEvent) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTimelineEventsCreatedIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NodeID(); ok {
		_spec.SetField(user.FieldNodeID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GravatarID(); ok {
		_spec.SetField(user.FieldGravatarID, field.TypeString, value)
	}
	if uuo.mutation.GravatarIDCleared() {
		_spec.ClearField(user.FieldGravatarID, field.TypeString)
	}
	if value, ok := uuo.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.HTMLURL(); ok {
		_spec.SetField(user.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FollowersURL(); ok {
		_spec.SetField(user.FieldFollowersURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FollowingURL(); ok {
		_spec.SetField(user.FieldFollowingURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GistsURL(); ok {
		_spec.SetField(user.FieldGistsURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.StarredURL(); ok {
		_spec.SetField(user.FieldStarredURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SubscriptionsURL(); ok {
		_spec.SetField(user.FieldSubscriptionsURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OrganizationsURL(); ok {
		_spec.SetField(user.FieldOrganizationsURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ReposURL(); ok {
		_spec.SetField(user.FieldReposURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EventsURL(); ok {
		_spec.SetField(user.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ReceivedEventsURL(); ok {
		_spec.SetField(user.FieldReceivedEventsURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SiteAdmin(); ok {
		_spec.SetField(user.FieldSiteAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
	}
	if uuo.mutation.CompanyCleared() {
		_spec.ClearField(user.FieldCompany, field.TypeString)
	}
	if value, ok := uuo.mutation.Blog(); ok {
		_spec.SetField(user.FieldBlog, field.TypeString, value)
	}
	if uuo.mutation.BlogCleared() {
		_spec.ClearField(user.FieldBlog, field.TypeString)
	}
	if value, ok := uuo.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uuo.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Hireable(); ok {
		_spec.SetField(user.FieldHireable, field.TypeBool, value)
	}
	if uuo.mutation.HireableCleared() {
		_spec.ClearField(user.FieldHireable, field.TypeBool)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uuo.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uuo.mutation.PublicRepos(); ok {
		_spec.SetField(user.FieldPublicRepos, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedPublicRepos(); ok {
		_spec.AddField(user.FieldPublicRepos, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.PublicGists(); ok {
		_spec.SetField(user.FieldPublicGists, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedPublicGists(); ok {
		_spec.AddField(user.FieldPublicGists, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Followers(); ok {
		_spec.SetField(user.FieldFollowers, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedFollowers(); ok {
		_spec.AddField(user.FieldFollowers, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Following(); ok {
		_spec.SetField(user.FieldFollowing, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedFollowing(); ok {
		_spec.AddField(user.FieldFollowing, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !uuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IssuesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIssuesCreatedIDs(); len(nodes) > 0 && !uuo.mutation.IssuesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IssuesCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesCreatedTable,
			Columns: []string{user.IssuesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IssuesClosedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIssuesClosedIDs(); len(nodes) > 0 && !uuo.mutation.IssuesClosedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IssuesClosedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IssuesClosedTable,
			Columns: []string{user.IssuesClosedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPrsCreatedIDs(); len(nodes) > 0 && !uuo.mutation.PrsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrsCreatedTable,
			Columns: []string{user.PrsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommentsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommentsCreatedIDs(); len(nodes) > 0 && !uuo.mutation.CommentsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommentsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsCreatedTable,
			Columns: []string{user.CommentsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IssuesAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIssuesAssignedIDs(); len(nodes) > 0 && !uuo.mutation.IssuesAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IssuesAssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.IssuesAssignedTable,
			Columns: user.IssuesAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrsAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPrsAssignedIDs(); len(nodes) > 0 && !uuo.mutation.PrsAssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrsAssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsAssignedTable,
			Columns: user.PrsAssignedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrsReviewRequestedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPrsReviewRequestedIDs(); len(nodes) > 0 && !uuo.mutation.PrsReviewRequestedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrsReviewRequestedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PrsReviewRequestedTable,
			Columns: user.PrsReviewRequestedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TimelineEventsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTimelineEventsCreatedIDs(); len(nodes) > 0 && !uuo.mutation.TimelineEventsCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TimelineEventsCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TimelineEventsCreatedTable,
			Columns: []string{user.TimelineEventsCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
