// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnolang/gh-sql/ent/issue"
	"github.com/gnolang/gh-sql/ent/issuecomment"
	"github.com/gnolang/gh-sql/ent/predicate"
	"github.com/gnolang/gh-sql/ent/pullrequest"
	"github.com/gnolang/gh-sql/ent/repository"
	"github.com/gnolang/gh-sql/ent/timelineevent"
	"github.com/gnolang/gh-sql/ent/user"
	"github.com/gnolang/gh-sql/pkg/model"
)

// IssueUpdate is the builder for updating Issue entities.
type IssueUpdate struct {
	config
	hooks    []Hook
	mutation *IssueMutation
}

// Where appends a list predicates to the IssueUpdate builder.
func (iu *IssueUpdate) Where(ps ...predicate.Issue) *IssueUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetNodeID sets the "node_id" field.
func (iu *IssueUpdate) SetNodeID(s string) *IssueUpdate {
	iu.mutation.SetNodeID(s)
	return iu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableNodeID(s *string) *IssueUpdate {
	if s != nil {
		iu.SetNodeID(*s)
	}
	return iu
}

// SetURL sets the "url" field.
func (iu *IssueUpdate) SetURL(s string) *IssueUpdate {
	iu.mutation.SetURL(s)
	return iu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetURL(*s)
	}
	return iu
}

// SetRepositoryURL sets the "repository_url" field.
func (iu *IssueUpdate) SetRepositoryURL(s string) *IssueUpdate {
	iu.mutation.SetRepositoryURL(s)
	return iu
}

// SetNillableRepositoryURL sets the "repository_url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableRepositoryURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetRepositoryURL(*s)
	}
	return iu
}

// SetLabelsURL sets the "labels_url" field.
func (iu *IssueUpdate) SetLabelsURL(s string) *IssueUpdate {
	iu.mutation.SetLabelsURL(s)
	return iu
}

// SetNillableLabelsURL sets the "labels_url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableLabelsURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetLabelsURL(*s)
	}
	return iu
}

// SetCommentsURL sets the "comments_url" field.
func (iu *IssueUpdate) SetCommentsURL(s string) *IssueUpdate {
	iu.mutation.SetCommentsURL(s)
	return iu
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCommentsURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetCommentsURL(*s)
	}
	return iu
}

// SetEventsURL sets the "events_url" field.
func (iu *IssueUpdate) SetEventsURL(s string) *IssueUpdate {
	iu.mutation.SetEventsURL(s)
	return iu
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableEventsURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetEventsURL(*s)
	}
	return iu
}

// SetHTMLURL sets the "html_url" field.
func (iu *IssueUpdate) SetHTMLURL(s string) *IssueUpdate {
	iu.mutation.SetHTMLURL(s)
	return iu
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableHTMLURL(s *string) *IssueUpdate {
	if s != nil {
		iu.SetHTMLURL(*s)
	}
	return iu
}

// SetNumber sets the "number" field.
func (iu *IssueUpdate) SetNumber(i int64) *IssueUpdate {
	iu.mutation.ResetNumber()
	iu.mutation.SetNumber(i)
	return iu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableNumber(i *int64) *IssueUpdate {
	if i != nil {
		iu.SetNumber(*i)
	}
	return iu
}

// AddNumber adds i to the "number" field.
func (iu *IssueUpdate) AddNumber(i int64) *IssueUpdate {
	iu.mutation.AddNumber(i)
	return iu
}

// SetState sets the "state" field.
func (iu *IssueUpdate) SetState(s string) *IssueUpdate {
	iu.mutation.SetState(s)
	return iu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableState(s *string) *IssueUpdate {
	if s != nil {
		iu.SetState(*s)
	}
	return iu
}

// SetStateReason sets the "state_reason" field.
func (iu *IssueUpdate) SetStateReason(mr model.StateReason) *IssueUpdate {
	iu.mutation.SetStateReason(mr)
	return iu
}

// SetNillableStateReason sets the "state_reason" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableStateReason(mr *model.StateReason) *IssueUpdate {
	if mr != nil {
		iu.SetStateReason(*mr)
	}
	return iu
}

// ClearStateReason clears the value of the "state_reason" field.
func (iu *IssueUpdate) ClearStateReason() *IssueUpdate {
	iu.mutation.ClearStateReason()
	return iu
}

// SetTitle sets the "title" field.
func (iu *IssueUpdate) SetTitle(s string) *IssueUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableTitle(s *string) *IssueUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetBody sets the "body" field.
func (iu *IssueUpdate) SetBody(s string) *IssueUpdate {
	iu.mutation.SetBody(s)
	return iu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableBody(s *string) *IssueUpdate {
	if s != nil {
		iu.SetBody(*s)
	}
	return iu
}

// ClearBody clears the value of the "body" field.
func (iu *IssueUpdate) ClearBody() *IssueUpdate {
	iu.mutation.ClearBody()
	return iu
}

// SetLocked sets the "locked" field.
func (iu *IssueUpdate) SetLocked(b bool) *IssueUpdate {
	iu.mutation.SetLocked(b)
	return iu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableLocked(b *bool) *IssueUpdate {
	if b != nil {
		iu.SetLocked(*b)
	}
	return iu
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (iu *IssueUpdate) SetActiveLockReason(s string) *IssueUpdate {
	iu.mutation.SetActiveLockReason(s)
	return iu
}

// SetNillableActiveLockReason sets the "active_lock_reason" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableActiveLockReason(s *string) *IssueUpdate {
	if s != nil {
		iu.SetActiveLockReason(*s)
	}
	return iu
}

// ClearActiveLockReason clears the value of the "active_lock_reason" field.
func (iu *IssueUpdate) ClearActiveLockReason() *IssueUpdate {
	iu.mutation.ClearActiveLockReason()
	return iu
}

// SetCommentsCount sets the "comments_count" field.
func (iu *IssueUpdate) SetCommentsCount(i int64) *IssueUpdate {
	iu.mutation.ResetCommentsCount()
	iu.mutation.SetCommentsCount(i)
	return iu
}

// SetNillableCommentsCount sets the "comments_count" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCommentsCount(i *int64) *IssueUpdate {
	if i != nil {
		iu.SetCommentsCount(*i)
	}
	return iu
}

// AddCommentsCount adds i to the "comments_count" field.
func (iu *IssueUpdate) AddCommentsCount(i int64) *IssueUpdate {
	iu.mutation.AddCommentsCount(i)
	return iu
}

// SetClosedAt sets the "closed_at" field.
func (iu *IssueUpdate) SetClosedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetClosedAt(t)
	return iu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableClosedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetClosedAt(*t)
	}
	return iu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iu *IssueUpdate) ClearClosedAt() *IssueUpdate {
	iu.mutation.ClearClosedAt()
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IssueUpdate) SetCreatedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCreatedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IssueUpdate) SetUpdatedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableUpdatedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetDraft sets the "draft" field.
func (iu *IssueUpdate) SetDraft(b bool) *IssueUpdate {
	iu.mutation.SetDraft(b)
	return iu
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableDraft(b *bool) *IssueUpdate {
	if b != nil {
		iu.SetDraft(*b)
	}
	return iu
}

// SetAuthorAssociation sets the "author_association" field.
func (iu *IssueUpdate) SetAuthorAssociation(ma model.AuthorAssociation) *IssueUpdate {
	iu.mutation.SetAuthorAssociation(ma)
	return iu
}

// SetNillableAuthorAssociation sets the "author_association" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableAuthorAssociation(ma *model.AuthorAssociation) *IssueUpdate {
	if ma != nil {
		iu.SetAuthorAssociation(*ma)
	}
	return iu
}

// SetReactions sets the "reactions" field.
func (iu *IssueUpdate) SetReactions(mr model.ReactionRollup) *IssueUpdate {
	iu.mutation.SetReactions(mr)
	return iu
}

// SetNillableReactions sets the "reactions" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableReactions(mr *model.ReactionRollup) *IssueUpdate {
	if mr != nil {
		iu.SetReactions(*mr)
	}
	return iu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (iu *IssueUpdate) SetRepositoryID(id int64) *IssueUpdate {
	iu.mutation.SetRepositoryID(id)
	return iu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (iu *IssueUpdate) SetRepository(r *Repository) *IssueUpdate {
	return iu.SetRepositoryID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *IssueUpdate) SetUserID(id int64) *IssueUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iu *IssueUpdate) SetNillableUserID(id *int64) *IssueUpdate {
	if id != nil {
		iu = iu.SetUserID(*id)
	}
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *IssueUpdate) SetUser(u *User) *IssueUpdate {
	return iu.SetUserID(u.ID)
}

// SetClosedByID sets the "closed_by" edge to the User entity by ID.
func (iu *IssueUpdate) SetClosedByID(id int64) *IssueUpdate {
	iu.mutation.SetClosedByID(id)
	return iu
}

// SetNillableClosedByID sets the "closed_by" edge to the User entity by ID if the given value is not nil.
func (iu *IssueUpdate) SetNillableClosedByID(id *int64) *IssueUpdate {
	if id != nil {
		iu = iu.SetClosedByID(*id)
	}
	return iu
}

// SetClosedBy sets the "closed_by" edge to the User entity.
func (iu *IssueUpdate) SetClosedBy(u *User) *IssueUpdate {
	return iu.SetClosedByID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (iu *IssueUpdate) AddAssigneeIDs(ids ...int64) *IssueUpdate {
	iu.mutation.AddAssigneeIDs(ids...)
	return iu
}

// AddAssignees adds the "assignees" edges to the User entity.
func (iu *IssueUpdate) AddAssignees(u ...*User) *IssueUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.AddAssigneeIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the IssueComment entity by IDs.
func (iu *IssueUpdate) AddCommentIDs(ids ...int64) *IssueUpdate {
	iu.mutation.AddCommentIDs(ids...)
	return iu
}

// AddComments adds the "comments" edges to the IssueComment entity.
func (iu *IssueUpdate) AddComments(i ...*IssueComment) *IssueUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddCommentIDs(ids...)
}

// AddTimelineIDs adds the "timeline" edge to the TimelineEvent entity by IDs.
func (iu *IssueUpdate) AddTimelineIDs(ids ...string) *IssueUpdate {
	iu.mutation.AddTimelineIDs(ids...)
	return iu
}

// AddTimeline adds the "timeline" edges to the TimelineEvent entity.
func (iu *IssueUpdate) AddTimeline(t ...*TimelineEvent) *IssueUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTimelineIDs(ids...)
}

// SetPullRequestID sets the "pull_request" edge to the PullRequest entity by ID.
func (iu *IssueUpdate) SetPullRequestID(id int64) *IssueUpdate {
	iu.mutation.SetPullRequestID(id)
	return iu
}

// SetNillablePullRequestID sets the "pull_request" edge to the PullRequest entity by ID if the given value is not nil.
func (iu *IssueUpdate) SetNillablePullRequestID(id *int64) *IssueUpdate {
	if id != nil {
		iu = iu.SetPullRequestID(*id)
	}
	return iu
}

// SetPullRequest sets the "pull_request" edge to the PullRequest entity.
func (iu *IssueUpdate) SetPullRequest(p *PullRequest) *IssueUpdate {
	return iu.SetPullRequestID(p.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (iu *IssueUpdate) Mutation() *IssueMutation {
	return iu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (iu *IssueUpdate) ClearRepository() *IssueUpdate {
	iu.mutation.ClearRepository()
	return iu
}

// ClearUser clears the "user" edge to the User entity.
func (iu *IssueUpdate) ClearUser() *IssueUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearClosedBy clears the "closed_by" edge to the User entity.
func (iu *IssueUpdate) ClearClosedBy() *IssueUpdate {
	iu.mutation.ClearClosedBy()
	return iu
}

// ClearAssignees clears all "assignees" edges to the User entity.
func (iu *IssueUpdate) ClearAssignees() *IssueUpdate {
	iu.mutation.ClearAssignees()
	return iu
}

// RemoveAssigneeIDs removes the "assignees" edge to User entities by IDs.
func (iu *IssueUpdate) RemoveAssigneeIDs(ids ...int64) *IssueUpdate {
	iu.mutation.RemoveAssigneeIDs(ids...)
	return iu
}

// RemoveAssignees removes "assignees" edges to User entities.
func (iu *IssueUpdate) RemoveAssignees(u ...*User) *IssueUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.RemoveAssigneeIDs(ids...)
}

// ClearComments clears all "comments" edges to the IssueComment entity.
func (iu *IssueUpdate) ClearComments() *IssueUpdate {
	iu.mutation.ClearComments()
	return iu
}

// RemoveCommentIDs removes the "comments" edge to IssueComment entities by IDs.
func (iu *IssueUpdate) RemoveCommentIDs(ids ...int64) *IssueUpdate {
	iu.mutation.RemoveCommentIDs(ids...)
	return iu
}

// RemoveComments removes "comments" edges to IssueComment entities.
func (iu *IssueUpdate) RemoveComments(i ...*IssueComment) *IssueUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveCommentIDs(ids...)
}

// ClearTimeline clears all "timeline" edges to the TimelineEvent entity.
func (iu *IssueUpdate) ClearTimeline() *IssueUpdate {
	iu.mutation.ClearTimeline()
	return iu
}

// RemoveTimelineIDs removes the "timeline" edge to TimelineEvent entities by IDs.
func (iu *IssueUpdate) RemoveTimelineIDs(ids ...string) *IssueUpdate {
	iu.mutation.RemoveTimelineIDs(ids...)
	return iu
}

// RemoveTimeline removes "timeline" edges to TimelineEvent entities.
func (iu *IssueUpdate) RemoveTimeline(t ...*TimelineEvent) *IssueUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTimelineIDs(ids...)
}

// ClearPullRequest clears the "pull_request" edge to the PullRequest entity.
func (iu *IssueUpdate) ClearPullRequest() *IssueUpdate {
	iu.mutation.ClearPullRequest()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IssueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IssueUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IssueUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IssueUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IssueUpdate) check() error {
	if v, ok := iu.mutation.StateReason(); ok {
		if err := issue.StateReasonValidator(v); err != nil {
			return &ValidationError{Name: "state_reason", err: fmt.Errorf(`ent: validator failed for field "Issue.state_reason": %w`, err)}
		}
	}
	if v, ok := iu.mutation.AuthorAssociation(); ok {
		if err := issue.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "Issue.author_association": %w`, err)}
		}
	}
	if _, ok := iu.mutation.RepositoryID(); iu.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Issue.repository"`)
	}
	return nil
}

func (iu *IssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.NodeID(); ok {
		_spec.SetField(issue.FieldNodeID, field.TypeString, value)
	}
	if value, ok := iu.mutation.URL(); ok {
		_spec.SetField(issue.FieldURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.RepositoryURL(); ok {
		_spec.SetField(issue.FieldRepositoryURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.LabelsURL(); ok {
		_spec.SetField(issue.FieldLabelsURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.CommentsURL(); ok {
		_spec.SetField(issue.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.EventsURL(); ok {
		_spec.SetField(issue.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.HTMLURL(); ok {
		_spec.SetField(issue.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.Number(); ok {
		_spec.SetField(issue.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedNumber(); ok {
		_spec.AddField(issue.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.State(); ok {
		_spec.SetField(issue.FieldState, field.TypeString, value)
	}
	if value, ok := iu.mutation.StateReason(); ok {
		_spec.SetField(issue.FieldStateReason, field.TypeEnum, value)
	}
	if iu.mutation.StateReasonCleared() {
		_spec.ClearField(issue.FieldStateReason, field.TypeEnum)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Body(); ok {
		_spec.SetField(issue.FieldBody, field.TypeString, value)
	}
	if iu.mutation.BodyCleared() {
		_spec.ClearField(issue.FieldBody, field.TypeString)
	}
	if value, ok := iu.mutation.Locked(); ok {
		_spec.SetField(issue.FieldLocked, field.TypeBool, value)
	}
	if value, ok := iu.mutation.ActiveLockReason(); ok {
		_spec.SetField(issue.FieldActiveLockReason, field.TypeString, value)
	}
	if iu.mutation.ActiveLockReasonCleared() {
		_spec.ClearField(issue.FieldActiveLockReason, field.TypeString)
	}
	if value, ok := iu.mutation.CommentsCount(); ok {
		_spec.SetField(issue.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedCommentsCount(); ok {
		_spec.AddField(issue.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.ClosedAt(); ok {
		_spec.SetField(issue.FieldClosedAt, field.TypeTime, value)
	}
	if iu.mutation.ClosedAtCleared() {
		_spec.ClearField(issue.FieldClosedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(issue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(issue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Draft(); ok {
		_spec.SetField(issue.FieldDraft, field.TypeBool, value)
	}
	if value, ok := iu.mutation.AuthorAssociation(); ok {
		_spec.SetField(issue.FieldAuthorAssociation, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Reactions(); ok {
		_spec.SetField(issue.FieldReactions, field.TypeJSON, value)
	}
	if iu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.UserTable,
			Columns: []string{issue.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.UserTable,
			Columns: []string{issue.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ClosedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ClosedByTable,
			Columns: []string{issue.ClosedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ClosedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ClosedByTable,
			Columns: []string{issue.ClosedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedAssigneesIDs(); len(nodes) > 0 && !iu.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTimelineIDs(); len(nodes) > 0 && !iu.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.PullRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issue.PullRequestTable,
			Columns: []string{issue.PullRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PullRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issue.PullRequestTable,
			Columns: []string{issue.PullRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IssueUpdateOne is the builder for updating a single Issue entity.
type IssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueMutation
}

// SetNodeID sets the "node_id" field.
func (iuo *IssueUpdateOne) SetNodeID(s string) *IssueUpdateOne {
	iuo.mutation.SetNodeID(s)
	return iuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableNodeID(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetNodeID(*s)
	}
	return iuo
}

// SetURL sets the "url" field.
func (iuo *IssueUpdateOne) SetURL(s string) *IssueUpdateOne {
	iuo.mutation.SetURL(s)
	return iuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetURL(*s)
	}
	return iuo
}

// SetRepositoryURL sets the "repository_url" field.
func (iuo *IssueUpdateOne) SetRepositoryURL(s string) *IssueUpdateOne {
	iuo.mutation.SetRepositoryURL(s)
	return iuo
}

// SetNillableRepositoryURL sets the "repository_url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableRepositoryURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetRepositoryURL(*s)
	}
	return iuo
}

// SetLabelsURL sets the "labels_url" field.
func (iuo *IssueUpdateOne) SetLabelsURL(s string) *IssueUpdateOne {
	iuo.mutation.SetLabelsURL(s)
	return iuo
}

// SetNillableLabelsURL sets the "labels_url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableLabelsURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetLabelsURL(*s)
	}
	return iuo
}

// SetCommentsURL sets the "comments_url" field.
func (iuo *IssueUpdateOne) SetCommentsURL(s string) *IssueUpdateOne {
	iuo.mutation.SetCommentsURL(s)
	return iuo
}

// SetNillableCommentsURL sets the "comments_url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCommentsURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetCommentsURL(*s)
	}
	return iuo
}

// SetEventsURL sets the "events_url" field.
func (iuo *IssueUpdateOne) SetEventsURL(s string) *IssueUpdateOne {
	iuo.mutation.SetEventsURL(s)
	return iuo
}

// SetNillableEventsURL sets the "events_url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableEventsURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetEventsURL(*s)
	}
	return iuo
}

// SetHTMLURL sets the "html_url" field.
func (iuo *IssueUpdateOne) SetHTMLURL(s string) *IssueUpdateOne {
	iuo.mutation.SetHTMLURL(s)
	return iuo
}

// SetNillableHTMLURL sets the "html_url" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableHTMLURL(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetHTMLURL(*s)
	}
	return iuo
}

// SetNumber sets the "number" field.
func (iuo *IssueUpdateOne) SetNumber(i int64) *IssueUpdateOne {
	iuo.mutation.ResetNumber()
	iuo.mutation.SetNumber(i)
	return iuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableNumber(i *int64) *IssueUpdateOne {
	if i != nil {
		iuo.SetNumber(*i)
	}
	return iuo
}

// AddNumber adds i to the "number" field.
func (iuo *IssueUpdateOne) AddNumber(i int64) *IssueUpdateOne {
	iuo.mutation.AddNumber(i)
	return iuo
}

// SetState sets the "state" field.
func (iuo *IssueUpdateOne) SetState(s string) *IssueUpdateOne {
	iuo.mutation.SetState(s)
	return iuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableState(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetState(*s)
	}
	return iuo
}

// SetStateReason sets the "state_reason" field.
func (iuo *IssueUpdateOne) SetStateReason(mr model.StateReason) *IssueUpdateOne {
	iuo.mutation.SetStateReason(mr)
	return iuo
}

// SetNillableStateReason sets the "state_reason" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableStateReason(mr *model.StateReason) *IssueUpdateOne {
	if mr != nil {
		iuo.SetStateReason(*mr)
	}
	return iuo
}

// ClearStateReason clears the value of the "state_reason" field.
func (iuo *IssueUpdateOne) ClearStateReason() *IssueUpdateOne {
	iuo.mutation.ClearStateReason()
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *IssueUpdateOne) SetTitle(s string) *IssueUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableTitle(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetBody sets the "body" field.
func (iuo *IssueUpdateOne) SetBody(s string) *IssueUpdateOne {
	iuo.mutation.SetBody(s)
	return iuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableBody(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetBody(*s)
	}
	return iuo
}

// ClearBody clears the value of the "body" field.
func (iuo *IssueUpdateOne) ClearBody() *IssueUpdateOne {
	iuo.mutation.ClearBody()
	return iuo
}

// SetLocked sets the "locked" field.
func (iuo *IssueUpdateOne) SetLocked(b bool) *IssueUpdateOne {
	iuo.mutation.SetLocked(b)
	return iuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableLocked(b *bool) *IssueUpdateOne {
	if b != nil {
		iuo.SetLocked(*b)
	}
	return iuo
}

// SetActiveLockReason sets the "active_lock_reason" field.
func (iuo *IssueUpdateOne) SetActiveLockReason(s string) *IssueUpdateOne {
	iuo.mutation.SetActiveLockReason(s)
	return iuo
}

// SetNillableActiveLockReason sets the "active_lock_reason" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableActiveLockReason(s *string) *IssueUpdateOne {
	if s != nil {
		iuo.SetActiveLockReason(*s)
	}
	return iuo
}

// ClearActiveLockReason clears the value of the "active_lock_reason" field.
func (iuo *IssueUpdateOne) ClearActiveLockReason() *IssueUpdateOne {
	iuo.mutation.ClearActiveLockReason()
	return iuo
}

// SetCommentsCount sets the "comments_count" field.
func (iuo *IssueUpdateOne) SetCommentsCount(i int64) *IssueUpdateOne {
	iuo.mutation.ResetCommentsCount()
	iuo.mutation.SetCommentsCount(i)
	return iuo
}

// SetNillableCommentsCount sets the "comments_count" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCommentsCount(i *int64) *IssueUpdateOne {
	if i != nil {
		iuo.SetCommentsCount(*i)
	}
	return iuo
}

// AddCommentsCount adds i to the "comments_count" field.
func (iuo *IssueUpdateOne) AddCommentsCount(i int64) *IssueUpdateOne {
	iuo.mutation.AddCommentsCount(i)
	return iuo
}

// SetClosedAt sets the "closed_at" field.
func (iuo *IssueUpdateOne) SetClosedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetClosedAt(t)
	return iuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableClosedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetClosedAt(*t)
	}
	return iuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iuo *IssueUpdateOne) ClearClosedAt() *IssueUpdateOne {
	iuo.mutation.ClearClosedAt()
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IssueUpdateOne) SetCreatedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCreatedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IssueUpdateOne) SetUpdatedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableUpdatedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetDraft sets the "draft" field.
func (iuo *IssueUpdateOne) SetDraft(b bool) *IssueUpdateOne {
	iuo.mutation.SetDraft(b)
	return iuo
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableDraft(b *bool) *IssueUpdateOne {
	if b != nil {
		iuo.SetDraft(*b)
	}
	return iuo
}

// SetAuthorAssociation sets the "author_association" field.
func (iuo *IssueUpdateOne) SetAuthorAssociation(ma model.AuthorAssociation) *IssueUpdateOne {
	iuo.mutation.SetAuthorAssociation(ma)
	return iuo
}

// SetNillableAuthorAssociation sets the "author_association" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableAuthorAssociation(ma *model.AuthorAssociation) *IssueUpdateOne {
	if ma != nil {
		iuo.SetAuthorAssociation(*ma)
	}
	return iuo
}

// SetReactions sets the "reactions" field.
func (iuo *IssueUpdateOne) SetReactions(mr model.ReactionRollup) *IssueUpdateOne {
	iuo.mutation.SetReactions(mr)
	return iuo
}

// SetNillableReactions sets the "reactions" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableReactions(mr *model.ReactionRollup) *IssueUpdateOne {
	if mr != nil {
		iuo.SetReactions(*mr)
	}
	return iuo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (iuo *IssueUpdateOne) SetRepositoryID(id int64) *IssueUpdateOne {
	iuo.mutation.SetRepositoryID(id)
	return iuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (iuo *IssueUpdateOne) SetRepository(r *Repository) *IssueUpdateOne {
	return iuo.SetRepositoryID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *IssueUpdateOne) SetUserID(id int64) *IssueUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableUserID(id *int64) *IssueUpdateOne {
	if id != nil {
		iuo = iuo.SetUserID(*id)
	}
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *IssueUpdateOne) SetUser(u *User) *IssueUpdateOne {
	return iuo.SetUserID(u.ID)
}

// SetClosedByID sets the "closed_by" edge to the User entity by ID.
func (iuo *IssueUpdateOne) SetClosedByID(id int64) *IssueUpdateOne {
	iuo.mutation.SetClosedByID(id)
	return iuo
}

// SetNillableClosedByID sets the "closed_by" edge to the User entity by ID if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableClosedByID(id *int64) *IssueUpdateOne {
	if id != nil {
		iuo = iuo.SetClosedByID(*id)
	}
	return iuo
}

// SetClosedBy sets the "closed_by" edge to the User entity.
func (iuo *IssueUpdateOne) SetClosedBy(u *User) *IssueUpdateOne {
	return iuo.SetClosedByID(u.ID)
}

// AddAssigneeIDs adds the "assignees" edge to the User entity by IDs.
func (iuo *IssueUpdateOne) AddAssigneeIDs(ids ...int64) *IssueUpdateOne {
	iuo.mutation.AddAssigneeIDs(ids...)
	return iuo
}

// AddAssignees adds the "assignees" edges to the User entity.
func (iuo *IssueUpdateOne) AddAssignees(u ...*User) *IssueUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.AddAssigneeIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the IssueComment entity by IDs.
func (iuo *IssueUpdateOne) AddCommentIDs(ids ...int64) *IssueUpdateOne {
	iuo.mutation.AddCommentIDs(ids...)
	return iuo
}

// AddComments adds the "comments" edges to the IssueComment entity.
func (iuo *IssueUpdateOne) AddComments(i ...*IssueComment) *IssueUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddCommentIDs(ids...)
}

// AddTimelineIDs adds the "timeline" edge to the TimelineEvent entity by IDs.
func (iuo *IssueUpdateOne) AddTimelineIDs(ids ...string) *IssueUpdateOne {
	iuo.mutation.AddTimelineIDs(ids...)
	return iuo
}

// AddTimeline adds the "timeline" edges to the TimelineEvent entity.
func (iuo *IssueUpdateOne) AddTimeline(t ...*TimelineEvent) *IssueUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTimelineIDs(ids...)
}

// SetPullRequestID sets the "pull_request" edge to the PullRequest entity by ID.
func (iuo *IssueUpdateOne) SetPullRequestID(id int64) *IssueUpdateOne {
	iuo.mutation.SetPullRequestID(id)
	return iuo
}

// SetNillablePullRequestID sets the "pull_request" edge to the PullRequest entity by ID if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillablePullRequestID(id *int64) *IssueUpdateOne {
	if id != nil {
		iuo = iuo.SetPullRequestID(*id)
	}
	return iuo
}

// SetPullRequest sets the "pull_request" edge to the PullRequest entity.
func (iuo *IssueUpdateOne) SetPullRequest(p *PullRequest) *IssueUpdateOne {
	return iuo.SetPullRequestID(p.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (iuo *IssueUpdateOne) Mutation() *IssueMutation {
	return iuo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (iuo *IssueUpdateOne) ClearRepository() *IssueUpdateOne {
	iuo.mutation.ClearRepository()
	return iuo
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *IssueUpdateOne) ClearUser() *IssueUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearClosedBy clears the "closed_by" edge to the User entity.
func (iuo *IssueUpdateOne) ClearClosedBy() *IssueUpdateOne {
	iuo.mutation.ClearClosedBy()
	return iuo
}

// ClearAssignees clears all "assignees" edges to the User entity.
func (iuo *IssueUpdateOne) ClearAssignees() *IssueUpdateOne {
	iuo.mutation.ClearAssignees()
	return iuo
}

// RemoveAssigneeIDs removes the "assignees" edge to User entities by IDs.
func (iuo *IssueUpdateOne) RemoveAssigneeIDs(ids ...int64) *IssueUpdateOne {
	iuo.mutation.RemoveAssigneeIDs(ids...)
	return iuo
}

// RemoveAssignees removes "assignees" edges to User entities.
func (iuo *IssueUpdateOne) RemoveAssignees(u ...*User) *IssueUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.RemoveAssigneeIDs(ids...)
}

// ClearComments clears all "comments" edges to the IssueComment entity.
func (iuo *IssueUpdateOne) ClearComments() *IssueUpdateOne {
	iuo.mutation.ClearComments()
	return iuo
}

// RemoveCommentIDs removes the "comments" edge to IssueComment entities by IDs.
func (iuo *IssueUpdateOne) RemoveCommentIDs(ids ...int64) *IssueUpdateOne {
	iuo.mutation.RemoveCommentIDs(ids...)
	return iuo
}

// RemoveComments removes "comments" edges to IssueComment entities.
func (iuo *IssueUpdateOne) RemoveComments(i ...*IssueComment) *IssueUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveCommentIDs(ids...)
}

// ClearTimeline clears all "timeline" edges to the TimelineEvent entity.
func (iuo *IssueUpdateOne) ClearTimeline() *IssueUpdateOne {
	iuo.mutation.ClearTimeline()
	return iuo
}

// RemoveTimelineIDs removes the "timeline" edge to TimelineEvent entities by IDs.
func (iuo *IssueUpdateOne) RemoveTimelineIDs(ids ...string) *IssueUpdateOne {
	iuo.mutation.RemoveTimelineIDs(ids...)
	return iuo
}

// RemoveTimeline removes "timeline" edges to TimelineEvent entities.
func (iuo *IssueUpdateOne) RemoveTimeline(t ...*TimelineEvent) *IssueUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTimelineIDs(ids...)
}

// ClearPullRequest clears the "pull_request" edge to the PullRequest entity.
func (iuo *IssueUpdateOne) ClearPullRequest() *IssueUpdateOne {
	iuo.mutation.ClearPullRequest()
	return iuo
}

// Where appends a list predicates to the IssueUpdate builder.
func (iuo *IssueUpdateOne) Where(ps ...predicate.Issue) *IssueUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IssueUpdateOne) Select(field string, fields ...string) *IssueUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Issue entity.
func (iuo *IssueUpdateOne) Save(ctx context.Context) (*Issue, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IssueUpdateOne) SaveX(ctx context.Context) *Issue {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IssueUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IssueUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IssueUpdateOne) check() error {
	if v, ok := iuo.mutation.StateReason(); ok {
		if err := issue.StateReasonValidator(v); err != nil {
			return &ValidationError{Name: "state_reason", err: fmt.Errorf(`ent: validator failed for field "Issue.state_reason": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.AuthorAssociation(); ok {
		if err := issue.AuthorAssociationValidator(v); err != nil {
			return &ValidationError{Name: "author_association", err: fmt.Errorf(`ent: validator failed for field "Issue.author_association": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.RepositoryID(); iuo.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Issue.repository"`)
	}
	return nil
}

func (iuo *IssueUpdateOne) sqlSave(ctx context.Context) (_node *Issue, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Issue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issue.FieldID)
		for _, f := range fields {
			if !issue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.NodeID(); ok {
		_spec.SetField(issue.FieldNodeID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.URL(); ok {
		_spec.SetField(issue.FieldURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.RepositoryURL(); ok {
		_spec.SetField(issue.FieldRepositoryURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.LabelsURL(); ok {
		_spec.SetField(issue.FieldLabelsURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CommentsURL(); ok {
		_spec.SetField(issue.FieldCommentsURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.EventsURL(); ok {
		_spec.SetField(issue.FieldEventsURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.HTMLURL(); ok {
		_spec.SetField(issue.FieldHTMLURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Number(); ok {
		_spec.SetField(issue.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedNumber(); ok {
		_spec.AddField(issue.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.State(); ok {
		_spec.SetField(issue.FieldState, field.TypeString, value)
	}
	if value, ok := iuo.mutation.StateReason(); ok {
		_spec.SetField(issue.FieldStateReason, field.TypeEnum, value)
	}
	if iuo.mutation.StateReasonCleared() {
		_spec.ClearField(issue.FieldStateReason, field.TypeEnum)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Body(); ok {
		_spec.SetField(issue.FieldBody, field.TypeString, value)
	}
	if iuo.mutation.BodyCleared() {
		_spec.ClearField(issue.FieldBody, field.TypeString)
	}
	if value, ok := iuo.mutation.Locked(); ok {
		_spec.SetField(issue.FieldLocked, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.ActiveLockReason(); ok {
		_spec.SetField(issue.FieldActiveLockReason, field.TypeString, value)
	}
	if iuo.mutation.ActiveLockReasonCleared() {
		_spec.ClearField(issue.FieldActiveLockReason, field.TypeString)
	}
	if value, ok := iuo.mutation.CommentsCount(); ok {
		_spec.SetField(issue.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedCommentsCount(); ok {
		_spec.AddField(issue.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.ClosedAt(); ok {
		_spec.SetField(issue.FieldClosedAt, field.TypeTime, value)
	}
	if iuo.mutation.ClosedAtCleared() {
		_spec.ClearField(issue.FieldClosedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(issue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(issue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Draft(); ok {
		_spec.SetField(issue.FieldDraft, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.AuthorAssociation(); ok {
		_spec.SetField(issue.FieldAuthorAssociation, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Reactions(); ok {
		_spec.SetField(issue.FieldReactions, field.TypeJSON, value)
	}
	if iuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.UserTable,
			Columns: []string{issue.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.UserTable,
			Columns: []string{issue.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ClosedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ClosedByTable,
			Columns: []string{issue.ClosedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ClosedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.ClosedByTable,
			Columns: []string{issue.ClosedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedAssigneesIDs(); len(nodes) > 0 && !iuo.mutation.AssigneesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.AssigneesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssigneesTable,
			Columns: issue.AssigneesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.CommentsTable,
			Columns: []string{issue.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTimelineIDs(); len(nodes) > 0 && !iuo.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   issue.TimelineTable,
			Columns: []string{issue.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.PullRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issue.PullRequestTable,
			Columns: []string{issue.PullRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PullRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issue.PullRequestTable,
			Columns: []string{issue.PullRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pullrequest.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Issue{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
