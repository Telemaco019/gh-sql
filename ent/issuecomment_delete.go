// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnoverse/gh-sql/ent/issuecomment"
	"github.com/gnoverse/gh-sql/ent/predicate"
)

// IssueCommentDelete is the builder for deleting a IssueComment entity.
type IssueCommentDelete struct {
	config
	hooks    []Hook
	mutation *IssueCommentMutation
}

// Where appends a list predicates to the IssueCommentDelete builder.
func (icd *IssueCommentDelete) Where(ps ...predicate.IssueComment) *IssueCommentDelete {
	icd.mutation.Where(ps...)
	return icd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (icd *IssueCommentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, icd.sqlExec, icd.mutation, icd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (icd *IssueCommentDelete) ExecX(ctx context.Context) int {
	n, err := icd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (icd *IssueCommentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(issuecomment.Table, sqlgraph.NewFieldSpec(issuecomment.FieldID, field.TypeInt64))
	if ps := icd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, icd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	icd.mutation.done = true
	return affected, err
}

// IssueCommentDeleteOne is the builder for deleting a single IssueComment entity.
type IssueCommentDeleteOne struct {
	icd *IssueCommentDelete
}

// Where appends a list predicates to the IssueCommentDelete builder.
func (icdo *IssueCommentDeleteOne) Where(ps ...predicate.IssueComment) *IssueCommentDeleteOne {
	icdo.icd.mutation.Where(ps...)
	return icdo
}

// Exec executes the deletion query.
func (icdo *IssueCommentDeleteOne) Exec(ctx context.Context) error {
	n, err := icdo.icd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{issuecomment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (icdo *IssueCommentDeleteOne) ExecX(ctx context.Context) {
	if err := icdo.Exec(ctx); err != nil {
		panic(err)
	}
}
