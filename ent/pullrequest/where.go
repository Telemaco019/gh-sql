// Code generated by ent, DO NOT EDIT.

package pullrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnoverse/gh-sql/ent/predicate"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldURL, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldNodeID, v))
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldHTMLURL, v))
}

// DiffURL applies equality check predicate on the "diff_url" field. It's identical to DiffURLEQ.
func DiffURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldDiffURL, v))
}

// PatchURL applies equality check predicate on the "patch_url" field. It's identical to PatchURLEQ.
func PatchURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldPatchURL, v))
}

// IssueURL applies equality check predicate on the "issue_url" field. It's identical to IssueURLEQ.
func IssueURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldIssueURL, v))
}

// CommitsURL applies equality check predicate on the "commits_url" field. It's identical to CommitsURLEQ.
func CommitsURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCommitsURL, v))
}

// ReviewCommentsURL applies equality check predicate on the "review_comments_url" field. It's identical to ReviewCommentsURLEQ.
func ReviewCommentsURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldReviewCommentsURL, v))
}

// ReviewCommentURL applies equality check predicate on the "review_comment_url" field. It's identical to ReviewCommentURLEQ.
func ReviewCommentURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldReviewCommentURL, v))
}

// CommentsURL applies equality check predicate on the "comments_url" field. It's identical to CommentsURLEQ.
func CommentsURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCommentsURL, v))
}

// StatusesURL applies equality check predicate on the "statuses_url" field. It's identical to StatusesURLEQ.
func StatusesURL(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldStatusesURL, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldNumber, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldLocked, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldTitle, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldBody, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldClosedAt, v))
}

// MergedAt applies equality check predicate on the "merged_at" field. It's identical to MergedAtEQ.
func MergedAt(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldMergedAt, v))
}

// MergeCommitSha applies equality check predicate on the "merge_commit_sha" field. It's identical to MergeCommitShaEQ.
func MergeCommitSha(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldMergeCommitSha, v))
}

// Draft applies equality check predicate on the "draft" field. It's identical to DraftEQ.
func Draft(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldDraft, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldURL, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldNodeID, v))
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldHTMLURL, v))
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldHTMLURL, v))
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldHTMLURL, vs...))
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldHTMLURL, vs...))
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldHTMLURL, v))
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldHTMLURL, v))
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldHTMLURL, v))
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldHTMLURL, v))
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldHTMLURL, v))
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldHTMLURL, v))
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldHTMLURL, v))
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldHTMLURL, v))
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldHTMLURL, v))
}

// DiffURLEQ applies the EQ predicate on the "diff_url" field.
func DiffURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldDiffURL, v))
}

// DiffURLNEQ applies the NEQ predicate on the "diff_url" field.
func DiffURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldDiffURL, v))
}

// DiffURLIn applies the In predicate on the "diff_url" field.
func DiffURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldDiffURL, vs...))
}

// DiffURLNotIn applies the NotIn predicate on the "diff_url" field.
func DiffURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldDiffURL, vs...))
}

// DiffURLGT applies the GT predicate on the "diff_url" field.
func DiffURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldDiffURL, v))
}

// DiffURLGTE applies the GTE predicate on the "diff_url" field.
func DiffURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldDiffURL, v))
}

// DiffURLLT applies the LT predicate on the "diff_url" field.
func DiffURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldDiffURL, v))
}

// DiffURLLTE applies the LTE predicate on the "diff_url" field.
func DiffURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldDiffURL, v))
}

// DiffURLContains applies the Contains predicate on the "diff_url" field.
func DiffURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldDiffURL, v))
}

// DiffURLHasPrefix applies the HasPrefix predicate on the "diff_url" field.
func DiffURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldDiffURL, v))
}

// DiffURLHasSuffix applies the HasSuffix predicate on the "diff_url" field.
func DiffURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldDiffURL, v))
}

// DiffURLEqualFold applies the EqualFold predicate on the "diff_url" field.
func DiffURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldDiffURL, v))
}

// DiffURLContainsFold applies the ContainsFold predicate on the "diff_url" field.
func DiffURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldDiffURL, v))
}

// PatchURLEQ applies the EQ predicate on the "patch_url" field.
func PatchURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldPatchURL, v))
}

// PatchURLNEQ applies the NEQ predicate on the "patch_url" field.
func PatchURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldPatchURL, v))
}

// PatchURLIn applies the In predicate on the "patch_url" field.
func PatchURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldPatchURL, vs...))
}

// PatchURLNotIn applies the NotIn predicate on the "patch_url" field.
func PatchURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldPatchURL, vs...))
}

// PatchURLGT applies the GT predicate on the "patch_url" field.
func PatchURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldPatchURL, v))
}

// PatchURLGTE applies the GTE predicate on the "patch_url" field.
func PatchURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldPatchURL, v))
}

// PatchURLLT applies the LT predicate on the "patch_url" field.
func PatchURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldPatchURL, v))
}

// PatchURLLTE applies the LTE predicate on the "patch_url" field.
func PatchURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldPatchURL, v))
}

// PatchURLContains applies the Contains predicate on the "patch_url" field.
func PatchURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldPatchURL, v))
}

// PatchURLHasPrefix applies the HasPrefix predicate on the "patch_url" field.
func PatchURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldPatchURL, v))
}

// PatchURLHasSuffix applies the HasSuffix predicate on the "patch_url" field.
func PatchURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldPatchURL, v))
}

// PatchURLEqualFold applies the EqualFold predicate on the "patch_url" field.
func PatchURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldPatchURL, v))
}

// PatchURLContainsFold applies the ContainsFold predicate on the "patch_url" field.
func PatchURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldPatchURL, v))
}

// IssueURLEQ applies the EQ predicate on the "issue_url" field.
func IssueURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldIssueURL, v))
}

// IssueURLNEQ applies the NEQ predicate on the "issue_url" field.
func IssueURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldIssueURL, v))
}

// IssueURLIn applies the In predicate on the "issue_url" field.
func IssueURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldIssueURL, vs...))
}

// IssueURLNotIn applies the NotIn predicate on the "issue_url" field.
func IssueURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldIssueURL, vs...))
}

// IssueURLGT applies the GT predicate on the "issue_url" field.
func IssueURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldIssueURL, v))
}

// IssueURLGTE applies the GTE predicate on the "issue_url" field.
func IssueURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldIssueURL, v))
}

// IssueURLLT applies the LT predicate on the "issue_url" field.
func IssueURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldIssueURL, v))
}

// IssueURLLTE applies the LTE predicate on the "issue_url" field.
func IssueURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldIssueURL, v))
}

// IssueURLContains applies the Contains predicate on the "issue_url" field.
func IssueURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldIssueURL, v))
}

// IssueURLHasPrefix applies the HasPrefix predicate on the "issue_url" field.
func IssueURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldIssueURL, v))
}

// IssueURLHasSuffix applies the HasSuffix predicate on the "issue_url" field.
func IssueURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldIssueURL, v))
}

// IssueURLEqualFold applies the EqualFold predicate on the "issue_url" field.
func IssueURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldIssueURL, v))
}

// IssueURLContainsFold applies the ContainsFold predicate on the "issue_url" field.
func IssueURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldIssueURL, v))
}

// CommitsURLEQ applies the EQ predicate on the "commits_url" field.
func CommitsURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCommitsURL, v))
}

// CommitsURLNEQ applies the NEQ predicate on the "commits_url" field.
func CommitsURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldCommitsURL, v))
}

// CommitsURLIn applies the In predicate on the "commits_url" field.
func CommitsURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldCommitsURL, vs...))
}

// CommitsURLNotIn applies the NotIn predicate on the "commits_url" field.
func CommitsURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldCommitsURL, vs...))
}

// CommitsURLGT applies the GT predicate on the "commits_url" field.
func CommitsURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldCommitsURL, v))
}

// CommitsURLGTE applies the GTE predicate on the "commits_url" field.
func CommitsURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldCommitsURL, v))
}

// CommitsURLLT applies the LT predicate on the "commits_url" field.
func CommitsURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldCommitsURL, v))
}

// CommitsURLLTE applies the LTE predicate on the "commits_url" field.
func CommitsURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldCommitsURL, v))
}

// CommitsURLContains applies the Contains predicate on the "commits_url" field.
func CommitsURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldCommitsURL, v))
}

// CommitsURLHasPrefix applies the HasPrefix predicate on the "commits_url" field.
func CommitsURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldCommitsURL, v))
}

// CommitsURLHasSuffix applies the HasSuffix predicate on the "commits_url" field.
func CommitsURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldCommitsURL, v))
}

// CommitsURLEqualFold applies the EqualFold predicate on the "commits_url" field.
func CommitsURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldCommitsURL, v))
}

// CommitsURLContainsFold applies the ContainsFold predicate on the "commits_url" field.
func CommitsURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldCommitsURL, v))
}

// ReviewCommentsURLEQ applies the EQ predicate on the "review_comments_url" field.
func ReviewCommentsURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLNEQ applies the NEQ predicate on the "review_comments_url" field.
func ReviewCommentsURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLIn applies the In predicate on the "review_comments_url" field.
func ReviewCommentsURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldReviewCommentsURL, vs...))
}

// ReviewCommentsURLNotIn applies the NotIn predicate on the "review_comments_url" field.
func ReviewCommentsURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldReviewCommentsURL, vs...))
}

// ReviewCommentsURLGT applies the GT predicate on the "review_comments_url" field.
func ReviewCommentsURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLGTE applies the GTE predicate on the "review_comments_url" field.
func ReviewCommentsURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLLT applies the LT predicate on the "review_comments_url" field.
func ReviewCommentsURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLLTE applies the LTE predicate on the "review_comments_url" field.
func ReviewCommentsURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLContains applies the Contains predicate on the "review_comments_url" field.
func ReviewCommentsURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLHasPrefix applies the HasPrefix predicate on the "review_comments_url" field.
func ReviewCommentsURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLHasSuffix applies the HasSuffix predicate on the "review_comments_url" field.
func ReviewCommentsURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLEqualFold applies the EqualFold predicate on the "review_comments_url" field.
func ReviewCommentsURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldReviewCommentsURL, v))
}

// ReviewCommentsURLContainsFold applies the ContainsFold predicate on the "review_comments_url" field.
func ReviewCommentsURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldReviewCommentsURL, v))
}

// ReviewCommentURLEQ applies the EQ predicate on the "review_comment_url" field.
func ReviewCommentURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldReviewCommentURL, v))
}

// ReviewCommentURLNEQ applies the NEQ predicate on the "review_comment_url" field.
func ReviewCommentURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldReviewCommentURL, v))
}

// ReviewCommentURLIn applies the In predicate on the "review_comment_url" field.
func ReviewCommentURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldReviewCommentURL, vs...))
}

// ReviewCommentURLNotIn applies the NotIn predicate on the "review_comment_url" field.
func ReviewCommentURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldReviewCommentURL, vs...))
}

// ReviewCommentURLGT applies the GT predicate on the "review_comment_url" field.
func ReviewCommentURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldReviewCommentURL, v))
}

// ReviewCommentURLGTE applies the GTE predicate on the "review_comment_url" field.
func ReviewCommentURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldReviewCommentURL, v))
}

// ReviewCommentURLLT applies the LT predicate on the "review_comment_url" field.
func ReviewCommentURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldReviewCommentURL, v))
}

// ReviewCommentURLLTE applies the LTE predicate on the "review_comment_url" field.
func ReviewCommentURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldReviewCommentURL, v))
}

// ReviewCommentURLContains applies the Contains predicate on the "review_comment_url" field.
func ReviewCommentURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldReviewCommentURL, v))
}

// ReviewCommentURLHasPrefix applies the HasPrefix predicate on the "review_comment_url" field.
func ReviewCommentURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldReviewCommentURL, v))
}

// ReviewCommentURLHasSuffix applies the HasSuffix predicate on the "review_comment_url" field.
func ReviewCommentURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldReviewCommentURL, v))
}

// ReviewCommentURLEqualFold applies the EqualFold predicate on the "review_comment_url" field.
func ReviewCommentURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldReviewCommentURL, v))
}

// ReviewCommentURLContainsFold applies the ContainsFold predicate on the "review_comment_url" field.
func ReviewCommentURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldReviewCommentURL, v))
}

// CommentsURLEQ applies the EQ predicate on the "comments_url" field.
func CommentsURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCommentsURL, v))
}

// CommentsURLNEQ applies the NEQ predicate on the "comments_url" field.
func CommentsURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldCommentsURL, v))
}

// CommentsURLIn applies the In predicate on the "comments_url" field.
func CommentsURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldCommentsURL, vs...))
}

// CommentsURLNotIn applies the NotIn predicate on the "comments_url" field.
func CommentsURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldCommentsURL, vs...))
}

// CommentsURLGT applies the GT predicate on the "comments_url" field.
func CommentsURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldCommentsURL, v))
}

// CommentsURLGTE applies the GTE predicate on the "comments_url" field.
func CommentsURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldCommentsURL, v))
}

// CommentsURLLT applies the LT predicate on the "comments_url" field.
func CommentsURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldCommentsURL, v))
}

// CommentsURLLTE applies the LTE predicate on the "comments_url" field.
func CommentsURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldCommentsURL, v))
}

// CommentsURLContains applies the Contains predicate on the "comments_url" field.
func CommentsURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldCommentsURL, v))
}

// CommentsURLHasPrefix applies the HasPrefix predicate on the "comments_url" field.
func CommentsURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldCommentsURL, v))
}

// CommentsURLHasSuffix applies the HasSuffix predicate on the "comments_url" field.
func CommentsURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldCommentsURL, v))
}

// CommentsURLEqualFold applies the EqualFold predicate on the "comments_url" field.
func CommentsURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldCommentsURL, v))
}

// CommentsURLContainsFold applies the ContainsFold predicate on the "comments_url" field.
func CommentsURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldCommentsURL, v))
}

// StatusesURLEQ applies the EQ predicate on the "statuses_url" field.
func StatusesURLEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldStatusesURL, v))
}

// StatusesURLNEQ applies the NEQ predicate on the "statuses_url" field.
func StatusesURLNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldStatusesURL, v))
}

// StatusesURLIn applies the In predicate on the "statuses_url" field.
func StatusesURLIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldStatusesURL, vs...))
}

// StatusesURLNotIn applies the NotIn predicate on the "statuses_url" field.
func StatusesURLNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldStatusesURL, vs...))
}

// StatusesURLGT applies the GT predicate on the "statuses_url" field.
func StatusesURLGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldStatusesURL, v))
}

// StatusesURLGTE applies the GTE predicate on the "statuses_url" field.
func StatusesURLGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldStatusesURL, v))
}

// StatusesURLLT applies the LT predicate on the "statuses_url" field.
func StatusesURLLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldStatusesURL, v))
}

// StatusesURLLTE applies the LTE predicate on the "statuses_url" field.
func StatusesURLLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldStatusesURL, v))
}

// StatusesURLContains applies the Contains predicate on the "statuses_url" field.
func StatusesURLContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldStatusesURL, v))
}

// StatusesURLHasPrefix applies the HasPrefix predicate on the "statuses_url" field.
func StatusesURLHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldStatusesURL, v))
}

// StatusesURLHasSuffix applies the HasSuffix predicate on the "statuses_url" field.
func StatusesURLHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldStatusesURL, v))
}

// StatusesURLEqualFold applies the EqualFold predicate on the "statuses_url" field.
func StatusesURLEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldStatusesURL, v))
}

// StatusesURLContainsFold applies the ContainsFold predicate on the "statuses_url" field.
func StatusesURLContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldStatusesURL, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int64) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldNumber, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldState, vs...))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldLocked, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldTitle, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldBody, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldUpdatedAt, v))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotNull(FieldClosedAt))
}

// MergedAtEQ applies the EQ predicate on the "merged_at" field.
func MergedAtEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldMergedAt, v))
}

// MergedAtNEQ applies the NEQ predicate on the "merged_at" field.
func MergedAtNEQ(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldMergedAt, v))
}

// MergedAtIn applies the In predicate on the "merged_at" field.
func MergedAtIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldMergedAt, vs...))
}

// MergedAtNotIn applies the NotIn predicate on the "merged_at" field.
func MergedAtNotIn(vs ...time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldMergedAt, vs...))
}

// MergedAtGT applies the GT predicate on the "merged_at" field.
func MergedAtGT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldMergedAt, v))
}

// MergedAtGTE applies the GTE predicate on the "merged_at" field.
func MergedAtGTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldMergedAt, v))
}

// MergedAtLT applies the LT predicate on the "merged_at" field.
func MergedAtLT(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldMergedAt, v))
}

// MergedAtLTE applies the LTE predicate on the "merged_at" field.
func MergedAtLTE(v time.Time) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldMergedAt, v))
}

// MergedAtIsNil applies the IsNil predicate on the "merged_at" field.
func MergedAtIsNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIsNull(FieldMergedAt))
}

// MergedAtNotNil applies the NotNil predicate on the "merged_at" field.
func MergedAtNotNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotNull(FieldMergedAt))
}

// MergeCommitShaEQ applies the EQ predicate on the "merge_commit_sha" field.
func MergeCommitShaEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldMergeCommitSha, v))
}

// MergeCommitShaNEQ applies the NEQ predicate on the "merge_commit_sha" field.
func MergeCommitShaNEQ(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldMergeCommitSha, v))
}

// MergeCommitShaIn applies the In predicate on the "merge_commit_sha" field.
func MergeCommitShaIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIn(FieldMergeCommitSha, vs...))
}

// MergeCommitShaNotIn applies the NotIn predicate on the "merge_commit_sha" field.
func MergeCommitShaNotIn(vs ...string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotIn(FieldMergeCommitSha, vs...))
}

// MergeCommitShaGT applies the GT predicate on the "merge_commit_sha" field.
func MergeCommitShaGT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGT(FieldMergeCommitSha, v))
}

// MergeCommitShaGTE applies the GTE predicate on the "merge_commit_sha" field.
func MergeCommitShaGTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldGTE(FieldMergeCommitSha, v))
}

// MergeCommitShaLT applies the LT predicate on the "merge_commit_sha" field.
func MergeCommitShaLT(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLT(FieldMergeCommitSha, v))
}

// MergeCommitShaLTE applies the LTE predicate on the "merge_commit_sha" field.
func MergeCommitShaLTE(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldLTE(FieldMergeCommitSha, v))
}

// MergeCommitShaContains applies the Contains predicate on the "merge_commit_sha" field.
func MergeCommitShaContains(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContains(FieldMergeCommitSha, v))
}

// MergeCommitShaHasPrefix applies the HasPrefix predicate on the "merge_commit_sha" field.
func MergeCommitShaHasPrefix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasPrefix(FieldMergeCommitSha, v))
}

// MergeCommitShaHasSuffix applies the HasSuffix predicate on the "merge_commit_sha" field.
func MergeCommitShaHasSuffix(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldHasSuffix(FieldMergeCommitSha, v))
}

// MergeCommitShaIsNil applies the IsNil predicate on the "merge_commit_sha" field.
func MergeCommitShaIsNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIsNull(FieldMergeCommitSha))
}

// MergeCommitShaNotNil applies the NotNil predicate on the "merge_commit_sha" field.
func MergeCommitShaNotNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotNull(FieldMergeCommitSha))
}

// MergeCommitShaEqualFold applies the EqualFold predicate on the "merge_commit_sha" field.
func MergeCommitShaEqualFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEqualFold(FieldMergeCommitSha, v))
}

// MergeCommitShaContainsFold applies the ContainsFold predicate on the "merge_commit_sha" field.
func MergeCommitShaContainsFold(v string) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldContainsFold(FieldMergeCommitSha, v))
}

// DraftEQ applies the EQ predicate on the "draft" field.
func DraftEQ(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldEQ(FieldDraft, v))
}

// DraftNEQ applies the NEQ predicate on the "draft" field.
func DraftNEQ(v bool) predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNEQ(FieldDraft, v))
}

// DraftIsNil applies the IsNil predicate on the "draft" field.
func DraftIsNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldIsNull(FieldDraft))
}

// DraftNotNil applies the NotNil predicate on the "draft" field.
func DraftNotNil() predicate.PullRequest {
	return predicate.PullRequest(sql.FieldNotNull(FieldDraft))
}

// AuthorAssociationEQ applies the EQ predicate on the "author_association" field.
func AuthorAssociationEQ(v model.AuthorAssociation) predicate.PullRequest {
	vc := v
	return predicate.PullRequest(sql.FieldEQ(FieldAuthorAssociation, vc))
}

// AuthorAssociationNEQ applies the NEQ predicate on the "author_association" field.
func AuthorAssociationNEQ(v model.AuthorAssociation) predicate.PullRequest {
	vc := v
	return predicate.PullRequest(sql.FieldNEQ(FieldAuthorAssociation, vc))
}

// AuthorAssociationIn applies the In predicate on the "author_association" field.
func AuthorAssociationIn(vs ...model.AuthorAssociation) predicate.PullRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PullRequest(sql.FieldIn(FieldAuthorAssociation, v...))
}

// AuthorAssociationNotIn applies the NotIn predicate on the "author_association" field.
func AuthorAssociationNotIn(vs ...model.AuthorAssociation) predicate.PullRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PullRequest(sql.FieldNotIn(FieldAuthorAssociation, v...))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssue applies the HasEdge predicate on the "issue" edge.
func HasIssue() predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, IssueTable, IssueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssueWith applies the HasEdge predicate on the "issue" edge with a given conditions (other predicates).
func HasIssueWith(preds ...predicate.Issue) predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := newIssueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignees applies the HasEdge predicate on the "assignees" edge.
func HasAssignees() predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AssigneesTable, AssigneesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssigneesWith applies the HasEdge predicate on the "assignees" edge with a given conditions (other predicates).
func HasAssigneesWith(preds ...predicate.User) predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := newAssigneesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequestedReviewers applies the HasEdge predicate on the "requested_reviewers" edge.
func HasRequestedReviewers() predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequestedReviewersTable, RequestedReviewersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestedReviewersWith applies the HasEdge predicate on the "requested_reviewers" edge with a given conditions (other predicates).
func HasRequestedReviewersWith(preds ...predicate.User) predicate.PullRequest {
	return predicate.PullRequest(func(s *sql.Selector) {
		step := newRequestedReviewersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PullRequest) predicate.PullRequest {
	return predicate.PullRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PullRequest) predicate.PullRequest {
	return predicate.PullRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PullRequest) predicate.PullRequest {
	return predicate.PullRequest(sql.NotPredicates(p))
}
