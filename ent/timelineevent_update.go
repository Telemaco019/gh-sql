// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnoverse/gh-sql/ent/issue"
	"github.com/gnoverse/gh-sql/ent/predicate"
	"github.com/gnoverse/gh-sql/ent/timelineevent"
	"github.com/gnoverse/gh-sql/ent/user"
	"github.com/gnoverse/gh-sql/pkg/model"
)

// TimelineEventUpdate is the builder for updating TimelineEvent entities.
type TimelineEventUpdate struct {
	config
	hooks    []Hook
	mutation *TimelineEventMutation
}

// Where appends a list predicates to the TimelineEventUpdate builder.
func (teu *TimelineEventUpdate) Where(ps ...predicate.TimelineEvent) *TimelineEventUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetNumericID sets the "numeric_id" field.
func (teu *TimelineEventUpdate) SetNumericID(i int64) *TimelineEventUpdate {
	teu.mutation.ResetNumericID()
	teu.mutation.SetNumericID(i)
	return teu
}

// SetNillableNumericID sets the "numeric_id" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableNumericID(i *int64) *TimelineEventUpdate {
	if i != nil {
		teu.SetNumericID(*i)
	}
	return teu
}

// AddNumericID adds i to the "numeric_id" field.
func (teu *TimelineEventUpdate) AddNumericID(i int64) *TimelineEventUpdate {
	teu.mutation.AddNumericID(i)
	return teu
}

// SetNodeID sets the "node_id" field.
func (teu *TimelineEventUpdate) SetNodeID(s string) *TimelineEventUpdate {
	teu.mutation.SetNodeID(s)
	return teu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableNodeID(s *string) *TimelineEventUpdate {
	if s != nil {
		teu.SetNodeID(*s)
	}
	return teu
}

// SetURL sets the "url" field.
func (teu *TimelineEventUpdate) SetURL(s string) *TimelineEventUpdate {
	teu.mutation.SetURL(s)
	return teu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableURL(s *string) *TimelineEventUpdate {
	if s != nil {
		teu.SetURL(*s)
	}
	return teu
}

// SetEvent sets the "event" field.
func (teu *TimelineEventUpdate) SetEvent(s string) *TimelineEventUpdate {
	teu.mutation.SetEvent(s)
	return teu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableEvent(s *string) *TimelineEventUpdate {
	if s != nil {
		teu.SetEvent(*s)
	}
	return teu
}

// SetCommitID sets the "commit_id" field.
func (teu *TimelineEventUpdate) SetCommitID(s string) *TimelineEventUpdate {
	teu.mutation.SetCommitID(s)
	return teu
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableCommitID(s *string) *TimelineEventUpdate {
	if s != nil {
		teu.SetCommitID(*s)
	}
	return teu
}

// ClearCommitID clears the value of the "commit_id" field.
func (teu *TimelineEventUpdate) ClearCommitID() *TimelineEventUpdate {
	teu.mutation.ClearCommitID()
	return teu
}

// SetCommitURL sets the "commit_url" field.
func (teu *TimelineEventUpdate) SetCommitURL(s string) *TimelineEventUpdate {
	teu.mutation.SetCommitURL(s)
	return teu
}

// SetNillableCommitURL sets the "commit_url" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableCommitURL(s *string) *TimelineEventUpdate {
	if s != nil {
		teu.SetCommitURL(*s)
	}
	return teu
}

// ClearCommitURL clears the value of the "commit_url" field.
func (teu *TimelineEventUpdate) ClearCommitURL() *TimelineEventUpdate {
	teu.mutation.ClearCommitURL()
	return teu
}

// SetCreatedAt sets the "created_at" field.
func (teu *TimelineEventUpdate) SetCreatedAt(t time.Time) *TimelineEventUpdate {
	teu.mutation.SetCreatedAt(t)
	return teu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableCreatedAt(t *time.Time) *TimelineEventUpdate {
	if t != nil {
		teu.SetCreatedAt(*t)
	}
	return teu
}

// SetData sets the "data" field.
func (teu *TimelineEventUpdate) SetData(mew model.TimelineEventWrapper) *TimelineEventUpdate {
	teu.mutation.SetData(mew)
	return teu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableData(mew *model.TimelineEventWrapper) *TimelineEventUpdate {
	if mew != nil {
		teu.SetData(*mew)
	}
	return teu
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (teu *TimelineEventUpdate) SetActorID(id int64) *TimelineEventUpdate {
	teu.mutation.SetActorID(id)
	return teu
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableActorID(id *int64) *TimelineEventUpdate {
	if id != nil {
		teu = teu.SetActorID(*id)
	}
	return teu
}

// SetActor sets the "actor" edge to the User entity.
func (teu *TimelineEventUpdate) SetActor(u *User) *TimelineEventUpdate {
	return teu.SetActorID(u.ID)
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (teu *TimelineEventUpdate) SetIssueID(id int64) *TimelineEventUpdate {
	teu.mutation.SetIssueID(id)
	return teu
}

// SetNillableIssueID sets the "issue" edge to the Issue entity by ID if the given value is not nil.
func (teu *TimelineEventUpdate) SetNillableIssueID(id *int64) *TimelineEventUpdate {
	if id != nil {
		teu = teu.SetIssueID(*id)
	}
	return teu
}

// SetIssue sets the "issue" edge to the Issue entity.
func (teu *TimelineEventUpdate) SetIssue(i *Issue) *TimelineEventUpdate {
	return teu.SetIssueID(i.ID)
}

// Mutation returns the TimelineEventMutation object of the builder.
func (teu *TimelineEventUpdate) Mutation() *TimelineEventMutation {
	return teu.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (teu *TimelineEventUpdate) ClearActor() *TimelineEventUpdate {
	teu.mutation.ClearActor()
	return teu
}

// ClearIssue clears the "issue" edge to the Issue entity.
func (teu *TimelineEventUpdate) ClearIssue() *TimelineEventUpdate {
	teu.mutation.ClearIssue()
	return teu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TimelineEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TimelineEventUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TimelineEventUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TimelineEventUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teu *TimelineEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelineevent.Table, timelineevent.Columns, sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt64))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.NumericID(); ok {
		_spec.SetField(timelineevent.FieldNumericID, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedNumericID(); ok {
		_spec.AddField(timelineevent.FieldNumericID, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.NodeID(); ok {
		_spec.SetField(timelineevent.FieldNodeID, field.TypeString, value)
	}
	if value, ok := teu.mutation.URL(); ok {
		_spec.SetField(timelineevent.FieldURL, field.TypeString, value)
	}
	if value, ok := teu.mutation.Event(); ok {
		_spec.SetField(timelineevent.FieldEvent, field.TypeString, value)
	}
	if value, ok := teu.mutation.CommitID(); ok {
		_spec.SetField(timelineevent.FieldCommitID, field.TypeString, value)
	}
	if teu.mutation.CommitIDCleared() {
		_spec.ClearField(timelineevent.FieldCommitID, field.TypeString)
	}
	if value, ok := teu.mutation.CommitURL(); ok {
		_spec.SetField(timelineevent.FieldCommitURL, field.TypeString, value)
	}
	if teu.mutation.CommitURLCleared() {
		_spec.ClearField(timelineevent.FieldCommitURL, field.TypeString)
	}
	if value, ok := teu.mutation.CreatedAt(); ok {
		_spec.SetField(timelineevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teu.mutation.Data(); ok {
		_spec.SetField(timelineevent.FieldData, field.TypeJSON, value)
	}
	if teu.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timelineevent.ActorTable,
			Columns: []string{timelineevent.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timelineevent.ActorTable,
			Columns: []string{timelineevent.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teu.mutation.IssueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.IssueTable,
			Columns: []string{timelineevent.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.IssueTable,
			Columns: []string{timelineevent.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelineevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TimelineEventUpdateOne is the builder for updating a single TimelineEvent entity.
type TimelineEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimelineEventMutation
}

// SetNumericID sets the "numeric_id" field.
func (teuo *TimelineEventUpdateOne) SetNumericID(i int64) *TimelineEventUpdateOne {
	teuo.mutation.ResetNumericID()
	teuo.mutation.SetNumericID(i)
	return teuo
}

// SetNillableNumericID sets the "numeric_id" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableNumericID(i *int64) *TimelineEventUpdateOne {
	if i != nil {
		teuo.SetNumericID(*i)
	}
	return teuo
}

// AddNumericID adds i to the "numeric_id" field.
func (teuo *TimelineEventUpdateOne) AddNumericID(i int64) *TimelineEventUpdateOne {
	teuo.mutation.AddNumericID(i)
	return teuo
}

// SetNodeID sets the "node_id" field.
func (teuo *TimelineEventUpdateOne) SetNodeID(s string) *TimelineEventUpdateOne {
	teuo.mutation.SetNodeID(s)
	return teuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableNodeID(s *string) *TimelineEventUpdateOne {
	if s != nil {
		teuo.SetNodeID(*s)
	}
	return teuo
}

// SetURL sets the "url" field.
func (teuo *TimelineEventUpdateOne) SetURL(s string) *TimelineEventUpdateOne {
	teuo.mutation.SetURL(s)
	return teuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableURL(s *string) *TimelineEventUpdateOne {
	if s != nil {
		teuo.SetURL(*s)
	}
	return teuo
}

// SetEvent sets the "event" field.
func (teuo *TimelineEventUpdateOne) SetEvent(s string) *TimelineEventUpdateOne {
	teuo.mutation.SetEvent(s)
	return teuo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableEvent(s *string) *TimelineEventUpdateOne {
	if s != nil {
		teuo.SetEvent(*s)
	}
	return teuo
}

// SetCommitID sets the "commit_id" field.
func (teuo *TimelineEventUpdateOne) SetCommitID(s string) *TimelineEventUpdateOne {
	teuo.mutation.SetCommitID(s)
	return teuo
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableCommitID(s *string) *TimelineEventUpdateOne {
	if s != nil {
		teuo.SetCommitID(*s)
	}
	return teuo
}

// ClearCommitID clears the value of the "commit_id" field.
func (teuo *TimelineEventUpdateOne) ClearCommitID() *TimelineEventUpdateOne {
	teuo.mutation.ClearCommitID()
	return teuo
}

// SetCommitURL sets the "commit_url" field.
func (teuo *TimelineEventUpdateOne) SetCommitURL(s string) *TimelineEventUpdateOne {
	teuo.mutation.SetCommitURL(s)
	return teuo
}

// SetNillableCommitURL sets the "commit_url" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableCommitURL(s *string) *TimelineEventUpdateOne {
	if s != nil {
		teuo.SetCommitURL(*s)
	}
	return teuo
}

// ClearCommitURL clears the value of the "commit_url" field.
func (teuo *TimelineEventUpdateOne) ClearCommitURL() *TimelineEventUpdateOne {
	teuo.mutation.ClearCommitURL()
	return teuo
}

// SetCreatedAt sets the "created_at" field.
func (teuo *TimelineEventUpdateOne) SetCreatedAt(t time.Time) *TimelineEventUpdateOne {
	teuo.mutation.SetCreatedAt(t)
	return teuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableCreatedAt(t *time.Time) *TimelineEventUpdateOne {
	if t != nil {
		teuo.SetCreatedAt(*t)
	}
	return teuo
}

// SetData sets the "data" field.
func (teuo *TimelineEventUpdateOne) SetData(mew model.TimelineEventWrapper) *TimelineEventUpdateOne {
	teuo.mutation.SetData(mew)
	return teuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableData(mew *model.TimelineEventWrapper) *TimelineEventUpdateOne {
	if mew != nil {
		teuo.SetData(*mew)
	}
	return teuo
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (teuo *TimelineEventUpdateOne) SetActorID(id int64) *TimelineEventUpdateOne {
	teuo.mutation.SetActorID(id)
	return teuo
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableActorID(id *int64) *TimelineEventUpdateOne {
	if id != nil {
		teuo = teuo.SetActorID(*id)
	}
	return teuo
}

// SetActor sets the "actor" edge to the User entity.
func (teuo *TimelineEventUpdateOne) SetActor(u *User) *TimelineEventUpdateOne {
	return teuo.SetActorID(u.ID)
}

// SetIssueID sets the "issue" edge to the Issue entity by ID.
func (teuo *TimelineEventUpdateOne) SetIssueID(id int64) *TimelineEventUpdateOne {
	teuo.mutation.SetIssueID(id)
	return teuo
}

// SetNillableIssueID sets the "issue" edge to the Issue entity by ID if the given value is not nil.
func (teuo *TimelineEventUpdateOne) SetNillableIssueID(id *int64) *TimelineEventUpdateOne {
	if id != nil {
		teuo = teuo.SetIssueID(*id)
	}
	return teuo
}

// SetIssue sets the "issue" edge to the Issue entity.
func (teuo *TimelineEventUpdateOne) SetIssue(i *Issue) *TimelineEventUpdateOne {
	return teuo.SetIssueID(i.ID)
}

// Mutation returns the TimelineEventMutation object of the builder.
func (teuo *TimelineEventUpdateOne) Mutation() *TimelineEventMutation {
	return teuo.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (teuo *TimelineEventUpdateOne) ClearActor() *TimelineEventUpdateOne {
	teuo.mutation.ClearActor()
	return teuo
}

// ClearIssue clears the "issue" edge to the Issue entity.
func (teuo *TimelineEventUpdateOne) ClearIssue() *TimelineEventUpdateOne {
	teuo.mutation.ClearIssue()
	return teuo
}

// Where appends a list predicates to the TimelineEventUpdate builder.
func (teuo *TimelineEventUpdateOne) Where(ps ...predicate.TimelineEvent) *TimelineEventUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TimelineEventUpdateOne) Select(field string, fields ...string) *TimelineEventUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TimelineEvent entity.
func (teuo *TimelineEventUpdateOne) Save(ctx context.Context) (*TimelineEvent, error) {
	return withHooks(ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TimelineEventUpdateOne) SaveX(ctx context.Context) *TimelineEvent {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TimelineEventUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TimelineEventUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teuo *TimelineEventUpdateOne) sqlSave(ctx context.Context) (_node *TimelineEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelineevent.Table, timelineevent.Columns, sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt64))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimelineEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timelineevent.FieldID)
		for _, f := range fields {
			if !timelineevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timelineevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.NumericID(); ok {
		_spec.SetField(timelineevent.FieldNumericID, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedNumericID(); ok {
		_spec.AddField(timelineevent.FieldNumericID, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.NodeID(); ok {
		_spec.SetField(timelineevent.FieldNodeID, field.TypeString, value)
	}
	if value, ok := teuo.mutation.URL(); ok {
		_spec.SetField(timelineevent.FieldURL, field.TypeString, value)
	}
	if value, ok := teuo.mutation.Event(); ok {
		_spec.SetField(timelineevent.FieldEvent, field.TypeString, value)
	}
	if value, ok := teuo.mutation.CommitID(); ok {
		_spec.SetField(timelineevent.FieldCommitID, field.TypeString, value)
	}
	if teuo.mutation.CommitIDCleared() {
		_spec.ClearField(timelineevent.FieldCommitID, field.TypeString)
	}
	if value, ok := teuo.mutation.CommitURL(); ok {
		_spec.SetField(timelineevent.FieldCommitURL, field.TypeString, value)
	}
	if teuo.mutation.CommitURLCleared() {
		_spec.ClearField(timelineevent.FieldCommitURL, field.TypeString)
	}
	if value, ok := teuo.mutation.CreatedAt(); ok {
		_spec.SetField(timelineevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teuo.mutation.Data(); ok {
		_spec.SetField(timelineevent.FieldData, field.TypeJSON, value)
	}
	if teuo.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timelineevent.ActorTable,
			Columns: []string{timelineevent.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timelineevent.ActorTable,
			Columns: []string{timelineevent.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teuo.mutation.IssueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.IssueTable,
			Columns: []string{timelineevent.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.IssueTable,
			Columns: []string{timelineevent.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimelineEvent{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelineevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
