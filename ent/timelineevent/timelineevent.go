// Code generated by ent, DO NOT EDIT.

package timelineevent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the timelineevent type in the database.
	Label = "timeline_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumericID holds the string denoting the numeric_id field in the database.
	FieldNumericID = "numeric_id"
	// FieldNodeID holds the string denoting the node_id field in the database.
	FieldNodeID = "node_id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldCommitID holds the string denoting the commit_id field in the database.
	FieldCommitID = "commit_id"
	// FieldCommitURL holds the string denoting the commit_url field in the database.
	FieldCommitURL = "commit_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeActor holds the string denoting the actor edge name in mutations.
	EdgeActor = "actor"
	// EdgeIssue holds the string denoting the issue edge name in mutations.
	EdgeIssue = "issue"
	// Table holds the table name of the timelineevent in the database.
	Table = "timeline_events"
	// ActorTable is the table that holds the actor relation/edge.
	ActorTable = "timeline_events"
	// ActorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActorInverseTable = "users"
	// ActorColumn is the table column denoting the actor relation/edge.
	ActorColumn = "timeline_event_actor"
	// IssueTable is the table that holds the issue relation/edge.
	IssueTable = "timeline_events"
	// IssueInverseTable is the table name for the Issue entity.
	// It exists in this package in order to avoid circular dependency with the "issue" package.
	IssueInverseTable = "issues"
	// IssueColumn is the table column denoting the issue relation/edge.
	IssueColumn = "issue_timeline"
)

// Columns holds all SQL columns for timelineevent fields.
var Columns = []string{
	FieldID,
	FieldNumericID,
	FieldNodeID,
	FieldURL,
	FieldEvent,
	FieldCommitID,
	FieldCommitURL,
	FieldCreatedAt,
	FieldData,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "timeline_events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"issue_timeline",
	"timeline_event_actor",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NodeIDValidator is a validator for the "node_id" field. It is called by the builders before save.
	NodeIDValidator func(string) error
)

// OrderOption defines the ordering options for the TimelineEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNumericID orders the results by the numeric_id field.
func ByNumericID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumericID, opts...).ToFunc()
}

// ByNodeID orders the results by the node_id field.
func ByNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByCommitID orders the results by the commit_id field.
func ByCommitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitID, opts...).ToFunc()
}

// ByCommitURL orders the results by the commit_url field.
func ByCommitURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByActorField orders the results by actor field.
func ByActorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActorStep(), sql.OrderByField(field, opts...))
	}
}

// ByIssueField orders the results by issue field.
func ByIssueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIssueStep(), sql.OrderByField(field, opts...))
	}
}
func newActorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ActorTable, ActorColumn),
	)
}
func newIssueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IssueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IssueTable, IssueColumn),
	)
}
