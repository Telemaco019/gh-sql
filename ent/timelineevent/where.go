// Code generated by ent, DO NOT EDIT.

package timelineevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnoverse/gh-sql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldID, id))
}

// NumericID applies equality check predicate on the "numeric_id" field. It's identical to NumericIDEQ.
func NumericID(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldNumericID, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldNodeID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldURL, v))
}

// Event applies equality check predicate on the "event" field. It's identical to EventEQ.
func Event(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldEvent, v))
}

// CommitID applies equality check predicate on the "commit_id" field. It's identical to CommitIDEQ.
func CommitID(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCommitID, v))
}

// CommitURL applies equality check predicate on the "commit_url" field. It's identical to CommitURLEQ.
func CommitURL(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCommitURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// NumericIDEQ applies the EQ predicate on the "numeric_id" field.
func NumericIDEQ(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldNumericID, v))
}

// NumericIDNEQ applies the NEQ predicate on the "numeric_id" field.
func NumericIDNEQ(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldNumericID, v))
}

// NumericIDIn applies the In predicate on the "numeric_id" field.
func NumericIDIn(vs ...int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldNumericID, vs...))
}

// NumericIDNotIn applies the NotIn predicate on the "numeric_id" field.
func NumericIDNotIn(vs ...int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldNumericID, vs...))
}

// NumericIDGT applies the GT predicate on the "numeric_id" field.
func NumericIDGT(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldNumericID, v))
}

// NumericIDGTE applies the GTE predicate on the "numeric_id" field.
func NumericIDGTE(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldNumericID, v))
}

// NumericIDLT applies the LT predicate on the "numeric_id" field.
func NumericIDLT(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldNumericID, v))
}

// NumericIDLTE applies the LTE predicate on the "numeric_id" field.
func NumericIDLTE(v int64) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldNumericID, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContainsFold(FieldNodeID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContainsFold(FieldURL, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldEvent, vs...))
}

// EventGT applies the GT predicate on the "event" field.
func EventGT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldEvent, v))
}

// EventGTE applies the GTE predicate on the "event" field.
func EventGTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldEvent, v))
}

// EventLT applies the LT predicate on the "event" field.
func EventLT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldEvent, v))
}

// EventLTE applies the LTE predicate on the "event" field.
func EventLTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldEvent, v))
}

// EventContains applies the Contains predicate on the "event" field.
func EventContains(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContains(FieldEvent, v))
}

// EventHasPrefix applies the HasPrefix predicate on the "event" field.
func EventHasPrefix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasPrefix(FieldEvent, v))
}

// EventHasSuffix applies the HasSuffix predicate on the "event" field.
func EventHasSuffix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasSuffix(FieldEvent, v))
}

// EventEqualFold applies the EqualFold predicate on the "event" field.
func EventEqualFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEqualFold(FieldEvent, v))
}

// EventContainsFold applies the ContainsFold predicate on the "event" field.
func EventContainsFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContainsFold(FieldEvent, v))
}

// CommitIDEQ applies the EQ predicate on the "commit_id" field.
func CommitIDEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCommitID, v))
}

// CommitIDNEQ applies the NEQ predicate on the "commit_id" field.
func CommitIDNEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldCommitID, v))
}

// CommitIDIn applies the In predicate on the "commit_id" field.
func CommitIDIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldCommitID, vs...))
}

// CommitIDNotIn applies the NotIn predicate on the "commit_id" field.
func CommitIDNotIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldCommitID, vs...))
}

// CommitIDGT applies the GT predicate on the "commit_id" field.
func CommitIDGT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldCommitID, v))
}

// CommitIDGTE applies the GTE predicate on the "commit_id" field.
func CommitIDGTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldCommitID, v))
}

// CommitIDLT applies the LT predicate on the "commit_id" field.
func CommitIDLT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldCommitID, v))
}

// CommitIDLTE applies the LTE predicate on the "commit_id" field.
func CommitIDLTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldCommitID, v))
}

// CommitIDContains applies the Contains predicate on the "commit_id" field.
func CommitIDContains(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContains(FieldCommitID, v))
}

// CommitIDHasPrefix applies the HasPrefix predicate on the "commit_id" field.
func CommitIDHasPrefix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasPrefix(FieldCommitID, v))
}

// CommitIDHasSuffix applies the HasSuffix predicate on the "commit_id" field.
func CommitIDHasSuffix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasSuffix(FieldCommitID, v))
}

// CommitIDIsNil applies the IsNil predicate on the "commit_id" field.
func CommitIDIsNil() predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIsNull(FieldCommitID))
}

// CommitIDNotNil applies the NotNil predicate on the "commit_id" field.
func CommitIDNotNil() predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotNull(FieldCommitID))
}

// CommitIDEqualFold applies the EqualFold predicate on the "commit_id" field.
func CommitIDEqualFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEqualFold(FieldCommitID, v))
}

// CommitIDContainsFold applies the ContainsFold predicate on the "commit_id" field.
func CommitIDContainsFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContainsFold(FieldCommitID, v))
}

// CommitURLEQ applies the EQ predicate on the "commit_url" field.
func CommitURLEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCommitURL, v))
}

// CommitURLNEQ applies the NEQ predicate on the "commit_url" field.
func CommitURLNEQ(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldCommitURL, v))
}

// CommitURLIn applies the In predicate on the "commit_url" field.
func CommitURLIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldCommitURL, vs...))
}

// CommitURLNotIn applies the NotIn predicate on the "commit_url" field.
func CommitURLNotIn(vs ...string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldCommitURL, vs...))
}

// CommitURLGT applies the GT predicate on the "commit_url" field.
func CommitURLGT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldCommitURL, v))
}

// CommitURLGTE applies the GTE predicate on the "commit_url" field.
func CommitURLGTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldCommitURL, v))
}

// CommitURLLT applies the LT predicate on the "commit_url" field.
func CommitURLLT(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldCommitURL, v))
}

// CommitURLLTE applies the LTE predicate on the "commit_url" field.
func CommitURLLTE(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldCommitURL, v))
}

// CommitURLContains applies the Contains predicate on the "commit_url" field.
func CommitURLContains(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContains(FieldCommitURL, v))
}

// CommitURLHasPrefix applies the HasPrefix predicate on the "commit_url" field.
func CommitURLHasPrefix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasPrefix(FieldCommitURL, v))
}

// CommitURLHasSuffix applies the HasSuffix predicate on the "commit_url" field.
func CommitURLHasSuffix(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldHasSuffix(FieldCommitURL, v))
}

// CommitURLIsNil applies the IsNil predicate on the "commit_url" field.
func CommitURLIsNil() predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIsNull(FieldCommitURL))
}

// CommitURLNotNil applies the NotNil predicate on the "commit_url" field.
func CommitURLNotNil() predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotNull(FieldCommitURL))
}

// CommitURLEqualFold applies the EqualFold predicate on the "commit_url" field.
func CommitURLEqualFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEqualFold(FieldCommitURL, v))
}

// CommitURLContainsFold applies the ContainsFold predicate on the "commit_url" field.
func CommitURLContainsFold(v string) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldContainsFold(FieldCommitURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// HasActor applies the HasEdge predicate on the "actor" edge.
func HasActor() predicate.TimelineEvent {
	return predicate.TimelineEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ActorTable, ActorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActorWith applies the HasEdge predicate on the "actor" edge with a given conditions (other predicates).
func HasActorWith(preds ...predicate.User) predicate.TimelineEvent {
	return predicate.TimelineEvent(func(s *sql.Selector) {
		step := newActorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssue applies the HasEdge predicate on the "issue" edge.
func HasIssue() predicate.TimelineEvent {
	return predicate.TimelineEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IssueTable, IssueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssueWith applies the HasEdge predicate on the "issue" edge with a given conditions (other predicates).
func HasIssueWith(preds ...predicate.Issue) predicate.TimelineEvent {
	return predicate.TimelineEvent(func(s *sql.Selector) {
		step := newIssueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TimelineEvent) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TimelineEvent) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TimelineEvent) predicate.TimelineEvent {
	return predicate.TimelineEvent(sql.NotPredicates(p))
}
