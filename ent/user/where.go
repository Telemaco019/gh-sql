// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnolang/gh-sql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Login applies equality check predicate on the "login" field. It's identical to LoginEQ.
func Login(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogin, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNodeID, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// GravatarID applies equality check predicate on the "gravatar_id" field. It's identical to GravatarIDEQ.
func GravatarID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGravatarID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldURL, v))
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHTMLURL, v))
}

// FollowersURL applies equality check predicate on the "followers_url" field. It's identical to FollowersURLEQ.
func FollowersURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowersURL, v))
}

// FollowingURL applies equality check predicate on the "following_url" field. It's identical to FollowingURLEQ.
func FollowingURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowingURL, v))
}

// GistsURL applies equality check predicate on the "gists_url" field. It's identical to GistsURLEQ.
func GistsURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGistsURL, v))
}

// StarredURL applies equality check predicate on the "starred_url" field. It's identical to StarredURLEQ.
func StarredURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStarredURL, v))
}

// SubscriptionsURL applies equality check predicate on the "subscriptions_url" field. It's identical to SubscriptionsURLEQ.
func SubscriptionsURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubscriptionsURL, v))
}

// OrganizationsURL applies equality check predicate on the "organizations_url" field. It's identical to OrganizationsURLEQ.
func OrganizationsURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationsURL, v))
}

// ReposURL applies equality check predicate on the "repos_url" field. It's identical to ReposURLEQ.
func ReposURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReposURL, v))
}

// EventsURL applies equality check predicate on the "events_url" field. It's identical to EventsURLEQ.
func EventsURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEventsURL, v))
}

// ReceivedEventsURL applies equality check predicate on the "received_events_url" field. It's identical to ReceivedEventsURLEQ.
func ReceivedEventsURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReceivedEventsURL, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldType, v))
}

// SiteAdmin applies equality check predicate on the "site_admin" field. It's identical to SiteAdminEQ.
func SiteAdmin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSiteAdmin, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompany, v))
}

// Blog applies equality check predicate on the "blog" field. It's identical to BlogEQ.
func Blog(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBlog, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Hireable applies equality check predicate on the "hireable" field. It's identical to HireableEQ.
func Hireable(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHireable, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// PublicRepos applies equality check predicate on the "public_repos" field. It's identical to PublicReposEQ.
func PublicRepos(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicRepos, v))
}

// PublicGists applies equality check predicate on the "public_gists" field. It's identical to PublicGistsEQ.
func PublicGists(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicGists, v))
}

// Followers applies equality check predicate on the "followers" field. It's identical to FollowersEQ.
func Followers(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowers, v))
}

// Following applies equality check predicate on the "following" field. It's identical to FollowingEQ.
func Following(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowing, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// LoginEQ applies the EQ predicate on the "login" field.
func LoginEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogin, v))
}

// LoginNEQ applies the NEQ predicate on the "login" field.
func LoginNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLogin, v))
}

// LoginIn applies the In predicate on the "login" field.
func LoginIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLogin, vs...))
}

// LoginNotIn applies the NotIn predicate on the "login" field.
func LoginNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLogin, vs...))
}

// LoginGT applies the GT predicate on the "login" field.
func LoginGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLogin, v))
}

// LoginGTE applies the GTE predicate on the "login" field.
func LoginGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLogin, v))
}

// LoginLT applies the LT predicate on the "login" field.
func LoginLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLogin, v))
}

// LoginLTE applies the LTE predicate on the "login" field.
func LoginLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLogin, v))
}

// LoginContains applies the Contains predicate on the "login" field.
func LoginContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLogin, v))
}

// LoginHasPrefix applies the HasPrefix predicate on the "login" field.
func LoginHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLogin, v))
}

// LoginHasSuffix applies the HasSuffix predicate on the "login" field.
func LoginHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLogin, v))
}

// LoginEqualFold applies the EqualFold predicate on the "login" field.
func LoginEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLogin, v))
}

// LoginContainsFold applies the ContainsFold predicate on the "login" field.
func LoginContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLogin, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNodeID, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarURL, v))
}

// GravatarIDEQ applies the EQ predicate on the "gravatar_id" field.
func GravatarIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGravatarID, v))
}

// GravatarIDNEQ applies the NEQ predicate on the "gravatar_id" field.
func GravatarIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGravatarID, v))
}

// GravatarIDIn applies the In predicate on the "gravatar_id" field.
func GravatarIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGravatarID, vs...))
}

// GravatarIDNotIn applies the NotIn predicate on the "gravatar_id" field.
func GravatarIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGravatarID, vs...))
}

// GravatarIDGT applies the GT predicate on the "gravatar_id" field.
func GravatarIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGravatarID, v))
}

// GravatarIDGTE applies the GTE predicate on the "gravatar_id" field.
func GravatarIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGravatarID, v))
}

// GravatarIDLT applies the LT predicate on the "gravatar_id" field.
func GravatarIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGravatarID, v))
}

// GravatarIDLTE applies the LTE predicate on the "gravatar_id" field.
func GravatarIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGravatarID, v))
}

// GravatarIDContains applies the Contains predicate on the "gravatar_id" field.
func GravatarIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGravatarID, v))
}

// GravatarIDHasPrefix applies the HasPrefix predicate on the "gravatar_id" field.
func GravatarIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGravatarID, v))
}

// GravatarIDHasSuffix applies the HasSuffix predicate on the "gravatar_id" field.
func GravatarIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGravatarID, v))
}

// GravatarIDIsNil applies the IsNil predicate on the "gravatar_id" field.
func GravatarIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGravatarID))
}

// GravatarIDNotNil applies the NotNil predicate on the "gravatar_id" field.
func GravatarIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGravatarID))
}

// GravatarIDEqualFold applies the EqualFold predicate on the "gravatar_id" field.
func GravatarIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGravatarID, v))
}

// GravatarIDContainsFold applies the ContainsFold predicate on the "gravatar_id" field.
func GravatarIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGravatarID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldURL, v))
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHTMLURL, v))
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHTMLURL, v))
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHTMLURL, vs...))
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHTMLURL, vs...))
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHTMLURL, v))
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHTMLURL, v))
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHTMLURL, v))
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHTMLURL, v))
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHTMLURL, v))
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHTMLURL, v))
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHTMLURL, v))
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHTMLURL, v))
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHTMLURL, v))
}

// FollowersURLEQ applies the EQ predicate on the "followers_url" field.
func FollowersURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowersURL, v))
}

// FollowersURLNEQ applies the NEQ predicate on the "followers_url" field.
func FollowersURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowersURL, v))
}

// FollowersURLIn applies the In predicate on the "followers_url" field.
func FollowersURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowersURL, vs...))
}

// FollowersURLNotIn applies the NotIn predicate on the "followers_url" field.
func FollowersURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowersURL, vs...))
}

// FollowersURLGT applies the GT predicate on the "followers_url" field.
func FollowersURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowersURL, v))
}

// FollowersURLGTE applies the GTE predicate on the "followers_url" field.
func FollowersURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowersURL, v))
}

// FollowersURLLT applies the LT predicate on the "followers_url" field.
func FollowersURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowersURL, v))
}

// FollowersURLLTE applies the LTE predicate on the "followers_url" field.
func FollowersURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowersURL, v))
}

// FollowersURLContains applies the Contains predicate on the "followers_url" field.
func FollowersURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFollowersURL, v))
}

// FollowersURLHasPrefix applies the HasPrefix predicate on the "followers_url" field.
func FollowersURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFollowersURL, v))
}

// FollowersURLHasSuffix applies the HasSuffix predicate on the "followers_url" field.
func FollowersURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFollowersURL, v))
}

// FollowersURLEqualFold applies the EqualFold predicate on the "followers_url" field.
func FollowersURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFollowersURL, v))
}

// FollowersURLContainsFold applies the ContainsFold predicate on the "followers_url" field.
func FollowersURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFollowersURL, v))
}

// FollowingURLEQ applies the EQ predicate on the "following_url" field.
func FollowingURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowingURL, v))
}

// FollowingURLNEQ applies the NEQ predicate on the "following_url" field.
func FollowingURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowingURL, v))
}

// FollowingURLIn applies the In predicate on the "following_url" field.
func FollowingURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowingURL, vs...))
}

// FollowingURLNotIn applies the NotIn predicate on the "following_url" field.
func FollowingURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowingURL, vs...))
}

// FollowingURLGT applies the GT predicate on the "following_url" field.
func FollowingURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowingURL, v))
}

// FollowingURLGTE applies the GTE predicate on the "following_url" field.
func FollowingURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowingURL, v))
}

// FollowingURLLT applies the LT predicate on the "following_url" field.
func FollowingURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowingURL, v))
}

// FollowingURLLTE applies the LTE predicate on the "following_url" field.
func FollowingURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowingURL, v))
}

// FollowingURLContains applies the Contains predicate on the "following_url" field.
func FollowingURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFollowingURL, v))
}

// FollowingURLHasPrefix applies the HasPrefix predicate on the "following_url" field.
func FollowingURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFollowingURL, v))
}

// FollowingURLHasSuffix applies the HasSuffix predicate on the "following_url" field.
func FollowingURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFollowingURL, v))
}

// FollowingURLEqualFold applies the EqualFold predicate on the "following_url" field.
func FollowingURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFollowingURL, v))
}

// FollowingURLContainsFold applies the ContainsFold predicate on the "following_url" field.
func FollowingURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFollowingURL, v))
}

// GistsURLEQ applies the EQ predicate on the "gists_url" field.
func GistsURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGistsURL, v))
}

// GistsURLNEQ applies the NEQ predicate on the "gists_url" field.
func GistsURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGistsURL, v))
}

// GistsURLIn applies the In predicate on the "gists_url" field.
func GistsURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGistsURL, vs...))
}

// GistsURLNotIn applies the NotIn predicate on the "gists_url" field.
func GistsURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGistsURL, vs...))
}

// GistsURLGT applies the GT predicate on the "gists_url" field.
func GistsURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGistsURL, v))
}

// GistsURLGTE applies the GTE predicate on the "gists_url" field.
func GistsURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGistsURL, v))
}

// GistsURLLT applies the LT predicate on the "gists_url" field.
func GistsURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGistsURL, v))
}

// GistsURLLTE applies the LTE predicate on the "gists_url" field.
func GistsURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGistsURL, v))
}

// GistsURLContains applies the Contains predicate on the "gists_url" field.
func GistsURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGistsURL, v))
}

// GistsURLHasPrefix applies the HasPrefix predicate on the "gists_url" field.
func GistsURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGistsURL, v))
}

// GistsURLHasSuffix applies the HasSuffix predicate on the "gists_url" field.
func GistsURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGistsURL, v))
}

// GistsURLEqualFold applies the EqualFold predicate on the "gists_url" field.
func GistsURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGistsURL, v))
}

// GistsURLContainsFold applies the ContainsFold predicate on the "gists_url" field.
func GistsURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGistsURL, v))
}

// StarredURLEQ applies the EQ predicate on the "starred_url" field.
func StarredURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStarredURL, v))
}

// StarredURLNEQ applies the NEQ predicate on the "starred_url" field.
func StarredURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStarredURL, v))
}

// StarredURLIn applies the In predicate on the "starred_url" field.
func StarredURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldStarredURL, vs...))
}

// StarredURLNotIn applies the NotIn predicate on the "starred_url" field.
func StarredURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStarredURL, vs...))
}

// StarredURLGT applies the GT predicate on the "starred_url" field.
func StarredURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldStarredURL, v))
}

// StarredURLGTE applies the GTE predicate on the "starred_url" field.
func StarredURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStarredURL, v))
}

// StarredURLLT applies the LT predicate on the "starred_url" field.
func StarredURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldStarredURL, v))
}

// StarredURLLTE applies the LTE predicate on the "starred_url" field.
func StarredURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStarredURL, v))
}

// StarredURLContains applies the Contains predicate on the "starred_url" field.
func StarredURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldStarredURL, v))
}

// StarredURLHasPrefix applies the HasPrefix predicate on the "starred_url" field.
func StarredURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldStarredURL, v))
}

// StarredURLHasSuffix applies the HasSuffix predicate on the "starred_url" field.
func StarredURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldStarredURL, v))
}

// StarredURLEqualFold applies the EqualFold predicate on the "starred_url" field.
func StarredURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldStarredURL, v))
}

// StarredURLContainsFold applies the ContainsFold predicate on the "starred_url" field.
func StarredURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldStarredURL, v))
}

// SubscriptionsURLEQ applies the EQ predicate on the "subscriptions_url" field.
func SubscriptionsURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubscriptionsURL, v))
}

// SubscriptionsURLNEQ applies the NEQ predicate on the "subscriptions_url" field.
func SubscriptionsURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSubscriptionsURL, v))
}

// SubscriptionsURLIn applies the In predicate on the "subscriptions_url" field.
func SubscriptionsURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSubscriptionsURL, vs...))
}

// SubscriptionsURLNotIn applies the NotIn predicate on the "subscriptions_url" field.
func SubscriptionsURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSubscriptionsURL, vs...))
}

// SubscriptionsURLGT applies the GT predicate on the "subscriptions_url" field.
func SubscriptionsURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSubscriptionsURL, v))
}

// SubscriptionsURLGTE applies the GTE predicate on the "subscriptions_url" field.
func SubscriptionsURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSubscriptionsURL, v))
}

// SubscriptionsURLLT applies the LT predicate on the "subscriptions_url" field.
func SubscriptionsURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSubscriptionsURL, v))
}

// SubscriptionsURLLTE applies the LTE predicate on the "subscriptions_url" field.
func SubscriptionsURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSubscriptionsURL, v))
}

// SubscriptionsURLContains applies the Contains predicate on the "subscriptions_url" field.
func SubscriptionsURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSubscriptionsURL, v))
}

// SubscriptionsURLHasPrefix applies the HasPrefix predicate on the "subscriptions_url" field.
func SubscriptionsURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSubscriptionsURL, v))
}

// SubscriptionsURLHasSuffix applies the HasSuffix predicate on the "subscriptions_url" field.
func SubscriptionsURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSubscriptionsURL, v))
}

// SubscriptionsURLEqualFold applies the EqualFold predicate on the "subscriptions_url" field.
func SubscriptionsURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSubscriptionsURL, v))
}

// SubscriptionsURLContainsFold applies the ContainsFold predicate on the "subscriptions_url" field.
func SubscriptionsURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSubscriptionsURL, v))
}

// OrganizationsURLEQ applies the EQ predicate on the "organizations_url" field.
func OrganizationsURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationsURL, v))
}

// OrganizationsURLNEQ applies the NEQ predicate on the "organizations_url" field.
func OrganizationsURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOrganizationsURL, v))
}

// OrganizationsURLIn applies the In predicate on the "organizations_url" field.
func OrganizationsURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOrganizationsURL, vs...))
}

// OrganizationsURLNotIn applies the NotIn predicate on the "organizations_url" field.
func OrganizationsURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOrganizationsURL, vs...))
}

// OrganizationsURLGT applies the GT predicate on the "organizations_url" field.
func OrganizationsURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOrganizationsURL, v))
}

// OrganizationsURLGTE applies the GTE predicate on the "organizations_url" field.
func OrganizationsURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOrganizationsURL, v))
}

// OrganizationsURLLT applies the LT predicate on the "organizations_url" field.
func OrganizationsURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOrganizationsURL, v))
}

// OrganizationsURLLTE applies the LTE predicate on the "organizations_url" field.
func OrganizationsURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOrganizationsURL, v))
}

// OrganizationsURLContains applies the Contains predicate on the "organizations_url" field.
func OrganizationsURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOrganizationsURL, v))
}

// OrganizationsURLHasPrefix applies the HasPrefix predicate on the "organizations_url" field.
func OrganizationsURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOrganizationsURL, v))
}

// OrganizationsURLHasSuffix applies the HasSuffix predicate on the "organizations_url" field.
func OrganizationsURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOrganizationsURL, v))
}

// OrganizationsURLEqualFold applies the EqualFold predicate on the "organizations_url" field.
func OrganizationsURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOrganizationsURL, v))
}

// OrganizationsURLContainsFold applies the ContainsFold predicate on the "organizations_url" field.
func OrganizationsURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOrganizationsURL, v))
}

// ReposURLEQ applies the EQ predicate on the "repos_url" field.
func ReposURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReposURL, v))
}

// ReposURLNEQ applies the NEQ predicate on the "repos_url" field.
func ReposURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldReposURL, v))
}

// ReposURLIn applies the In predicate on the "repos_url" field.
func ReposURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldReposURL, vs...))
}

// ReposURLNotIn applies the NotIn predicate on the "repos_url" field.
func ReposURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldReposURL, vs...))
}

// ReposURLGT applies the GT predicate on the "repos_url" field.
func ReposURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldReposURL, v))
}

// ReposURLGTE applies the GTE predicate on the "repos_url" field.
func ReposURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldReposURL, v))
}

// ReposURLLT applies the LT predicate on the "repos_url" field.
func ReposURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldReposURL, v))
}

// ReposURLLTE applies the LTE predicate on the "repos_url" field.
func ReposURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldReposURL, v))
}

// ReposURLContains applies the Contains predicate on the "repos_url" field.
func ReposURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldReposURL, v))
}

// ReposURLHasPrefix applies the HasPrefix predicate on the "repos_url" field.
func ReposURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldReposURL, v))
}

// ReposURLHasSuffix applies the HasSuffix predicate on the "repos_url" field.
func ReposURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldReposURL, v))
}

// ReposURLEqualFold applies the EqualFold predicate on the "repos_url" field.
func ReposURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldReposURL, v))
}

// ReposURLContainsFold applies the ContainsFold predicate on the "repos_url" field.
func ReposURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldReposURL, v))
}

// EventsURLEQ applies the EQ predicate on the "events_url" field.
func EventsURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEventsURL, v))
}

// EventsURLNEQ applies the NEQ predicate on the "events_url" field.
func EventsURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEventsURL, v))
}

// EventsURLIn applies the In predicate on the "events_url" field.
func EventsURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEventsURL, vs...))
}

// EventsURLNotIn applies the NotIn predicate on the "events_url" field.
func EventsURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEventsURL, vs...))
}

// EventsURLGT applies the GT predicate on the "events_url" field.
func EventsURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEventsURL, v))
}

// EventsURLGTE applies the GTE predicate on the "events_url" field.
func EventsURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEventsURL, v))
}

// EventsURLLT applies the LT predicate on the "events_url" field.
func EventsURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEventsURL, v))
}

// EventsURLLTE applies the LTE predicate on the "events_url" field.
func EventsURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEventsURL, v))
}

// EventsURLContains applies the Contains predicate on the "events_url" field.
func EventsURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEventsURL, v))
}

// EventsURLHasPrefix applies the HasPrefix predicate on the "events_url" field.
func EventsURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEventsURL, v))
}

// EventsURLHasSuffix applies the HasSuffix predicate on the "events_url" field.
func EventsURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEventsURL, v))
}

// EventsURLEqualFold applies the EqualFold predicate on the "events_url" field.
func EventsURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEventsURL, v))
}

// EventsURLContainsFold applies the ContainsFold predicate on the "events_url" field.
func EventsURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEventsURL, v))
}

// ReceivedEventsURLEQ applies the EQ predicate on the "received_events_url" field.
func ReceivedEventsURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLNEQ applies the NEQ predicate on the "received_events_url" field.
func ReceivedEventsURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLIn applies the In predicate on the "received_events_url" field.
func ReceivedEventsURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldReceivedEventsURL, vs...))
}

// ReceivedEventsURLNotIn applies the NotIn predicate on the "received_events_url" field.
func ReceivedEventsURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldReceivedEventsURL, vs...))
}

// ReceivedEventsURLGT applies the GT predicate on the "received_events_url" field.
func ReceivedEventsURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLGTE applies the GTE predicate on the "received_events_url" field.
func ReceivedEventsURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLLT applies the LT predicate on the "received_events_url" field.
func ReceivedEventsURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLLTE applies the LTE predicate on the "received_events_url" field.
func ReceivedEventsURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLContains applies the Contains predicate on the "received_events_url" field.
func ReceivedEventsURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLHasPrefix applies the HasPrefix predicate on the "received_events_url" field.
func ReceivedEventsURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLHasSuffix applies the HasSuffix predicate on the "received_events_url" field.
func ReceivedEventsURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLEqualFold applies the EqualFold predicate on the "received_events_url" field.
func ReceivedEventsURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldReceivedEventsURL, v))
}

// ReceivedEventsURLContainsFold applies the ContainsFold predicate on the "received_events_url" field.
func ReceivedEventsURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldReceivedEventsURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldType, v))
}

// SiteAdminEQ applies the EQ predicate on the "site_admin" field.
func SiteAdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSiteAdmin, v))
}

// SiteAdminNEQ applies the NEQ predicate on the "site_admin" field.
func SiteAdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSiteAdmin, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCompany, v))
}

// BlogEQ applies the EQ predicate on the "blog" field.
func BlogEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBlog, v))
}

// BlogNEQ applies the NEQ predicate on the "blog" field.
func BlogNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBlog, v))
}

// BlogIn applies the In predicate on the "blog" field.
func BlogIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBlog, vs...))
}

// BlogNotIn applies the NotIn predicate on the "blog" field.
func BlogNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBlog, vs...))
}

// BlogGT applies the GT predicate on the "blog" field.
func BlogGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBlog, v))
}

// BlogGTE applies the GTE predicate on the "blog" field.
func BlogGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBlog, v))
}

// BlogLT applies the LT predicate on the "blog" field.
func BlogLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBlog, v))
}

// BlogLTE applies the LTE predicate on the "blog" field.
func BlogLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBlog, v))
}

// BlogContains applies the Contains predicate on the "blog" field.
func BlogContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBlog, v))
}

// BlogHasPrefix applies the HasPrefix predicate on the "blog" field.
func BlogHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBlog, v))
}

// BlogHasSuffix applies the HasSuffix predicate on the "blog" field.
func BlogHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBlog, v))
}

// BlogIsNil applies the IsNil predicate on the "blog" field.
func BlogIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBlog))
}

// BlogNotNil applies the NotNil predicate on the "blog" field.
func BlogNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBlog))
}

// BlogEqualFold applies the EqualFold predicate on the "blog" field.
func BlogEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBlog, v))
}

// BlogContainsFold applies the ContainsFold predicate on the "blog" field.
func BlogContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBlog, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLocation, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// HireableEQ applies the EQ predicate on the "hireable" field.
func HireableEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHireable, v))
}

// HireableNEQ applies the NEQ predicate on the "hireable" field.
func HireableNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHireable, v))
}

// HireableIsNil applies the IsNil predicate on the "hireable" field.
func HireableIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHireable))
}

// HireableNotNil applies the NotNil predicate on the "hireable" field.
func HireableNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHireable))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBio, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBio))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBio, v))
}

// PublicReposEQ applies the EQ predicate on the "public_repos" field.
func PublicReposEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicRepos, v))
}

// PublicReposNEQ applies the NEQ predicate on the "public_repos" field.
func PublicReposNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicRepos, v))
}

// PublicReposIn applies the In predicate on the "public_repos" field.
func PublicReposIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldPublicRepos, vs...))
}

// PublicReposNotIn applies the NotIn predicate on the "public_repos" field.
func PublicReposNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPublicRepos, vs...))
}

// PublicReposGT applies the GT predicate on the "public_repos" field.
func PublicReposGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldPublicRepos, v))
}

// PublicReposGTE applies the GTE predicate on the "public_repos" field.
func PublicReposGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPublicRepos, v))
}

// PublicReposLT applies the LT predicate on the "public_repos" field.
func PublicReposLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldPublicRepos, v))
}

// PublicReposLTE applies the LTE predicate on the "public_repos" field.
func PublicReposLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPublicRepos, v))
}

// PublicGistsEQ applies the EQ predicate on the "public_gists" field.
func PublicGistsEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicGists, v))
}

// PublicGistsNEQ applies the NEQ predicate on the "public_gists" field.
func PublicGistsNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicGists, v))
}

// PublicGistsIn applies the In predicate on the "public_gists" field.
func PublicGistsIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldPublicGists, vs...))
}

// PublicGistsNotIn applies the NotIn predicate on the "public_gists" field.
func PublicGistsNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPublicGists, vs...))
}

// PublicGistsGT applies the GT predicate on the "public_gists" field.
func PublicGistsGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldPublicGists, v))
}

// PublicGistsGTE applies the GTE predicate on the "public_gists" field.
func PublicGistsGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPublicGists, v))
}

// PublicGistsLT applies the LT predicate on the "public_gists" field.
func PublicGistsLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldPublicGists, v))
}

// PublicGistsLTE applies the LTE predicate on the "public_gists" field.
func PublicGistsLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPublicGists, v))
}

// FollowersEQ applies the EQ predicate on the "followers" field.
func FollowersEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowers, v))
}

// FollowersNEQ applies the NEQ predicate on the "followers" field.
func FollowersNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowers, v))
}

// FollowersIn applies the In predicate on the "followers" field.
func FollowersIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowers, vs...))
}

// FollowersNotIn applies the NotIn predicate on the "followers" field.
func FollowersNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowers, vs...))
}

// FollowersGT applies the GT predicate on the "followers" field.
func FollowersGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowers, v))
}

// FollowersGTE applies the GTE predicate on the "followers" field.
func FollowersGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowers, v))
}

// FollowersLT applies the LT predicate on the "followers" field.
func FollowersLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowers, v))
}

// FollowersLTE applies the LTE predicate on the "followers" field.
func FollowersLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowers, v))
}

// FollowingEQ applies the EQ predicate on the "following" field.
func FollowingEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowing, v))
}

// FollowingNEQ applies the NEQ predicate on the "following" field.
func FollowingNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowing, v))
}

// FollowingIn applies the In predicate on the "following" field.
func FollowingIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowing, vs...))
}

// FollowingNotIn applies the NotIn predicate on the "following" field.
func FollowingNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowing, vs...))
}

// FollowingGT applies the GT predicate on the "following" field.
func FollowingGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowing, v))
}

// FollowingGTE applies the GTE predicate on the "following" field.
func FollowingGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowing, v))
}

// FollowingLT applies the LT predicate on the "following" field.
func FollowingLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowing, v))
}

// FollowingLTE applies the LTE predicate on the "following" field.
func FollowingLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowing, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRepositories applies the HasEdge predicate on the "repositories" edge.
func HasRepositories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepositoriesTable, RepositoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoriesWith applies the HasEdge predicate on the "repositories" edge with a given conditions (other predicates).
func HasRepositoriesWith(preds ...predicate.Repository) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRepositoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssuesCreated applies the HasEdge predicate on the "issues_created" edge.
func HasIssuesCreated() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssuesCreatedTable, IssuesCreatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuesCreatedWith applies the HasEdge predicate on the "issues_created" edge with a given conditions (other predicates).
func HasIssuesCreatedWith(preds ...predicate.Issue) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIssuesCreatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentsCreated applies the HasEdge predicate on the "comments_created" edge.
func HasCommentsCreated() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsCreatedTable, CommentsCreatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsCreatedWith applies the HasEdge predicate on the "comments_created" edge with a given conditions (other predicates).
func HasCommentsCreatedWith(preds ...predicate.IssueComment) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCommentsCreatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssuesAssigned applies the HasEdge predicate on the "issues_assigned" edge.
func HasIssuesAssigned() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IssuesAssignedTable, IssuesAssignedPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuesAssignedWith applies the HasEdge predicate on the "issues_assigned" edge with a given conditions (other predicates).
func HasIssuesAssignedWith(preds ...predicate.Issue) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIssuesAssignedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTimelineEventsCreated applies the HasEdge predicate on the "timeline_events_created" edge.
func HasTimelineEventsCreated() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TimelineEventsCreatedTable, TimelineEventsCreatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimelineEventsCreatedWith applies the HasEdge predicate on the "timeline_events_created" edge with a given conditions (other predicates).
func HasTimelineEventsCreatedWith(preds ...predicate.TimelineEvent) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTimelineEventsCreatedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
